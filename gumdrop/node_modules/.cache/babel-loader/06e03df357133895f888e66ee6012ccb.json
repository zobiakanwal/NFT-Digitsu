{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"C:\\\\Users\\\\AHSAN PC\\\\Desktop\\\\digitsu\\\\gamp\\\\js\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\");\n\nvar _asyncToGenerator = require(\"C:\\\\Users\\\\AHSAN PC\\\\Desktop\\\\digitsu\\\\gamp\\\\js\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\asyncToGenerator.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.unsafeResAccounts = exports.unsafeAccount = exports.getProgramAccounts = void 0;\n\nfunction getProgramAccounts(_x, _x2, _x3) {\n  return _getProgramAccounts.apply(this, arguments);\n}\n\nfunction _getProgramAccounts() {\n  _getProgramAccounts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(connection, programId, configOrCommitment) {\n    var extra, commitment, args, unsafeRes;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            extra = {};\n\n            //let encoding;\n            if (configOrCommitment) {\n              if (typeof configOrCommitment === 'string') {\n                commitment = configOrCommitment;\n              } else {\n                commitment = configOrCommitment.commitment; //encoding = configOrCommitment.encoding;\n\n                if (configOrCommitment.dataSlice) {\n                  extra.dataSlice = configOrCommitment.dataSlice;\n                }\n\n                if (configOrCommitment.filters) {\n                  extra.filters = configOrCommitment.filters;\n                }\n              }\n            }\n\n            args = connection._buildArgs([programId], commitment, 'base64', extra);\n            _context.next = 5;\n            return connection._rpcRequest('getProgramAccounts', args);\n\n          case 5:\n            unsafeRes = _context.sent;\n            return _context.abrupt(\"return\", unsafeResAccounts(unsafeRes.result));\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _getProgramAccounts.apply(this, arguments);\n}\n\nexports.getProgramAccounts = getProgramAccounts;\n\nfunction unsafeAccount(account) {\n  return {\n    // TODO: possible delay parsing could be added here\n    data: Buffer.from(account.data[0], 'base64'),\n    executable: account.executable,\n    lamports: account.lamports,\n    // TODO: maybe we can do it in lazy way? or just use string\n    owner: account.owner\n  };\n}\n\nexports.unsafeAccount = unsafeAccount;\n\nfunction unsafeResAccounts(data) {\n  return data.map(function (item) {\n    return {\n      account: unsafeAccount(item.account),\n      pubkey: item.pubkey\n    };\n  });\n}\n\nexports.unsafeResAccounts = unsafeResAccounts;","map":{"version":3,"sources":["../../../../src/contexts/meta/web3.ts"],"names":[],"mappings":";;;;;;;;;;;SAIsB,kB;;;;;iFAAf,iBACL,UADK,EAEL,SAFK,EAGL,kBAHK;AAAA;AAAA;AAAA;AAAA;AAAA;AAKC,YAAA,KALD,GAKc,EALd;;AAOL;AAEA,gBAAI,kBAAJ,EAAwB;AACtB,kBAAI,OAAO,kBAAP,KAA8B,QAAlC,EAA4C;AAC1C,gBAAA,UAAU,GAAG,kBAAb;AACD,eAFD,MAEO;AACL,gBAAA,UAAU,GAAG,kBAAkB,CAAC,UAAhC,CADK,CAEL;;AAEA,oBAAI,kBAAkB,CAAC,SAAvB,EAAkC;AAChC,kBAAA,KAAK,CAAC,SAAN,GAAkB,kBAAkB,CAAC,SAArC;AACD;;AAED,oBAAI,kBAAkB,CAAC,OAAvB,EAAgC;AAC9B,kBAAA,KAAK,CAAC,OAAN,GAAgB,kBAAkB,CAAC,OAAnC;AACD;AACF;AACF;;AAEK,YAAA,IA1BD,GA0BQ,UAAU,CAAC,UAAX,CAAsB,CAAC,SAAD,CAAtB,EAAmC,UAAnC,EAA+C,QAA/C,EAAyD,KAAzD,CA1BR;AAAA;AAAA,mBA2BoB,UAAkB,CAAC,WAAnB,CACvB,oBADuB,EAEvB,IAFuB,CA3BpB;;AAAA;AA2BC,YAAA,SA3BD;AAAA,6CAgCE,iBAAiB,CAAC,SAAS,CAAC,MAAX,CAhCnB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAAP,OAAA,CAAA,kBAAA,GAAA,kBAAA;;AAmCA,SAAgB,aAAhB,CAA8B,OAA9B,EAAoE;AAClE,SAAO;AACL;AACA,IAAA,IAAI,EAAE,MAAM,CAAC,IAAP,CAAY,OAAO,CAAC,IAAR,CAAa,CAAb,CAAZ,EAA6B,QAA7B,CAFD;AAGL,IAAA,UAAU,EAAE,OAAO,CAAC,UAHf;AAIL,IAAA,QAAQ,EAAE,OAAO,CAAC,QAJb;AAKL;AACA,IAAA,KAAK,EAAE,OAAO,CAAC;AANV,GAAP;AAQD;;AATD,OAAA,CAAA,aAAA,GAAA,aAAA;;AAWA,SAAgB,iBAAhB,CACE,IADF,EAII;AAEF,SAAO,IAAI,CAAC,GAAL,CAAS,UAAA,IAAI;AAAA,WAAK;AACvB,MAAA,OAAO,EAAE,aAAa,CAAC,IAAI,CAAC,OAAN,CADC;AAEvB,MAAA,MAAM,EAAE,IAAI,CAAC;AAFU,KAAL;AAAA,GAAb,CAAP;AAID;;AAVD,OAAA,CAAA,iBAAA,GAAA,iBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.unsafeResAccounts = exports.unsafeAccount = exports.getProgramAccounts = void 0;\r\nasync function getProgramAccounts(connection, programId, configOrCommitment) {\r\n    const extra = {};\r\n    let commitment;\r\n    //let encoding;\r\n    if (configOrCommitment) {\r\n        if (typeof configOrCommitment === 'string') {\r\n            commitment = configOrCommitment;\r\n        }\r\n        else {\r\n            commitment = configOrCommitment.commitment;\r\n            //encoding = configOrCommitment.encoding;\r\n            if (configOrCommitment.dataSlice) {\r\n                extra.dataSlice = configOrCommitment.dataSlice;\r\n            }\r\n            if (configOrCommitment.filters) {\r\n                extra.filters = configOrCommitment.filters;\r\n            }\r\n        }\r\n    }\r\n    const args = connection._buildArgs([programId], commitment, 'base64', extra);\r\n    const unsafeRes = await connection._rpcRequest('getProgramAccounts', args);\r\n    return unsafeResAccounts(unsafeRes.result);\r\n}\r\nexports.getProgramAccounts = getProgramAccounts;\r\nfunction unsafeAccount(account) {\r\n    return {\r\n        // TODO: possible delay parsing could be added here\r\n        data: Buffer.from(account.data[0], 'base64'),\r\n        executable: account.executable,\r\n        lamports: account.lamports,\r\n        // TODO: maybe we can do it in lazy way? or just use string\r\n        owner: account.owner,\r\n    };\r\n}\r\nexports.unsafeAccount = unsafeAccount;\r\nfunction unsafeResAccounts(data) {\r\n    return data.map(item => ({\r\n        account: unsafeAccount(item.account),\r\n        pubkey: item.pubkey,\r\n    }));\r\n}\r\nexports.unsafeResAccounts = unsafeResAccounts;\r\n//# sourceMappingURL=web3.js.map"]},"metadata":{},"sourceType":"script"}