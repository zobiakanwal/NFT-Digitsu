{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"C:\\\\Users\\\\AHSAN PC\\\\Desktop\\\\digitsu\\\\gamp\\\\js\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\");\n\nvar _objectSpread = require(\"C:\\\\Users\\\\AHSAN PC\\\\Desktop\\\\digitsu\\\\gamp\\\\js\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\objectSpread2.js\").default;\n\nvar _objectWithoutProperties = require(\"C:\\\\Users\\\\AHSAN PC\\\\Desktop\\\\digitsu\\\\gamp\\\\js\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\objectWithoutProperties.js\").default;\n\nvar _asyncToGenerator = require(\"C:\\\\Users\\\\AHSAN PC\\\\Desktop\\\\digitsu\\\\gamp\\\\js\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\asyncToGenerator.js\").default;\n\nvar _excluded = [\"data\"];\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getMultipleAccounts = void 0;\n\nvar utils_1 = require(\"../../utils/utils\");\n\nvar getMultipleAccounts = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(connection, keys, commitment) {\n    var result, array;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return Promise.all((0, utils_1.chunks)(keys, 99).map(function (chunk) {\n              return getMultipleAccountsCore(connection, chunk, commitment);\n            }));\n\n          case 2:\n            result = _context.sent;\n            array = result.map(function (a) {\n              return a.array.map(function (acc) {\n                if (!acc) {\n                  return undefined;\n                }\n\n                var data = acc.data,\n                    rest = _objectWithoutProperties(acc, _excluded);\n\n                var obj = _objectSpread(_objectSpread({}, rest), {}, {\n                  data: Buffer.from(data[0], 'base64')\n                });\n\n                return obj;\n              });\n            }).flat();\n            return _context.abrupt(\"return\", {\n              keys: keys,\n              array: array\n            });\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function getMultipleAccounts(_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexports.getMultipleAccounts = getMultipleAccounts;\n\nvar getMultipleAccountsCore = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(connection, keys, commitment) {\n    var args, unsafeRes, array;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            args = connection._buildArgs([keys], commitment, 'base64');\n            _context2.next = 3;\n            return connection._rpcRequest('getMultipleAccounts', args);\n\n          case 3:\n            unsafeRes = _context2.sent;\n\n            if (!unsafeRes.error) {\n              _context2.next = 6;\n              break;\n            }\n\n            throw new Error('failed to get info about account ' + unsafeRes.error.message);\n\n          case 6:\n            if (!unsafeRes.result.value) {\n              _context2.next = 9;\n              break;\n            }\n\n            array = unsafeRes.result.value;\n            return _context2.abrupt(\"return\", {\n              keys: keys,\n              array: array\n            });\n\n          case 9:\n            throw new Error();\n\n          case 10:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function getMultipleAccountsCore(_x4, _x5, _x6) {\n    return _ref2.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["../../../../src/contexts/accounts/getMultipleAccounts.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;AACA,IAAA,OAAA,GAAA,OAAA,CAAA,mBAAA,CAAA;;AAEO,IAAM,mBAAmB;AAAA,sEAAG,iBACjC,UADiC,EAEjC,IAFiC,EAGjC,UAHiC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAKZ,OAAO,CAAC,GAAR,CACnB,CAAA,GAAA,OAAA,CAAA,MAAA,EAAO,IAAP,EAAa,EAAb,EAAiB,GAAjB,CAAqB,UAAA,KAAK;AAAA,qBACxB,uBAAuB,CAAC,UAAD,EAAa,KAAb,EAAoB,UAApB,CADC;AAAA,aAA1B,CADmB,CALY;;AAAA;AAK3B,YAAA,MAL2B;AAW3B,YAAA,KAX2B,GAWnB,MAAM,CACjB,GADW,CAEV,UAAA,CAAC;AAAA,qBACC,CAAC,CAAC,KAAF,CAAQ,GAAR,CAAY,UAAA,GAAG,EAAG;AAChB,oBAAI,CAAC,GAAL,EAAU;AACR,yBAAO,SAAP;AACD;;AAED,oBAAQ,IAAR,GAA0B,GAA1B,CAAQ,IAAR;AAAA,oBAAiB,IAAjB,4BAA0B,GAA1B;;AACA,oBAAM,GAAG,mCACJ,IADI;AAEP,kBAAA,IAAI,EAAE,MAAM,CAAC,IAAP,CAAY,IAAI,CAAC,CAAD,CAAhB,EAAqB,QAArB;AAFC,kBAAT;;AAIA,uBAAO,GAAP;AACD,eAXD,CADD;AAAA,aAFS,EAgBX,IAhBW,EAXmB;AAAA,6CA4B1B;AAAE,cAAA,IAAI,EAAJ,IAAF;AAAQ,cAAA,KAAK,EAAL;AAAR,aA5B0B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAnB,mBAAmB;AAAA;AAAA;AAAA,GAAzB;;AAAM,OAAA,CAAA,mBAAA,GAAmB,mBAAnB;;AA+Bb,IAAM,uBAAuB;AAAA,uEAAG,kBAC9B,UAD8B,EAE9B,IAF8B,EAG9B,UAH8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAKxB,YAAA,IALwB,GAKjB,UAAU,CAAC,UAAX,CAAsB,CAAC,IAAD,CAAtB,EAA8B,UAA9B,EAA0C,QAA1C,CALiB;AAAA;AAAA,mBAON,UAAU,CAAC,WAAX,CAAuB,qBAAvB,EAA8C,IAA9C,CAPM;;AAAA;AAOxB,YAAA,SAPwB;;AAAA,iBAQ1B,SAAS,CAAC,KARgB;AAAA;AAAA;AAAA;;AAAA,kBAStB,IAAI,KAAJ,CACJ,sCAAsC,SAAS,CAAC,KAAV,CAAgB,OADlD,CATsB;;AAAA;AAAA,iBAc1B,SAAS,CAAC,MAAV,CAAiB,KAdS;AAAA;AAAA;AAAA;;AAetB,YAAA,KAfsB,GAed,SAAS,CAAC,MAAV,CAAiB,KAfH;AAAA,8CAgBrB;AAAE,cAAA,IAAI,EAAJ,IAAF;AAAQ,cAAA,KAAK,EAAL;AAAR,aAhBqB;;AAAA;AAAA,kBAoBxB,IAAI,KAAJ,EApBwB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAvB,uBAAuB;AAAA;AAAA;AAAA,GAA7B","sourceRoot":"","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.getMultipleAccounts = void 0;\r\nconst utils_1 = require(\"../../utils/utils\");\r\nconst getMultipleAccounts = async (connection, keys, commitment) => {\r\n    const result = await Promise.all((0, utils_1.chunks)(keys, 99).map(chunk => getMultipleAccountsCore(connection, chunk, commitment)));\r\n    const array = result\r\n        .map(a => a.array.map(acc => {\r\n        if (!acc) {\r\n            return undefined;\r\n        }\r\n        const { data, ...rest } = acc;\r\n        const obj = {\r\n            ...rest,\r\n            data: Buffer.from(data[0], 'base64'),\r\n        };\r\n        return obj;\r\n    }))\r\n        .flat();\r\n    return { keys, array };\r\n};\r\nexports.getMultipleAccounts = getMultipleAccounts;\r\nconst getMultipleAccountsCore = async (connection, keys, commitment) => {\r\n    const args = connection._buildArgs([keys], commitment, 'base64');\r\n    const unsafeRes = await connection._rpcRequest('getMultipleAccounts', args);\r\n    if (unsafeRes.error) {\r\n        throw new Error('failed to get info about account ' + unsafeRes.error.message);\r\n    }\r\n    if (unsafeRes.result.value) {\r\n        const array = unsafeRes.result.value;\r\n        return { keys, array };\r\n    }\r\n    // TODO: fix\r\n    throw new Error();\r\n};\r\n//# sourceMappingURL=getMultipleAccounts.js.map"]},"metadata":{},"sourceType":"script"}