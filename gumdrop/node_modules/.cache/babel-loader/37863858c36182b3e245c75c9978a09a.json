{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"C:\\\\Users\\\\AHSAN PC\\\\Desktop\\\\digitsu\\\\gamp\\\\js\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\");\n\nvar _asyncToGenerator = require(\"C:\\\\Users\\\\AHSAN PC\\\\Desktop\\\\digitsu\\\\gamp\\\\js\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\asyncToGenerator.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createPipelineExecutor = void 0;\n\nfunction createPipelineExecutor(_x, _x2) {\n  return _createPipelineExecutor.apply(this, arguments);\n}\n\nfunction _createPipelineExecutor() {\n  _createPipelineExecutor = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(data, executor) {\n    var _ref,\n        _ref$delay,\n        delay,\n        _ref$jobsCount,\n        jobsCount,\n        _ref$sequence,\n        sequence,\n        execute,\n        next,\n        _next,\n        result,\n        i,\n        _args2 = arguments;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _next = function _next3() {\n              _next = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n                var iter, promises, isDone, _i, _iter;\n\n                return _regeneratorRuntime.wrap(function _callee$(_context) {\n                  while (1) {\n                    switch (_context.prev = _context.next) {\n                      case 0:\n                        if (!(sequence <= 1)) {\n                          _context.next = 8;\n                          break;\n                        }\n\n                        iter = data.next();\n\n                        if (!iter.done) {\n                          _context.next = 4;\n                          break;\n                        }\n\n                        return _context.abrupt(\"return\");\n\n                      case 4:\n                        _context.next = 6;\n                        return execute(iter);\n\n                      case 6:\n                        _context.next = 26;\n                        break;\n\n                      case 8:\n                        promises = [];\n                        isDone = false;\n                        _i = 0;\n\n                      case 11:\n                        if (!(_i < sequence)) {\n                          _context.next = 22;\n                          break;\n                        }\n\n                        _iter = data.next();\n\n                        if (_iter.done) {\n                          _context.next = 17;\n                          break;\n                        }\n\n                        promises.push(execute(_iter));\n                        _context.next = 19;\n                        break;\n\n                      case 17:\n                        isDone = true;\n                        return _context.abrupt(\"break\", 22);\n\n                      case 19:\n                        _i++;\n                        _context.next = 11;\n                        break;\n\n                      case 22:\n                        _context.next = 24;\n                        return Promise.all(promises);\n\n                      case 24:\n                        if (!isDone) {\n                          _context.next = 26;\n                          break;\n                        }\n\n                        return _context.abrupt(\"return\");\n\n                      case 26:\n                        if (!(delay > 0)) {\n                          _context.next = 31;\n                          break;\n                        }\n\n                        _context.next = 29;\n                        return new Promise(function (resolve) {\n                          return setTimeout(resolve, delay);\n                        });\n\n                      case 29:\n                        _context.next = 33;\n                        break;\n\n                      case 31:\n                        _context.next = 33;\n                        return Promise.resolve();\n\n                      case 33:\n                        _context.next = 35;\n                        return next();\n\n                      case 35:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }\n                }, _callee);\n              }));\n              return _next.apply(this, arguments);\n            };\n\n            next = function _next2() {\n              return _next.apply(this, arguments);\n            };\n\n            execute = function _execute(iter) {\n              executor(iter.value);\n            };\n\n            _ref = _args2.length > 2 && _args2[2] !== undefined ? _args2[2] : {}, _ref$delay = _ref.delay, delay = _ref$delay === void 0 ? 0 : _ref$delay, _ref$jobsCount = _ref.jobsCount, jobsCount = _ref$jobsCount === void 0 ? 1 : _ref$jobsCount, _ref$sequence = _ref.sequence, sequence = _ref$sequence === void 0 ? 1 : _ref$sequence;\n            result = new Array(jobsCount);\n\n            for (i = 0; i < jobsCount; i++) {\n              result[i] = next();\n            }\n\n            _context2.next = 8;\n            return Promise.all(result);\n\n          case 8:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _createPipelineExecutor.apply(this, arguments);\n}\n\nexports.createPipelineExecutor = createPipelineExecutor;","map":{"version":3,"sources":["../../../src/utils/createPipelineExecutor.ts"],"names":[],"mappings":";;;;;;;;;;;SAAsB,sB;;;;;qFAAf,kBACL,IADK,EAEL,QAFK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAaI,OAbJ;AAAA,QAiBU,IAjBV;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+EAiBL;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,8BACM,QAAQ,IAAI,CADlB;AAAA;AAAA;AAAA;;AAEU,wBAAA,IAFV,GAEiB,IAAI,CAAC,IAAL,EAFjB;;AAAA,6BAGQ,IAAI,CAAC,IAHb;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA,+BAMU,OAAO,CAAC,IAAD,CANjB;;AAAA;AAAA;AAAA;;AAAA;AAQU,wBAAA,QARV,GAQ4B,EAR5B;AASQ,wBAAA,MATR,GASiB,KATjB;AAUa,wBAAA,EAVb,GAUiB,CAVjB;;AAAA;AAAA,8BAUoB,EAAC,GAAG,QAVxB;AAAA;AAAA;AAAA;;AAWY,wBAAA,KAXZ,GAWmB,IAAI,CAAC,IAAL,EAXnB;;AAAA,4BAYW,KAAI,CAAC,IAZhB;AAAA;AAAA;AAAA;;AAaQ,wBAAA,QAAQ,CAAC,IAAT,CAAc,OAAO,CAAC,KAAD,CAArB;AAbR;AAAA;;AAAA;AAeQ,wBAAA,MAAM,GAAG,IAAT;AAfR;;AAAA;AAUkC,wBAAA,EAAC,EAVnC;AAAA;AAAA;;AAAA;AAAA;AAAA,+BAmBU,OAAO,CAAC,GAAR,CAAY,QAAZ,CAnBV;;AAAA;AAAA,6BAoBQ,MApBR;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA,8BAwBM,KAAK,GAAG,CAxBd;AAAA;AAAA;AAAA;;AAAA;AAAA,+BAyBU,IAAI,OAAJ,CAAY,UAAA,OAAO;AAAA,iCAAI,UAAU,CAAC,OAAD,EAAU,KAAV,CAAd;AAAA,yBAAnB,CAzBV;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,+BA2BU,OAAO,CAAC,OAAR,EA3BV;;AAAA;AAAA;AAAA,+BA6BQ,IAAI,EA7BZ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAjBK;AAAA;AAAA;;AAiBU,YAAA,IAjBV;AAAA;AAAA;;AAaI,YAAA,OAbJ,qBAae,IAbf,EAa2C;AAC9C,cAAA,QAAQ,CAAC,IAAI,CAAC,KAAN,CAAR;AACD,aAfI;;AAAA,8EAWD,EAXC,oBAIH,KAJG,EAIH,KAJG,2BAIK,CAJL,qCAKH,SALG,EAKH,SALG,+BAKS,CALT,wCAMH,QANG,EAMH,QANG,8BAMQ,CANR;AAgDC,YAAA,MAhDD,GAgDU,IAAI,KAAJ,CAAyB,SAAzB,CAhDV;;AAiDL,iBAAS,CAAT,GAAa,CAAb,EAAgB,CAAC,GAAG,SAApB,EAA+B,CAAC,EAAhC,EAAoC;AAClC,cAAA,MAAM,CAAC,CAAD,CAAN,GAAY,IAAI,EAAhB;AACD;;AAnDI;AAAA,mBAoDC,OAAO,CAAC,GAAR,CAAY,MAAZ,CApDD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAAP,OAAA,CAAA,sBAAA,GAAA,sBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.createPipelineExecutor = void 0;\r\nasync function createPipelineExecutor(data, executor, { delay = 0, jobsCount = 1, sequence = 1, } = {}) {\r\n    function execute(iter) {\r\n        executor(iter.value);\r\n    }\r\n    async function next() {\r\n        if (sequence <= 1) {\r\n            const iter = data.next();\r\n            if (iter.done) {\r\n                return;\r\n            }\r\n            await execute(iter);\r\n        }\r\n        else {\r\n            const promises = [];\r\n            let isDone = false;\r\n            for (let i = 0; i < sequence; i++) {\r\n                const iter = data.next();\r\n                if (!iter.done) {\r\n                    promises.push(execute(iter));\r\n                }\r\n                else {\r\n                    isDone = true;\r\n                    break;\r\n                }\r\n            }\r\n            await Promise.all(promises);\r\n            if (isDone) {\r\n                return;\r\n            }\r\n        }\r\n        if (delay > 0) {\r\n            await new Promise(resolve => setTimeout(resolve, delay));\r\n        }\r\n        else {\r\n            await Promise.resolve();\r\n        }\r\n        await next();\r\n    }\r\n    const result = new Array(jobsCount);\r\n    for (let i = 0; i < jobsCount; i++) {\r\n        result[i] = next();\r\n    }\r\n    await Promise.all(result);\r\n}\r\nexports.createPipelineExecutor = createPipelineExecutor;\r\n//# sourceMappingURL=createPipelineExecutor.js.map"]},"metadata":{},"sourceType":"script"}