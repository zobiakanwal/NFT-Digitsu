{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"C:\\\\Users\\\\AHSAN PC\\\\Desktop\\\\digitsu\\\\gamp\\\\js\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\");\n\nvar _asyncToGenerator = require(\"C:\\\\Users\\\\AHSAN PC\\\\Desktop\\\\digitsu\\\\gamp\\\\js\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\asyncToGenerator.js\").default;\n\nvar _objectSpread = require(\"C:\\\\Users\\\\AHSAN PC\\\\Desktop\\\\digitsu\\\\gamp\\\\js\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\objectSpread2.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.subscribeAccountsChange = void 0;\n\nvar utils_1 = require(\"../../utils\");\n\nvar loadAccounts_1 = require(\"./loadAccounts\");\n\nvar onChangeAccount_1 = require(\"./onChangeAccount\");\n\nvar processAuctions_1 = require(\"./processAuctions\");\n\nvar processMetaData_1 = require(\"./processMetaData\");\n\nvar processMetaplexAccounts_1 = require(\"./processMetaplexAccounts\");\n\nvar processVaultData_1 = require(\"./processVaultData\");\n\nvar subscribeAccountsChange = function subscribeAccountsChange(connection, getState, setState) {\n  var subscriptions = [];\n\n  var updateStateValue = function updateStateValue(prop, key, value) {\n    var state = getState();\n    var nextState = (0, loadAccounts_1.makeSetter)(_objectSpread({}, state))(prop, key, value);\n    setState(nextState);\n  };\n\n  subscriptions.push(connection.onProgramAccountChange((0, utils_1.toPublicKey)(utils_1.VAULT_ID), (0, onChangeAccount_1.onChangeAccount)(processVaultData_1.processVaultData, updateStateValue)));\n  subscriptions.push(connection.onProgramAccountChange((0, utils_1.toPublicKey)(utils_1.AUCTION_ID), (0, onChangeAccount_1.onChangeAccount)(processAuctions_1.processAuctions, updateStateValue)));\n  subscriptions.push(connection.onProgramAccountChange((0, utils_1.toPublicKey)(utils_1.METAPLEX_ID), (0, onChangeAccount_1.onChangeAccount)(processMetaplexAccounts_1.processMetaplexAccounts, updateStateValue)));\n  subscriptions.push(connection.onProgramAccountChange((0, utils_1.toPublicKey)(utils_1.METADATA_PROGRAM_ID), (0, onChangeAccount_1.onChangeAccount)(processMetaData_1.processMetaData, /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(prop, key, value) {\n      var state, setter, hasChanges, updater;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              state = _objectSpread({}, getState());\n              setter = (0, loadAccounts_1.makeSetter)(state);\n              hasChanges = false;\n\n              updater = function updater() {\n                hasChanges = true;\n                setter.apply(void 0, arguments);\n              };\n\n              if (!(prop === 'metadataByMint')) {\n                _context.next = 9;\n                break;\n              }\n\n              _context.next = 7;\n              return (0, loadAccounts_1.initMetadata)(value, state.whitelistedCreatorsByCreator, updater);\n\n            case 7:\n              _context.next = 10;\n              break;\n\n            case 9:\n              updater(prop, key, value);\n\n            case 10:\n              if (hasChanges) {\n                setState(state);\n              }\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x, _x2, _x3) {\n      return _ref.apply(this, arguments);\n    };\n  }())));\n  return function () {\n    subscriptions.forEach(function (subscriptionId) {\n      connection.removeProgramAccountChangeListener(subscriptionId);\n    });\n  };\n};\n\nexports.subscribeAccountsChange = subscribeAccountsChange;","map":{"version":3,"sources":["../../../../src/contexts/meta/subscribeAccountsChange.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.subscribeAccountsChange = void 0;\r\nconst utils_1 = require(\"../../utils\");\r\nconst loadAccounts_1 = require(\"./loadAccounts\");\r\nconst onChangeAccount_1 = require(\"./onChangeAccount\");\r\nconst processAuctions_1 = require(\"./processAuctions\");\r\nconst processMetaData_1 = require(\"./processMetaData\");\r\nconst processMetaplexAccounts_1 = require(\"./processMetaplexAccounts\");\r\nconst processVaultData_1 = require(\"./processVaultData\");\r\nconst subscribeAccountsChange = (connection, getState, setState) => {\r\n    const subscriptions = [];\r\n    const updateStateValue = (prop, key, value) => {\r\n        const state = getState();\r\n        const nextState = (0, loadAccounts_1.makeSetter)({ ...state })(prop, key, value);\r\n        setState(nextState);\r\n    };\r\n    subscriptions.push(connection.onProgramAccountChange((0, utils_1.toPublicKey)(utils_1.VAULT_ID), (0, onChangeAccount_1.onChangeAccount)(processVaultData_1.processVaultData, updateStateValue)));\r\n    subscriptions.push(connection.onProgramAccountChange((0, utils_1.toPublicKey)(utils_1.AUCTION_ID), (0, onChangeAccount_1.onChangeAccount)(processAuctions_1.processAuctions, updateStateValue)));\r\n    subscriptions.push(connection.onProgramAccountChange((0, utils_1.toPublicKey)(utils_1.METAPLEX_ID), (0, onChangeAccount_1.onChangeAccount)(processMetaplexAccounts_1.processMetaplexAccounts, updateStateValue)));\r\n    subscriptions.push(connection.onProgramAccountChange((0, utils_1.toPublicKey)(utils_1.METADATA_PROGRAM_ID), (0, onChangeAccount_1.onChangeAccount)(processMetaData_1.processMetaData, async (prop, key, value) => {\r\n        const state = { ...getState() };\r\n        const setter = (0, loadAccounts_1.makeSetter)(state);\r\n        let hasChanges = false;\r\n        const updater = (...args) => {\r\n            hasChanges = true;\r\n            setter(...args);\r\n        };\r\n        if (prop === 'metadataByMint') {\r\n            await (0, loadAccounts_1.initMetadata)(value, state.whitelistedCreatorsByCreator, updater);\r\n        }\r\n        else {\r\n            updater(prop, key, value);\r\n        }\r\n        if (hasChanges) {\r\n            setState(state);\r\n        }\r\n    })));\r\n    return () => {\r\n        subscriptions.forEach(subscriptionId => {\r\n            connection.removeProgramAccountChangeListener(subscriptionId);\r\n        });\r\n    };\r\n};\r\nexports.subscribeAccountsChange = subscribeAccountsChange;\r\n//# sourceMappingURL=subscribeAccountsChange.js.map"]},"metadata":{},"sourceType":"script"}