{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"C:\\\\Users\\\\AHSAN PC\\\\Desktop\\\\digitsu\\\\gamp\\\\js\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\createForOfIteratorHelper.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getSearchParams = exports.fromUTF8Array = exports.toUTF8Array = void 0; // credit https://stackoverflow.com/questions/18729405/how-to-convert-utf8-string-to-byte-array\n\nfunction toUTF8Array(str) {\n  var utf8 = [];\n\n  for (var i = 0; i < str.length; i++) {\n    var charcode = str.charCodeAt(i);\n    if (charcode < 0x80) utf8.push(charcode);else if (charcode < 0x800) {\n      utf8.push(0xc0 | charcode >> 6, 0x80 | charcode & 0x3f);\n    } else if (charcode < 0xd800 || charcode >= 0xe000) {\n      utf8.push(0xe0 | charcode >> 12, 0x80 | charcode >> 6 & 0x3f, 0x80 | charcode & 0x3f);\n    } // surrogate pair\n    else {\n      i++; // UTF-16 encodes 0x10000-0x10FFFF by\n      // subtracting 0x10000 and splitting the\n      // 20 bits of 0x0-0xFFFFF into two halves\n\n      charcode = 0x10000 + ((charcode & 0x3ff) << 10 | str.charCodeAt(i) & 0x3ff);\n      utf8.push(0xf0 | charcode >> 18, 0x80 | charcode >> 12 & 0x3f, 0x80 | charcode >> 6 & 0x3f, 0x80 | charcode & 0x3f);\n    }\n  }\n\n  return utf8;\n}\n\nexports.toUTF8Array = toUTF8Array; //courtesy https://gist.github.com/joni/3760795\n\nfunction fromUTF8Array(data) {\n  // array of bytes\n  var str = '',\n      i;\n\n  for (i = 0; i < data.length; i++) {\n    var value = data[i];\n\n    if (value < 0x80) {\n      str += String.fromCharCode(value);\n    } else if (value > 0xbf && value < 0xe0) {\n      str += String.fromCharCode((value & 0x1f) << 6 | data[i + 1] & 0x3f);\n      i += 1;\n    } else if (value > 0xdf && value < 0xf0) {\n      str += String.fromCharCode((value & 0x0f) << 12 | (data[i + 1] & 0x3f) << 6 | data[i + 2] & 0x3f);\n      i += 2;\n    } else {\n      // surrogate pair\n      var charCode = ((value & 0x07) << 18 | (data[i + 1] & 0x3f) << 12 | (data[i + 2] & 0x3f) << 6 | data[i + 3] & 0x3f) - 0x010000;\n      str += String.fromCharCode(charCode >> 10 | 0xd800, charCode & 0x03ff | 0xdc00);\n      i += 3;\n    }\n  }\n\n  return str;\n}\n\nexports.fromUTF8Array = fromUTF8Array;\n\nfunction getSearchParams(search) {\n  var searchParams = new URLSearchParams(search);\n  var searchData = {};\n\n  var _iterator = _createForOfIteratorHelper(searchParams.keys()),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var key = _step.value;\n      searchData[key] = searchParams.get(key);\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return searchData;\n}\n\nexports.getSearchParams = getSearchParams;","map":{"version":3,"sources":["../../../src/utils/strings.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.getSearchParams = exports.fromUTF8Array = exports.toUTF8Array = void 0;\r\n// credit https://stackoverflow.com/questions/18729405/how-to-convert-utf8-string-to-byte-array\r\nfunction toUTF8Array(str) {\r\n    const utf8 = [];\r\n    for (let i = 0; i < str.length; i++) {\r\n        let charcode = str.charCodeAt(i);\r\n        if (charcode < 0x80)\r\n            utf8.push(charcode);\r\n        else if (charcode < 0x800) {\r\n            utf8.push(0xc0 | (charcode >> 6), 0x80 | (charcode & 0x3f));\r\n        }\r\n        else if (charcode < 0xd800 || charcode >= 0xe000) {\r\n            utf8.push(0xe0 | (charcode >> 12), 0x80 | ((charcode >> 6) & 0x3f), 0x80 | (charcode & 0x3f));\r\n        }\r\n        // surrogate pair\r\n        else {\r\n            i++;\r\n            // UTF-16 encodes 0x10000-0x10FFFF by\r\n            // subtracting 0x10000 and splitting the\r\n            // 20 bits of 0x0-0xFFFFF into two halves\r\n            charcode =\r\n                0x10000 + (((charcode & 0x3ff) << 10) | (str.charCodeAt(i) & 0x3ff));\r\n            utf8.push(0xf0 | (charcode >> 18), 0x80 | ((charcode >> 12) & 0x3f), 0x80 | ((charcode >> 6) & 0x3f), 0x80 | (charcode & 0x3f));\r\n        }\r\n    }\r\n    return utf8;\r\n}\r\nexports.toUTF8Array = toUTF8Array;\r\n//courtesy https://gist.github.com/joni/3760795\r\nfunction fromUTF8Array(data) {\r\n    // array of bytes\r\n    let str = '', i;\r\n    for (i = 0; i < data.length; i++) {\r\n        const value = data[i];\r\n        if (value < 0x80) {\r\n            str += String.fromCharCode(value);\r\n        }\r\n        else if (value > 0xbf && value < 0xe0) {\r\n            str += String.fromCharCode(((value & 0x1f) << 6) | (data[i + 1] & 0x3f));\r\n            i += 1;\r\n        }\r\n        else if (value > 0xdf && value < 0xf0) {\r\n            str += String.fromCharCode(((value & 0x0f) << 12) |\r\n                ((data[i + 1] & 0x3f) << 6) |\r\n                (data[i + 2] & 0x3f));\r\n            i += 2;\r\n        }\r\n        else {\r\n            // surrogate pair\r\n            const charCode = (((value & 0x07) << 18) |\r\n                ((data[i + 1] & 0x3f) << 12) |\r\n                ((data[i + 2] & 0x3f) << 6) |\r\n                (data[i + 3] & 0x3f)) -\r\n                0x010000;\r\n            str += String.fromCharCode((charCode >> 10) | 0xd800, (charCode & 0x03ff) | 0xdc00);\r\n            i += 3;\r\n        }\r\n    }\r\n    return str;\r\n}\r\nexports.fromUTF8Array = fromUTF8Array;\r\nfunction getSearchParams(search) {\r\n    const searchParams = new URLSearchParams(search);\r\n    const searchData = {};\r\n    for (const key of searchParams.keys()) {\r\n        searchData[key] = searchParams.get(key);\r\n    }\r\n    return searchData;\r\n}\r\nexports.getSearchParams = getSearchParams;\r\n//# sourceMappingURL=strings.js.map"]},"metadata":{},"sourceType":"script"}