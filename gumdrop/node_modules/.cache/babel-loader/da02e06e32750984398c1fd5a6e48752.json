{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"C:\\\\Users\\\\AHSAN PC\\\\Desktop\\\\digitsu\\\\gamp\\\\js\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\toConsumableArray.js\").default;\n\nvar _regeneratorRuntime = require(\"C:\\\\Users\\\\AHSAN PC\\\\Desktop\\\\digitsu\\\\gamp\\\\js\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\");\n\nvar _asyncToGenerator = require(\"C:\\\\Users\\\\AHSAN PC\\\\Desktop\\\\digitsu\\\\gamp\\\\js\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\asyncToGenerator.js\").default;\n\nvar _slicedToArray = require(\"C:\\\\Users\\\\AHSAN PC\\\\Desktop\\\\digitsu\\\\gamp\\\\js\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\slicedToArray.js\").default;\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function get() {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.sendSignedTransaction = exports.getUnixTs = exports.sendTransactionWithRetry = exports.sendTransaction = exports.sendTransactionsWithRecentBlock = exports.sendTransactions = exports.sendTransactionsInChunks = exports.sendTransactionsWithManualRetry = exports.SequenceType = exports.getErrorForTransaction = exports.useConnectionConfig = exports.useConnection = exports.ConnectionProvider = exports.ENDPOINTS = void 0;\n\nvar react_1 = __importStar(require(\"react\"));\n\nvar utils_1 = require(\"../utils\");\n\nvar spl_token_registry_1 = require(\"@solana/spl-token-registry\");\n\nvar wallet_adapter_base_1 = require(\"@solana/wallet-adapter-base\");\n\nvar web3_js_1 = require(\"@solana/web3.js\");\n\nvar utils_2 = require(\"../utils/utils\");\n\nvar notifications_1 = require(\"../utils/notifications\");\n\nvar ExplorerLink_1 = require(\"../components/ExplorerLink\");\n\nvar hooks_1 = require(\"../hooks\");\n\nexports.ENDPOINTS = [{\n  name: 'mainnet-beta',\n  label: 'mainnet-beta',\n  url: 'https://api.metaplex.solana.com/',\n  chainId: spl_token_registry_1.ENV.MainnetBeta\n}, {\n  name: 'testnet',\n  label: 'testnet',\n  url: (0, web3_js_1.clusterApiUrl)('testnet'),\n  chainId: spl_token_registry_1.ENV.Testnet\n}, {\n  name: 'devnet',\n  label: 'devnet',\n  url: (0, web3_js_1.clusterApiUrl)('devnet'),\n  chainId: spl_token_registry_1.ENV.Devnet\n}];\nvar DEFAULT_ENDPOINT = exports.ENDPOINTS[0];\nvar ConnectionContext = react_1.default.createContext({\n  connection: new web3_js_1.Connection(DEFAULT_ENDPOINT.url, 'recent'),\n  endpoint: DEFAULT_ENDPOINT,\n  tokens: new Map()\n});\n\nfunction ConnectionProvider(_ref) {\n  var children = _ref.children;\n  var searchParams = (0, hooks_1.useQuerySearch)();\n\n  var _ref2 = (0, utils_2.useLocalStorageState)('network', DEFAULT_ENDPOINT.name),\n      _ref3 = _slicedToArray(_ref2, 2),\n      networkStorage = _ref3[0],\n      setNetworkStorage = _ref3[1];\n\n  var networkParam = searchParams.get('network');\n  var maybeEndpoint;\n\n  if (networkParam) {\n    var endpointParam = exports.ENDPOINTS.find(function (_ref4) {\n      var name = _ref4.name;\n      return name === networkParam;\n    });\n\n    if (endpointParam) {\n      maybeEndpoint = endpointParam;\n    }\n  }\n\n  if (networkStorage && !maybeEndpoint) {\n    var endpointStorage = exports.ENDPOINTS.find(function (_ref5) {\n      var name = _ref5.name;\n      return name === networkStorage;\n    });\n\n    if (endpointStorage) {\n      maybeEndpoint = endpointStorage;\n    }\n  }\n\n  var endpoint = maybeEndpoint || DEFAULT_ENDPOINT;\n\n  var _ref6 = (0, react_1.useRef)(new web3_js_1.Connection(endpoint.url)),\n      connection = _ref6.current;\n\n  var _ref7 = (0, react_1.useState)(new Map()),\n      _ref8 = _slicedToArray(_ref7, 2),\n      tokens = _ref8[0],\n      setTokens = _ref8[1];\n\n  (0, react_1.useEffect)(function () {\n    function fetchTokens() {\n      return (0, utils_1.getTokenListContainerPromise)().then(function (container) {\n        var list = container.excludeByTag('nft').filterByChainId(endpoint.chainId).getList();\n        var map = new Map(list.map(function (item) {\n          return [item.address, item];\n        }));\n        setTokens(map);\n      });\n    }\n\n    fetchTokens();\n  }, []);\n  (0, react_1.useEffect)(function () {\n    function updateNetworkInLocalStorageIfNeeded() {\n      if (networkStorage !== endpoint.name) {\n        setNetworkStorage(endpoint.name);\n      }\n    }\n\n    updateNetworkInLocalStorageIfNeeded();\n  }, []); // solana/web3.js closes its websocket connection when the subscription list\n  // is empty after opening for the first time, preventing subsequent\n  // subscriptions from receiving responses.\n  // This is a hack to prevent the list from ever being empty.\n\n  (0, react_1.useEffect)(function () {\n    var id = connection.onAccountChange(web3_js_1.Keypair.generate().publicKey, function () {});\n    return function () {\n      connection.removeAccountChangeListener(id);\n    };\n  }, []);\n  (0, react_1.useEffect)(function () {\n    var id = connection.onSlotChange(function () {\n      return null;\n    });\n    return function () {\n      connection.removeSlotChangeListener(id);\n    };\n  }, []);\n  var contextValue = react_1.default.useMemo(function () {\n    return {\n      endpoint: endpoint,\n      connection: connection,\n      tokens: tokens\n    };\n  }, [tokens]);\n  return react_1.default.createElement(ConnectionContext.Provider, {\n    value: contextValue\n  }, children);\n}\n\nexports.ConnectionProvider = ConnectionProvider;\n\nfunction useConnection() {\n  var _ref9 = (0, react_1.useContext)(ConnectionContext),\n      connection = _ref9.connection;\n\n  return connection;\n}\n\nexports.useConnection = useConnection;\n\nfunction useConnectionConfig() {\n  var _ref10 = (0, react_1.useContext)(ConnectionContext),\n      endpoint = _ref10.endpoint,\n      tokens = _ref10.tokens;\n\n  return {\n    endpoint: endpoint,\n    tokens: tokens\n  };\n}\n\nexports.useConnectionConfig = useConnectionConfig;\n\nvar getErrorForTransaction = /*#__PURE__*/function () {\n  var _ref11 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(connection, txid) {\n    var tx, errors;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return connection.confirmTransaction(txid, 'max');\n\n          case 2:\n            _context.next = 4;\n            return connection.getParsedConfirmedTransaction(txid);\n\n          case 4:\n            tx = _context.sent;\n            errors = [];\n\n            if ((tx === null || tx === void 0 ? void 0 : tx.meta) && tx.meta.logMessages) {\n              tx.meta.logMessages.forEach(function (log) {\n                var regex = /Error: (.*)/gm;\n                var m;\n\n                while ((m = regex.exec(log)) !== null) {\n                  // This is necessary to avoid infinite loops with zero-width matches\n                  if (m.index === regex.lastIndex) {\n                    regex.lastIndex++;\n                  }\n\n                  if (m.length > 1) {\n                    errors.push(m[1]);\n                  }\n                }\n              });\n            }\n\n            return _context.abrupt(\"return\", errors);\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function getErrorForTransaction(_x, _x2) {\n    return _ref11.apply(this, arguments);\n  };\n}();\n\nexports.getErrorForTransaction = getErrorForTransaction;\nvar SequenceType;\n\n(function (SequenceType) {\n  SequenceType[SequenceType[\"Sequential\"] = 0] = \"Sequential\";\n  SequenceType[SequenceType[\"Parallel\"] = 1] = \"Parallel\";\n  SequenceType[SequenceType[\"StopOnFailure\"] = 2] = \"StopOnFailure\";\n})(SequenceType = exports.SequenceType || (exports.SequenceType = {}));\n\nfunction sendTransactionsWithManualRetry(_x3, _x4, _x5, _x6) {\n  return _sendTransactionsWithManualRetry.apply(this, arguments);\n}\n\nfunction _sendTransactionsWithManualRetry() {\n  _sendTransactionsWithManualRetry = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(connection, wallet, instructions, signers) {\n    var stopPoint, tries, lastInstructionsLength, toRemoveSigners, filteredSigners;\n    return _regeneratorRuntime.wrap(function _callee7$(_context13) {\n      while (1) {\n        switch (_context13.prev = _context13.next) {\n          case 0:\n            stopPoint = 0;\n            tries = 0;\n            lastInstructionsLength = null;\n            toRemoveSigners = {};\n            instructions = instructions.filter(function (instr, i) {\n              if (instr.length > 0) {\n                return true;\n              } else {\n                toRemoveSigners[i] = true;\n                return false;\n              }\n            });\n            filteredSigners = signers.filter(function (_, i) {\n              return !toRemoveSigners[i];\n            });\n\n          case 6:\n            if (!(stopPoint < instructions.length && tries < 3)) {\n              _context13.next = 29;\n              break;\n            }\n\n            instructions = instructions.slice(stopPoint, instructions.length);\n            filteredSigners = filteredSigners.slice(stopPoint, filteredSigners.length);\n            if (instructions.length === lastInstructionsLength) tries = tries + 1;else tries = 0;\n            _context13.prev = 10;\n\n            if (!(instructions.length === 1)) {\n              _context13.next = 17;\n              break;\n            }\n\n            _context13.next = 14;\n            return (0, exports.sendTransactionWithRetry)(connection, wallet, instructions[0], filteredSigners[0], 'single');\n\n          case 14:\n            stopPoint = 1;\n            _context13.next = 20;\n            break;\n\n          case 17:\n            _context13.next = 19;\n            return (0, exports.sendTransactions)(connection, wallet, instructions, filteredSigners, SequenceType.StopOnFailure, 'single');\n\n          case 19:\n            stopPoint = _context13.sent;\n\n          case 20:\n            _context13.next = 25;\n            break;\n\n          case 22:\n            _context13.prev = 22;\n            _context13.t0 = _context13[\"catch\"](10);\n            console.error(_context13.t0);\n\n          case 25:\n            console.log('Died on ', stopPoint, 'retrying from instruction', instructions[stopPoint], 'instructions length is', instructions.length);\n            lastInstructionsLength = instructions.length;\n            _context13.next = 6;\n            break;\n\n          case 29:\n          case \"end\":\n            return _context13.stop();\n        }\n      }\n    }, _callee7, null, [[10, 22]]);\n  }));\n  return _sendTransactionsWithManualRetry.apply(this, arguments);\n}\n\nexports.sendTransactionsWithManualRetry = sendTransactionsWithManualRetry;\n\nvar sendTransactionsInChunks = /*#__PURE__*/function () {\n  var _ref12 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(connection, wallet, instructionSet, signersSet) {\n    var sequenceType,\n        commitment,\n        timeout,\n        batchSize,\n        instructionsChunk,\n        signersChunk,\n        _loop,\n        c,\n        _ret,\n        _args5 = arguments;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            sequenceType = _args5.length > 4 && _args5[4] !== undefined ? _args5[4] : SequenceType.Parallel;\n            commitment = _args5.length > 5 && _args5[5] !== undefined ? _args5[5] : 'singleGossip';\n            timeout = _args5.length > 6 && _args5[6] !== undefined ? _args5[6] : 120000;\n            batchSize = _args5.length > 7 ? _args5[7] : undefined;\n\n            if (wallet.publicKey) {\n              _context5.next = 6;\n              break;\n            }\n\n            throw new wallet_adapter_base_1.WalletNotConnectedError();\n\n          case 6:\n            instructionsChunk = [instructionSet];\n            signersChunk = [signersSet];\n            instructionsChunk = (0, utils_2.chunks)(instructionSet, batchSize);\n            signersChunk = (0, utils_2.chunks)(signersSet, batchSize);\n            _loop = /*#__PURE__*/_regeneratorRuntime.mark(function _loop(c) {\n              var unsignedTxns, _loop2, i, _ret2, signedTxns, breakEarlyObject, _loop3, _i, _ret3;\n\n              return _regeneratorRuntime.wrap(function _loop$(_context4) {\n                while (1) {\n                  switch (_context4.prev = _context4.next) {\n                    case 0:\n                      unsignedTxns = [];\n                      _loop2 = /*#__PURE__*/_regeneratorRuntime.mark(function _loop2(i) {\n                        var instructions, signers, transaction, block;\n                        return _regeneratorRuntime.wrap(function _loop2$(_context2) {\n                          while (1) {\n                            switch (_context2.prev = _context2.next) {\n                              case 0:\n                                instructions = instructionsChunk[c][i];\n                                signers = signersChunk[c][i];\n\n                                if (!(instructions.length === 0)) {\n                                  _context2.next = 4;\n                                  break;\n                                }\n\n                                return _context2.abrupt(\"return\", \"continue\");\n\n                              case 4:\n                                transaction = new web3_js_1.Transaction();\n                                _context2.next = 7;\n                                return connection.getRecentBlockhash(commitment);\n\n                              case 7:\n                                block = _context2.sent;\n                                instructions.forEach(function (instruction) {\n                                  return transaction.add(instruction);\n                                });\n                                transaction.recentBlockhash = block.blockhash;\n                                transaction.setSigners.apply(transaction, [// fee payed by the wallet owner\n                                wallet.publicKey].concat(_toConsumableArray(signers.map(function (s) {\n                                  return s.publicKey;\n                                }))));\n\n                                if (signers.length > 0) {\n                                  transaction.partialSign.apply(transaction, _toConsumableArray(signers));\n                                }\n\n                                unsignedTxns.push(transaction);\n\n                              case 13:\n                              case \"end\":\n                                return _context2.stop();\n                            }\n                          }\n                        }, _loop2);\n                      });\n                      i = 0;\n\n                    case 3:\n                      if (!(i < instructionsChunk[c].length)) {\n                        _context4.next = 11;\n                        break;\n                      }\n\n                      return _context4.delegateYield(_loop2(i), \"t0\", 5);\n\n                    case 5:\n                      _ret2 = _context4.t0;\n\n                      if (!(_ret2 === \"continue\")) {\n                        _context4.next = 8;\n                        break;\n                      }\n\n                      return _context4.abrupt(\"continue\", 8);\n\n                    case 8:\n                      i++;\n                      _context4.next = 3;\n                      break;\n\n                    case 11:\n                      _context4.next = 13;\n                      return wallet.signAllTransactions(unsignedTxns);\n\n                    case 13:\n                      signedTxns = _context4.sent;\n                      breakEarlyObject = {\n                        breakEarly: false,\n                        i: 0\n                      };\n                      console.log('Signed txns length', signedTxns.length, 'vs handed in length', instructionSet.length);\n                      _loop3 = /*#__PURE__*/_regeneratorRuntime.mark(function _loop3(_i) {\n                        var signedTxnPromise;\n                        return _regeneratorRuntime.wrap(function _loop3$(_context3) {\n                          while (1) {\n                            switch (_context3.prev = _context3.next) {\n                              case 0:\n                                signedTxnPromise = sendSignedTransaction({\n                                  connection: connection,\n                                  signedTransaction: signedTxns[_i],\n                                  timeout: timeout\n                                });\n                                signedTxnPromise.catch(function () {\n                                  // @ts-ignore\n                                  if (sequenceType === SequenceType.StopOnFailure) {\n                                    breakEarlyObject.breakEarly = true;\n                                    breakEarlyObject.i = _i;\n                                  }\n                                });\n                                _context3.prev = 2;\n                                _context3.next = 5;\n                                return signedTxnPromise;\n\n                              case 5:\n                                _context3.next = 13;\n                                break;\n\n                              case 7:\n                                _context3.prev = 7;\n                                _context3.t0 = _context3[\"catch\"](2);\n                                console.log('Caught failure', _context3.t0);\n\n                                if (!breakEarlyObject.breakEarly) {\n                                  _context3.next = 13;\n                                  break;\n                                }\n\n                                console.log('Died on ', breakEarlyObject.i);\n                                return _context3.abrupt(\"return\", {\n                                  v: {\n                                    v: breakEarlyObject.i\n                                  }\n                                });\n\n                              case 13:\n                              case \"end\":\n                                return _context3.stop();\n                            }\n                          }\n                        }, _loop3, null, [[2, 7]]);\n                      });\n                      _i = 0;\n\n                    case 18:\n                      if (!(_i < signedTxns.length)) {\n                        _context4.next = 26;\n                        break;\n                      }\n\n                      return _context4.delegateYield(_loop3(_i), \"t1\", 20);\n\n                    case 20:\n                      _ret3 = _context4.t1;\n\n                      if (!(typeof _ret3 === \"object\")) {\n                        _context4.next = 23;\n                        break;\n                      }\n\n                      return _context4.abrupt(\"return\", _ret3.v);\n\n                    case 23:\n                      _i++;\n                      _context4.next = 18;\n                      break;\n\n                    case 26:\n                    case \"end\":\n                      return _context4.stop();\n                  }\n                }\n              }, _loop);\n            });\n            c = 0;\n\n          case 12:\n            if (!(c < instructionsChunk.length)) {\n              _context5.next = 20;\n              break;\n            }\n\n            return _context5.delegateYield(_loop(c), \"t0\", 14);\n\n          case 14:\n            _ret = _context5.t0;\n\n            if (!(typeof _ret === \"object\")) {\n              _context5.next = 17;\n              break;\n            }\n\n            return _context5.abrupt(\"return\", _ret.v);\n\n          case 17:\n            c++;\n            _context5.next = 12;\n            break;\n\n          case 20:\n            return _context5.abrupt(\"return\", instructionSet.length);\n\n          case 21:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function sendTransactionsInChunks(_x7, _x8, _x9, _x10) {\n    return _ref12.apply(this, arguments);\n  };\n}();\n\nexports.sendTransactionsInChunks = sendTransactionsInChunks;\n\nvar sendTransactions = /*#__PURE__*/function () {\n  var _ref13 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(connection, wallet, instructionSet, signersSet) {\n    var sequenceType,\n        commitment,\n        successCallback,\n        failCallback,\n        block,\n        unsignedTxns,\n        _loop4,\n        i,\n        _ret4,\n        signedTxns,\n        pendingTxns,\n        breakEarlyObject,\n        _loop5,\n        _i2,\n        _ret5,\n        _args7 = arguments;\n\n    return _regeneratorRuntime.wrap(function _callee3$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            sequenceType = _args7.length > 4 && _args7[4] !== undefined ? _args7[4] : SequenceType.Parallel;\n            commitment = _args7.length > 5 && _args7[5] !== undefined ? _args7[5] : 'singleGossip';\n            successCallback = _args7.length > 6 && _args7[6] !== undefined ? _args7[6] : function () {};\n            failCallback = _args7.length > 7 && _args7[7] !== undefined ? _args7[7] : function () {\n              return false;\n            };\n            block = _args7.length > 8 ? _args7[8] : undefined;\n\n            if (wallet.publicKey) {\n              _context7.next = 7;\n              break;\n            }\n\n            throw new wallet_adapter_base_1.WalletNotConnectedError();\n\n          case 7:\n            unsignedTxns = [];\n\n            if (block) {\n              _context7.next = 12;\n              break;\n            }\n\n            _context7.next = 11;\n            return connection.getRecentBlockhash(commitment);\n\n          case 11:\n            block = _context7.sent;\n\n          case 12:\n            _loop4 = function _loop4(i) {\n              var instructions = instructionSet[i];\n              var signers = signersSet[i];\n\n              if (instructions.length === 0) {\n                return \"continue\";\n              }\n\n              var transaction = new web3_js_1.Transaction();\n              instructions.forEach(function (instruction) {\n                return transaction.add(instruction);\n              });\n              transaction.recentBlockhash = block.blockhash;\n              transaction.setSigners.apply(transaction, [// fee payed by the wallet owner\n              wallet.publicKey].concat(_toConsumableArray(signers.map(function (s) {\n                return s.publicKey;\n              }))));\n\n              if (signers.length > 0) {\n                transaction.partialSign.apply(transaction, _toConsumableArray(signers));\n              }\n\n              unsignedTxns.push(transaction);\n            };\n\n            i = 0;\n\n          case 14:\n            if (!(i < instructionSet.length)) {\n              _context7.next = 21;\n              break;\n            }\n\n            _ret4 = _loop4(i);\n\n            if (!(_ret4 === \"continue\")) {\n              _context7.next = 18;\n              break;\n            }\n\n            return _context7.abrupt(\"continue\", 18);\n\n          case 18:\n            i++;\n            _context7.next = 14;\n            break;\n\n          case 21:\n            _context7.next = 23;\n            return wallet.signAllTransactions(unsignedTxns);\n\n          case 23:\n            signedTxns = _context7.sent;\n            pendingTxns = [];\n            breakEarlyObject = {\n              breakEarly: false,\n              i: 0\n            };\n            console.log('Signed txns length', signedTxns.length, 'vs handed in length', instructionSet.length);\n            _loop5 = /*#__PURE__*/_regeneratorRuntime.mark(function _loop5(_i2) {\n              var signedTxnPromise;\n              return _regeneratorRuntime.wrap(function _loop5$(_context6) {\n                while (1) {\n                  switch (_context6.prev = _context6.next) {\n                    case 0:\n                      signedTxnPromise = sendSignedTransaction({\n                        connection: connection,\n                        signedTransaction: signedTxns[_i2]\n                      });\n                      signedTxnPromise.then(function (_ref14) {\n                        var txid = _ref14.txid;\n                        successCallback(txid, _i2);\n                      }).catch(function () {\n                        // @ts-ignore\n                        failCallback(signedTxns[_i2], _i2);\n\n                        if (sequenceType === SequenceType.StopOnFailure) {\n                          breakEarlyObject.breakEarly = true;\n                          breakEarlyObject.i = _i2;\n                        }\n                      });\n\n                      if (!(sequenceType !== SequenceType.Parallel)) {\n                        _context6.next = 16;\n                        break;\n                      }\n\n                      _context6.prev = 3;\n                      _context6.next = 6;\n                      return signedTxnPromise;\n\n                    case 6:\n                      _context6.next = 14;\n                      break;\n\n                    case 8:\n                      _context6.prev = 8;\n                      _context6.t0 = _context6[\"catch\"](3);\n                      console.log('Caught failure', _context6.t0);\n\n                      if (!breakEarlyObject.breakEarly) {\n                        _context6.next = 14;\n                        break;\n                      }\n\n                      console.log('Died on ', breakEarlyObject.i);\n                      return _context6.abrupt(\"return\", {\n                        v: breakEarlyObject.i\n                      });\n\n                    case 14:\n                      _context6.next = 17;\n                      break;\n\n                    case 16:\n                      pendingTxns.push(signedTxnPromise);\n\n                    case 17:\n                    case \"end\":\n                      return _context6.stop();\n                  }\n                }\n              }, _loop5, null, [[3, 8]]);\n            });\n            _i2 = 0;\n\n          case 29:\n            if (!(_i2 < signedTxns.length)) {\n              _context7.next = 37;\n              break;\n            }\n\n            return _context7.delegateYield(_loop5(_i2), \"t0\", 31);\n\n          case 31:\n            _ret5 = _context7.t0;\n\n            if (!(typeof _ret5 === \"object\")) {\n              _context7.next = 34;\n              break;\n            }\n\n            return _context7.abrupt(\"return\", _ret5.v);\n\n          case 34:\n            _i2++;\n            _context7.next = 29;\n            break;\n\n          case 37:\n            if (!(sequenceType !== SequenceType.Parallel)) {\n              _context7.next = 40;\n              break;\n            }\n\n            _context7.next = 40;\n            return Promise.all(pendingTxns);\n\n          case 40:\n            return _context7.abrupt(\"return\", signedTxns.length);\n\n          case 41:\n          case \"end\":\n            return _context7.stop();\n        }\n      }\n    }, _callee3);\n  }));\n\n  return function sendTransactions(_x11, _x12, _x13, _x14) {\n    return _ref13.apply(this, arguments);\n  };\n}();\n\nexports.sendTransactions = sendTransactions;\n\nvar sendTransactionsWithRecentBlock = /*#__PURE__*/function () {\n  var _ref15 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(connection, wallet, instructionSet, signersSet) {\n    var commitment,\n        unsignedTxns,\n        _loop6,\n        i,\n        _ret6,\n        signedTxns,\n        breakEarlyObject,\n        _loop7,\n        _i3,\n        _ret7,\n        _args10 = arguments;\n\n    return _regeneratorRuntime.wrap(function _callee4$(_context10) {\n      while (1) {\n        switch (_context10.prev = _context10.next) {\n          case 0:\n            commitment = _args10.length > 4 && _args10[4] !== undefined ? _args10[4] : 'singleGossip';\n\n            if (wallet.publicKey) {\n              _context10.next = 3;\n              break;\n            }\n\n            throw new wallet_adapter_base_1.WalletNotConnectedError();\n\n          case 3:\n            unsignedTxns = [];\n            _loop6 = /*#__PURE__*/_regeneratorRuntime.mark(function _loop6(i) {\n              var instructions, signers, block, transaction;\n              return _regeneratorRuntime.wrap(function _loop6$(_context8) {\n                while (1) {\n                  switch (_context8.prev = _context8.next) {\n                    case 0:\n                      instructions = instructionSet[i];\n                      signers = signersSet[i];\n\n                      if (!(instructions.length === 0)) {\n                        _context8.next = 4;\n                        break;\n                      }\n\n                      return _context8.abrupt(\"return\", \"continue\");\n\n                    case 4:\n                      _context8.next = 6;\n                      return connection.getRecentBlockhash(commitment);\n\n                    case 6:\n                      block = _context8.sent;\n                      _context8.next = 9;\n                      return (0, utils_2.sleep)(1200);\n\n                    case 9:\n                      transaction = new web3_js_1.Transaction();\n                      instructions.forEach(function (instruction) {\n                        return transaction.add(instruction);\n                      });\n                      transaction.recentBlockhash = block.blockhash;\n                      transaction.setSigners.apply(transaction, [// fee payed by the wallet owner\n                      wallet.publicKey].concat(_toConsumableArray(signers.map(function (s) {\n                        return s.publicKey;\n                      }))));\n\n                      if (signers.length > 0) {\n                        transaction.partialSign.apply(transaction, _toConsumableArray(signers));\n                      }\n\n                      unsignedTxns.push(transaction);\n\n                    case 15:\n                    case \"end\":\n                      return _context8.stop();\n                  }\n                }\n              }, _loop6);\n            });\n            i = 0;\n\n          case 6:\n            if (!(i < instructionSet.length)) {\n              _context10.next = 14;\n              break;\n            }\n\n            return _context10.delegateYield(_loop6(i), \"t0\", 8);\n\n          case 8:\n            _ret6 = _context10.t0;\n\n            if (!(_ret6 === \"continue\")) {\n              _context10.next = 11;\n              break;\n            }\n\n            return _context10.abrupt(\"continue\", 11);\n\n          case 11:\n            i++;\n            _context10.next = 6;\n            break;\n\n          case 14:\n            _context10.next = 16;\n            return wallet.signAllTransactions(unsignedTxns);\n\n          case 16:\n            signedTxns = _context10.sent;\n            breakEarlyObject = {\n              breakEarly: false,\n              i: 0\n            };\n            console.log('Signed txns length', signedTxns.length, 'vs handed in length', instructionSet.length);\n            _loop7 = /*#__PURE__*/_regeneratorRuntime.mark(function _loop7(_i3) {\n              var signedTxnPromise;\n              return _regeneratorRuntime.wrap(function _loop7$(_context9) {\n                while (1) {\n                  switch (_context9.prev = _context9.next) {\n                    case 0:\n                      signedTxnPromise = sendSignedTransaction({\n                        connection: connection,\n                        signedTransaction: signedTxns[_i3]\n                      });\n                      signedTxnPromise.catch(function () {\n                        breakEarlyObject.breakEarly = true;\n                        breakEarlyObject.i = _i3;\n                      });\n                      _context9.prev = 2;\n                      _context9.next = 5;\n                      return signedTxnPromise;\n\n                    case 5:\n                      _context9.next = 13;\n                      break;\n\n                    case 7:\n                      _context9.prev = 7;\n                      _context9.t0 = _context9[\"catch\"](2);\n                      console.log('Caught failure', _context9.t0);\n\n                      if (!breakEarlyObject.breakEarly) {\n                        _context9.next = 13;\n                        break;\n                      }\n\n                      console.log('Died on ', breakEarlyObject.i);\n                      return _context9.abrupt(\"return\", {\n                        v: breakEarlyObject.i\n                      });\n\n                    case 13:\n                    case \"end\":\n                      return _context9.stop();\n                  }\n                }\n              }, _loop7, null, [[2, 7]]);\n            });\n            _i3 = 0;\n\n          case 21:\n            if (!(_i3 < signedTxns.length)) {\n              _context10.next = 29;\n              break;\n            }\n\n            return _context10.delegateYield(_loop7(_i3), \"t1\", 23);\n\n          case 23:\n            _ret7 = _context10.t1;\n\n            if (!(typeof _ret7 === \"object\")) {\n              _context10.next = 26;\n              break;\n            }\n\n            return _context10.abrupt(\"return\", _ret7.v);\n\n          case 26:\n            _i3++;\n            _context10.next = 21;\n            break;\n\n          case 29:\n            return _context10.abrupt(\"return\", signedTxns.length);\n\n          case 30:\n          case \"end\":\n            return _context10.stop();\n        }\n      }\n    }, _callee4);\n  }));\n\n  return function sendTransactionsWithRecentBlock(_x15, _x16, _x17, _x18) {\n    return _ref15.apply(this, arguments);\n  };\n}();\n\nexports.sendTransactionsWithRecentBlock = sendTransactionsWithRecentBlock;\n\nvar sendTransaction = /*#__PURE__*/function () {\n  var _ref16 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(connection, wallet, instructions, signers) {\n    var awaitConfirmation,\n        commitment,\n        includesFeePayer,\n        block,\n        transaction,\n        _transaction,\n        _transaction2,\n        _transaction3,\n        rawTransaction,\n        options,\n        txid,\n        slot,\n        confirmation,\n        errors,\n        _args11 = arguments;\n\n    return _regeneratorRuntime.wrap(function _callee5$(_context11) {\n      while (1) {\n        switch (_context11.prev = _context11.next) {\n          case 0:\n            awaitConfirmation = _args11.length > 4 && _args11[4] !== undefined ? _args11[4] : true;\n            commitment = _args11.length > 5 && _args11[5] !== undefined ? _args11[5] : 'singleGossip';\n            includesFeePayer = _args11.length > 6 && _args11[6] !== undefined ? _args11[6] : false;\n            block = _args11.length > 7 ? _args11[7] : undefined;\n\n            if (wallet.publicKey) {\n              _context11.next = 6;\n              break;\n            }\n\n            throw new wallet_adapter_base_1.WalletNotConnectedError();\n\n          case 6:\n            transaction = new web3_js_1.Transaction();\n            instructions.forEach(function (instruction) {\n              return transaction.add(instruction);\n            });\n            _context11.t0 = block;\n\n            if (_context11.t0) {\n              _context11.next = 13;\n              break;\n            }\n\n            _context11.next = 12;\n            return connection.getRecentBlockhash(commitment);\n\n          case 12:\n            _context11.t0 = _context11.sent;\n\n          case 13:\n            transaction.recentBlockhash = _context11.t0.blockhash;\n\n            if (includesFeePayer) {\n              (_transaction = transaction).setSigners.apply(_transaction, _toConsumableArray(signers.map(function (s) {\n                return s.publicKey;\n              })));\n            } else {\n              (_transaction2 = transaction).setSigners.apply(_transaction2, [// fee payed by the wallet owner\n              wallet.publicKey].concat(_toConsumableArray(signers.map(function (s) {\n                return s.publicKey;\n              }))));\n            }\n\n            if (signers.length > 0) {\n              (_transaction3 = transaction).partialSign.apply(_transaction3, _toConsumableArray(signers));\n            }\n\n            if (includesFeePayer) {\n              _context11.next = 20;\n              break;\n            }\n\n            _context11.next = 19;\n            return wallet.signTransaction(transaction);\n\n          case 19:\n            transaction = _context11.sent;\n\n          case 20:\n            rawTransaction = transaction.serialize();\n            options = {\n              skipPreflight: true,\n              commitment: commitment\n            };\n            _context11.next = 24;\n            return connection.sendRawTransaction(rawTransaction, options);\n\n          case 24:\n            txid = _context11.sent;\n            slot = 0;\n\n            if (!awaitConfirmation) {\n              _context11.next = 39;\n              break;\n            }\n\n            _context11.next = 29;\n            return awaitTransactionSignatureConfirmation(txid, DEFAULT_TIMEOUT, connection, commitment);\n\n          case 29:\n            confirmation = _context11.sent;\n\n            if (confirmation) {\n              _context11.next = 32;\n              break;\n            }\n\n            throw new Error('Timed out awaiting confirmation on transaction');\n\n          case 32:\n            slot = (confirmation === null || confirmation === void 0 ? void 0 : confirmation.slot) || 0;\n\n            if (!(confirmation === null || confirmation === void 0 ? void 0 : confirmation.err)) {\n              _context11.next = 39;\n              break;\n            }\n\n            _context11.next = 36;\n            return (0, exports.getErrorForTransaction)(connection, txid);\n\n          case 36:\n            errors = _context11.sent;\n            (0, notifications_1.notify)({\n              message: 'Transaction failed...',\n              description: react_1.default.createElement(react_1.default.Fragment, null, errors.map(function (err, ii) {\n                return react_1.default.createElement(\"div\", {\n                  key: ii\n                }, err);\n              }), react_1.default.createElement(ExplorerLink_1.ExplorerLink, {\n                address: txid,\n                type: \"transaction\"\n              })),\n              type: 'error'\n            });\n            throw new Error(\"Raw transaction \".concat(txid, \" failed (\").concat(JSON.stringify(status), \")\"));\n\n          case 39:\n            return _context11.abrupt(\"return\", {\n              txid: txid,\n              slot: slot\n            });\n\n          case 40:\n          case \"end\":\n            return _context11.stop();\n        }\n      }\n    }, _callee5);\n  }));\n\n  return function sendTransaction(_x19, _x20, _x21, _x22) {\n    return _ref16.apply(this, arguments);\n  };\n}();\n\nexports.sendTransaction = sendTransaction;\n\nvar sendTransactionWithRetry = /*#__PURE__*/function () {\n  var _ref17 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(connection, wallet, instructions, signers) {\n    var commitment,\n        includesFeePayer,\n        block,\n        beforeSend,\n        transaction,\n        _transaction4,\n        _transaction5,\n        _transaction6,\n        _yield$sendSignedTran,\n        txid,\n        slot,\n        _args12 = arguments;\n\n    return _regeneratorRuntime.wrap(function _callee6$(_context12) {\n      while (1) {\n        switch (_context12.prev = _context12.next) {\n          case 0:\n            commitment = _args12.length > 4 && _args12[4] !== undefined ? _args12[4] : 'singleGossip';\n            includesFeePayer = _args12.length > 5 && _args12[5] !== undefined ? _args12[5] : false;\n            block = _args12.length > 6 ? _args12[6] : undefined;\n            beforeSend = _args12.length > 7 ? _args12[7] : undefined;\n\n            if (wallet.publicKey) {\n              _context12.next = 6;\n              break;\n            }\n\n            throw new wallet_adapter_base_1.WalletNotConnectedError();\n\n          case 6:\n            transaction = new web3_js_1.Transaction();\n            instructions.forEach(function (instruction) {\n              return transaction.add(instruction);\n            });\n            _context12.t0 = block;\n\n            if (_context12.t0) {\n              _context12.next = 13;\n              break;\n            }\n\n            _context12.next = 12;\n            return connection.getRecentBlockhash(commitment);\n\n          case 12:\n            _context12.t0 = _context12.sent;\n\n          case 13:\n            transaction.recentBlockhash = _context12.t0.blockhash;\n\n            if (includesFeePayer) {\n              (_transaction4 = transaction).setSigners.apply(_transaction4, _toConsumableArray(signers.map(function (s) {\n                return s.publicKey;\n              })));\n            } else {\n              (_transaction5 = transaction).setSigners.apply(_transaction5, [// fee payed by the wallet owner\n              wallet.publicKey].concat(_toConsumableArray(signers.map(function (s) {\n                return s.publicKey;\n              }))));\n            }\n\n            if (signers.length > 0) {\n              (_transaction6 = transaction).partialSign.apply(_transaction6, _toConsumableArray(signers));\n            }\n\n            if (includesFeePayer) {\n              _context12.next = 20;\n              break;\n            }\n\n            _context12.next = 19;\n            return wallet.signTransaction(transaction);\n\n          case 19:\n            transaction = _context12.sent;\n\n          case 20:\n            if (beforeSend) {\n              beforeSend();\n            }\n\n            _context12.next = 23;\n            return sendSignedTransaction({\n              connection: connection,\n              signedTransaction: transaction\n            });\n\n          case 23:\n            _yield$sendSignedTran = _context12.sent;\n            txid = _yield$sendSignedTran.txid;\n            slot = _yield$sendSignedTran.slot;\n            return _context12.abrupt(\"return\", {\n              txid: txid,\n              slot: slot\n            });\n\n          case 27:\n          case \"end\":\n            return _context12.stop();\n        }\n      }\n    }, _callee6);\n  }));\n\n  return function sendTransactionWithRetry(_x23, _x24, _x25, _x26) {\n    return _ref17.apply(this, arguments);\n  };\n}();\n\nexports.sendTransactionWithRetry = sendTransactionWithRetry;\n\nvar getUnixTs = function getUnixTs() {\n  return new Date().getTime() / 1000;\n};\n\nexports.getUnixTs = getUnixTs;\nvar DEFAULT_TIMEOUT = 15000;\n\nfunction sendSignedTransaction(_x27) {\n  return _sendSignedTransaction.apply(this, arguments);\n}\n\nfunction _sendSignedTransaction() {\n  _sendSignedTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(_ref18) {\n    var signedTransaction, connection, _ref18$timeout, timeout, rawTransaction, startTime, slot, txid, done, confirmation, simulateResult, i, line;\n\n    return _regeneratorRuntime.wrap(function _callee9$(_context15) {\n      while (1) {\n        switch (_context15.prev = _context15.next) {\n          case 0:\n            signedTransaction = _ref18.signedTransaction, connection = _ref18.connection, _ref18$timeout = _ref18.timeout, timeout = _ref18$timeout === void 0 ? DEFAULT_TIMEOUT : _ref18$timeout;\n            rawTransaction = signedTransaction.serialize();\n            startTime = (0, exports.getUnixTs)();\n            slot = 0;\n            _context15.next = 6;\n            return connection.sendRawTransaction(rawTransaction, {\n              skipPreflight: true\n            });\n\n          case 6:\n            txid = _context15.sent;\n            console.log('Started awaiting confirmation for', txid);\n            done = false;\n\n            _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8() {\n              return _regeneratorRuntime.wrap(function _callee8$(_context14) {\n                while (1) {\n                  switch (_context14.prev = _context14.next) {\n                    case 0:\n                      if (!(!done && (0, exports.getUnixTs)() - startTime < timeout)) {\n                        _context14.next = 6;\n                        break;\n                      }\n\n                      connection.sendRawTransaction(rawTransaction, {\n                        skipPreflight: true\n                      });\n                      _context14.next = 4;\n                      return (0, utils_2.sleep)(500);\n\n                    case 4:\n                      _context14.next = 0;\n                      break;\n\n                    case 6:\n                    case \"end\":\n                      return _context14.stop();\n                  }\n                }\n              }, _callee8);\n            }))();\n\n            _context15.prev = 10;\n            _context15.next = 13;\n            return awaitTransactionSignatureConfirmation(txid, timeout, connection, 'recent', true);\n\n          case 13:\n            confirmation = _context15.sent;\n\n            if (confirmation) {\n              _context15.next = 16;\n              break;\n            }\n\n            throw new Error('Timed out awaiting confirmation on transaction');\n\n          case 16:\n            if (!confirmation.err) {\n              _context15.next = 19;\n              break;\n            }\n\n            console.error(confirmation.err);\n            throw new Error('Transaction failed: Custom instruction error');\n\n          case 19:\n            slot = (confirmation === null || confirmation === void 0 ? void 0 : confirmation.slot) || 0;\n            _context15.next = 47;\n            break;\n\n          case 22:\n            _context15.prev = 22;\n            _context15.t0 = _context15[\"catch\"](10);\n            console.error('Timeout Error caught', _context15.t0);\n\n            if (!_context15.t0.timeout) {\n              _context15.next = 27;\n              break;\n            }\n\n            throw new Error('Timed out awaiting confirmation on transaction');\n\n          case 27:\n            simulateResult = null;\n            _context15.prev = 28;\n            _context15.next = 31;\n            return simulateTransaction(connection, signedTransaction, 'single');\n\n          case 31:\n            simulateResult = _context15.sent.value;\n            _context15.next = 36;\n            break;\n\n          case 34:\n            _context15.prev = 34;\n            _context15.t1 = _context15[\"catch\"](28);\n\n          case 36:\n            if (!(simulateResult && simulateResult.err)) {\n              _context15.next = 47;\n              break;\n            }\n\n            if (!simulateResult.logs) {\n              _context15.next = 46;\n              break;\n            }\n\n            i = simulateResult.logs.length - 1;\n\n          case 39:\n            if (!(i >= 0)) {\n              _context15.next = 46;\n              break;\n            }\n\n            line = simulateResult.logs[i];\n\n            if (!line.startsWith('Program log: ')) {\n              _context15.next = 43;\n              break;\n            }\n\n            throw new Error('Transaction failed: ' + line.slice('Program log: '.length));\n\n          case 43:\n            --i;\n            _context15.next = 39;\n            break;\n\n          case 46:\n            throw new Error(JSON.stringify(simulateResult.err));\n\n          case 47:\n            _context15.prev = 47;\n            done = true;\n            return _context15.finish(47);\n\n          case 50:\n            console.log('Latency', txid, (0, exports.getUnixTs)() - startTime);\n            return _context15.abrupt(\"return\", {\n              txid: txid,\n              slot: slot\n            });\n\n          case 52:\n          case \"end\":\n            return _context15.stop();\n        }\n      }\n    }, _callee9, null, [[10, 22, 47, 50], [28, 34]]);\n  }));\n  return _sendSignedTransaction.apply(this, arguments);\n}\n\nexports.sendSignedTransaction = sendSignedTransaction;\n\nfunction simulateTransaction(_x28, _x29, _x30) {\n  return _simulateTransaction.apply(this, arguments);\n}\n\nfunction _simulateTransaction() {\n  _simulateTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(connection, transaction, commitment) {\n    var signData, wireTransaction, encodedTransaction, config, args, res;\n    return _regeneratorRuntime.wrap(function _callee10$(_context16) {\n      while (1) {\n        switch (_context16.prev = _context16.next) {\n          case 0:\n            _context16.next = 2;\n            return connection._recentBlockhash( // @ts-ignore\n            connection._disableBlockhashCaching);\n\n          case 2:\n            transaction.recentBlockhash = _context16.sent;\n            signData = transaction.serializeMessage(); // @ts-ignore\n\n            wireTransaction = transaction._serialize(signData);\n            encodedTransaction = wireTransaction.toString('base64');\n            config = {\n              encoding: 'base64',\n              commitment: commitment\n            };\n            args = [encodedTransaction, config]; // @ts-ignore\n\n            _context16.next = 10;\n            return connection._rpcRequest('simulateTransaction', args);\n\n          case 10:\n            res = _context16.sent;\n\n            if (!res.error) {\n              _context16.next = 13;\n              break;\n            }\n\n            throw new Error('failed to simulate transaction: ' + res.error.message);\n\n          case 13:\n            return _context16.abrupt(\"return\", res.result);\n\n          case 14:\n          case \"end\":\n            return _context16.stop();\n        }\n      }\n    }, _callee10);\n  }));\n  return _simulateTransaction.apply(this, arguments);\n}\n\nfunction awaitTransactionSignatureConfirmation(_x31, _x32, _x33) {\n  return _awaitTransactionSignatureConfirmation.apply(this, arguments);\n}\n\nfunction _awaitTransactionSignatureConfirmation() {\n  _awaitTransactionSignatureConfirmation = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12(txid, timeout, connection) {\n    var commitment,\n        queryStatus,\n        done,\n        status,\n        subId,\n        _args18 = arguments;\n    return _regeneratorRuntime.wrap(function _callee12$(_context18) {\n      while (1) {\n        switch (_context18.prev = _context18.next) {\n          case 0:\n            commitment = _args18.length > 3 && _args18[3] !== undefined ? _args18[3] : 'recent';\n            queryStatus = _args18.length > 4 && _args18[4] !== undefined ? _args18[4] : false;\n            done = false;\n            status = {\n              slot: 0,\n              confirmations: 0,\n              err: null\n            };\n            subId = 0;\n            _context18.next = 7;\n            return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11() {\n              var signatureStatuses, nextStatus;\n              return _regeneratorRuntime.wrap(function _callee11$(_context17) {\n                while (1) {\n                  switch (_context17.prev = _context17.next) {\n                    case 0:\n                      setTimeout(function () {\n                        if (done) {\n                          return;\n                        }\n\n                        done = true;\n                        console.log('Rejecting for timeout...');\n                        throw {\n                          timeout: true\n                        };\n                      }, timeout);\n                      _context17.prev = 1;\n                      _context17.next = 4;\n                      return new Promise(function (resolve, reject) {\n                        subId = connection.onSignature(txid, function (result, context) {\n                          done = true;\n                          var nextStatus = {\n                            err: result.err,\n                            slot: context.slot,\n                            confirmations: 0\n                          };\n\n                          if (result.err) {\n                            console.log('Rejected via websocket', result.err);\n                            reject(nextStatus);\n                          } else {\n                            console.log('Resolved via websocket', result);\n                            resolve(nextStatus);\n                          }\n                        }, commitment);\n                      });\n\n                    case 4:\n                      return _context17.abrupt(\"return\", _context17.sent);\n\n                    case 7:\n                      _context17.prev = 7;\n                      _context17.t0 = _context17[\"catch\"](1);\n                      done = true;\n                      console.error('WS error in setup', txid, _context17.t0);\n\n                    case 11:\n                      if (!(!done && queryStatus)) {\n                        _context17.next = 44;\n                        break;\n                      }\n\n                      _context17.prev = 12;\n                      _context17.next = 15;\n                      return connection.getSignatureStatuses([txid]);\n\n                    case 15:\n                      signatureStatuses = _context17.sent;\n                      nextStatus = signatureStatuses && signatureStatuses.value[0];\n\n                      if (done) {\n                        _context17.next = 35;\n                        break;\n                      }\n\n                      if (nextStatus) {\n                        _context17.next = 22;\n                        break;\n                      }\n\n                      console.log('REST null result for', txid, nextStatus);\n                      _context17.next = 35;\n                      break;\n\n                    case 22:\n                      if (!nextStatus.err) {\n                        _context17.next = 28;\n                        break;\n                      }\n\n                      console.log('REST error for', txid, nextStatus);\n                      done = true;\n                      throw nextStatus.err;\n\n                    case 28:\n                      if (nextStatus.confirmations) {\n                        _context17.next = 32;\n                        break;\n                      }\n\n                      console.log('REST no confirmations for', txid, nextStatus);\n                      _context17.next = 35;\n                      break;\n\n                    case 32:\n                      console.log('REST confirmation for', txid, nextStatus);\n                      done = true;\n                      return _context17.abrupt(\"return\", nextStatus);\n\n                    case 35:\n                      _context17.next = 40;\n                      break;\n\n                    case 37:\n                      _context17.prev = 37;\n                      _context17.t1 = _context17[\"catch\"](12);\n\n                      if (!done) {\n                        console.log('REST connection error: txid', txid, _context17.t1);\n                      }\n\n                    case 40:\n                      _context17.next = 42;\n                      return (0, utils_2.sleep)(2000);\n\n                    case 42:\n                      _context17.next = 11;\n                      break;\n\n                    case 44:\n                    case \"end\":\n                      return _context17.stop();\n                  }\n                }\n              }, _callee11, null, [[1, 7], [12, 37]]);\n            }))();\n\n          case 7:\n            status = _context18.sent;\n            //@ts-ignore\n            if (connection._signatureSubscriptions[subId]) connection.removeSignatureListener(subId);\n            done = true;\n            console.log('Returning status', status);\n            return _context18.abrupt(\"return\", status);\n\n          case 12:\n          case \"end\":\n            return _context18.stop();\n        }\n      }\n    }, _callee12);\n  }));\n  return _awaitTransactionSignatureConfirmation.apply(this, arguments);\n}","map":{"version":3,"sources":["../../../src/contexts/connection.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAA,OAAA,GAAA,YAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AACA,IAAA,OAAA,GAAA,OAAA,CAAA,UAAA,CAAA;;AACA,IAAA,oBAAA,GAAA,OAAA,CAAA,4BAAA,CAAA;;AACA,IAAA,qBAAA,GAAA,OAAA,CAAA,6BAAA,CAAA;;AACA,IAAA,SAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;;AAcA,IAAA,OAAA,GAAA,OAAA,CAAA,gBAAA,CAAA;;AACA,IAAA,eAAA,GAAA,OAAA,CAAA,wBAAA,CAAA;;AACA,IAAA,cAAA,GAAA,OAAA,CAAA,4BAAA,CAAA;;AACA,IAAA,OAAA,GAAA,OAAA,CAAA,UAAA,CAAA;;AAsBa,OAAA,CAAA,SAAA,GAA6B,CACxC;AACE,EAAA,IAAI,EAAE,cADR;AAEE,EAAA,KAAK,EAAE,cAFT;AAGE,EAAA,GAAG,EAAE,kCAHP;AAIE,EAAA,OAAO,EAAE,oBAAA,CAAA,GAAA,CAAQ;AAJnB,CADwC,EAOxC;AACE,EAAA,IAAI,EAAE,SADR;AAEE,EAAA,KAAK,EAAE,SAFT;AAGE,EAAA,GAAG,EAAE,CAAA,GAAA,SAAA,CAAA,aAAA,EAAc,SAAd,CAHP;AAIE,EAAA,OAAO,EAAE,oBAAA,CAAA,GAAA,CAAQ;AAJnB,CAPwC,EAaxC;AACE,EAAA,IAAI,EAAE,QADR;AAEE,EAAA,KAAK,EAAE,QAFT;AAGE,EAAA,GAAG,EAAE,CAAA,GAAA,SAAA,CAAA,aAAA,EAAc,QAAd,CAHP;AAIE,EAAA,OAAO,EAAE,oBAAA,CAAA,GAAA,CAAQ;AAJnB,CAbwC,CAA7B;AAqBb,IAAM,gBAAgB,GAAG,OAAA,CAAA,SAAA,CAAU,CAAV,CAAzB;AAQA,IAAM,iBAAiB,GAAG,OAAA,CAAA,OAAA,CAAM,aAAN,CAAsC;AAC9D,EAAA,UAAU,EAAE,IAAI,SAAA,CAAA,UAAJ,CAAe,gBAAgB,CAAC,GAAhC,EAAqC,QAArC,CADkD;AAE9D,EAAA,QAAQ,EAAE,gBAFoD;AAG9D,EAAA,MAAM,EAAE,IAAI,GAAJ;AAHsD,CAAtC,CAA1B;;AAMA,SAAgB,kBAAhB,OAAkE;AAAA,MAA7B,QAA6B,QAA7B,QAA6B;AAChE,MAAM,YAAY,GAAG,CAAA,GAAA,OAAA,CAAA,cAAA,GAArB;;AACA,cACE,CAAA,GAAA,OAAA,CAAA,oBAAA,EAAoC,SAApC,EAA+C,gBAAgB,CAAC,IAAhE,CADF;AAAA;AAAA,MAAO,cAAP;AAAA,MAAuB,iBAAvB;;AAEA,MAAM,YAAY,GAAG,YAAY,CAAC,GAAb,CAAiB,SAAjB,CAArB;AAEA,MAAI,aAAJ;;AACA,MAAI,YAAJ,EAAkB;AAChB,QAAM,aAAa,GAAG,OAAA,CAAA,SAAA,CAAU,IAAV,CAAe;AAAA,UAAG,IAAH,SAAG,IAAH;AAAA,aAAc,IAAI,KAAK,YAAvB;AAAA,KAAf,CAAtB;;AACA,QAAI,aAAJ,EAAmB;AACjB,MAAA,aAAa,GAAG,aAAhB;AACD;AACF;;AAED,MAAI,cAAc,IAAI,CAAC,aAAvB,EAAsC;AACpC,QAAM,eAAe,GAAG,OAAA,CAAA,SAAA,CAAU,IAAV,CACtB;AAAA,UAAG,IAAH,SAAG,IAAH;AAAA,aAAc,IAAI,KAAK,cAAvB;AAAA,KADsB,CAAxB;;AAGA,QAAI,eAAJ,EAAqB;AACnB,MAAA,aAAa,GAAG,eAAhB;AACD;AACF;;AAED,MAAM,QAAQ,GAAG,aAAa,IAAI,gBAAlC;;AAEA,cAAgC,CAAA,GAAA,OAAA,CAAA,MAAA,EAAO,IAAI,SAAA,CAAA,UAAJ,CAAe,QAAQ,CAAC,GAAxB,CAAP,CAAhC;AAAA,MAAiB,UAAjB,SAAQ,OAAR;;AAEA,cAA4B,CAAA,GAAA,OAAA,CAAA,QAAA,EAAiC,IAAI,GAAJ,EAAjC,CAA5B;AAAA;AAAA,MAAO,MAAP;AAAA,MAAe,SAAf;;AAEA,GAAA,GAAA,OAAA,CAAA,SAAA,EAAU,YAAK;AACb,aAAS,WAAT,GAAoB;AAClB,aAAO,CAAA,GAAA,OAAA,CAAA,4BAAA,IAA+B,IAA/B,CAAoC,UAAA,SAAS,EAAG;AACrD,YAAM,IAAI,GAAG,SAAS,CACnB,YADU,CACG,KADH,EAEV,eAFU,CAEM,QAAQ,CAAC,OAFf,EAGV,OAHU,EAAb;AAKA,YAAM,GAAG,GAAG,IAAI,GAAJ,CAAQ,IAAI,CAAC,GAAL,CAAS,UAAA,IAAI;AAAA,iBAAI,CAAC,IAAI,CAAC,OAAN,EAAe,IAAf,CAAJ;AAAA,SAAb,CAAR,CAAZ;AACA,QAAA,SAAS,CAAC,GAAD,CAAT;AACD,OARM,CAAP;AASD;;AAED,IAAA,WAAW;AACZ,GAdD,EAcG,EAdH;AAgBA,GAAA,GAAA,OAAA,CAAA,SAAA,EAAU,YAAK;AACb,aAAS,mCAAT,GAA4C;AAC1C,UAAI,cAAc,KAAK,QAAQ,CAAC,IAAhC,EAAsC;AACpC,QAAA,iBAAiB,CAAC,QAAQ,CAAC,IAAV,CAAjB;AACD;AACF;;AAED,IAAA,mCAAmC;AACpC,GARD,EAQG,EARH,EA7CgE,CAuDhE;AACA;AACA;AACA;;AACA,GAAA,GAAA,OAAA,CAAA,SAAA,EAAU,YAAK;AACb,QAAM,EAAE,GAAG,UAAU,CAAC,eAAX,CACT,SAAA,CAAA,OAAA,CAAQ,QAAR,GAAmB,SADV,EAET,YAAK,CAAG,CAFC,CAAX;AAIA,WAAO,YAAK;AACV,MAAA,UAAU,CAAC,2BAAX,CAAuC,EAAvC;AACD,KAFD;AAGD,GARD,EAQG,EARH;AAUA,GAAA,GAAA,OAAA,CAAA,SAAA,EAAU,YAAK;AACb,QAAM,EAAE,GAAG,UAAU,CAAC,YAAX,CAAwB;AAAA,aAAM,IAAN;AAAA,KAAxB,CAAX;AACA,WAAO,YAAK;AACV,MAAA,UAAU,CAAC,wBAAX,CAAoC,EAApC;AACD,KAFD;AAGD,GALD,EAKG,EALH;AAOA,MAAM,YAAY,GAAG,OAAA,CAAA,OAAA,CAAM,OAAN,CAAc,YAAK;AACtC,WAAO;AACL,MAAA,QAAQ,EAAR,QADK;AAEL,MAAA,UAAU,EAAV,UAFK;AAGL,MAAA,MAAM,EAAN;AAHK,KAAP;AAKD,GANoB,EAMlB,CAAC,MAAD,CANkB,CAArB;AAQA,SACE,OAAA,CAAA,OAAA,CAAA,aAAA,CAAC,iBAAiB,CAAC,QAAnB,EAA2B;AAAC,IAAA,KAAK,EAAE;AAAR,GAA3B,EACG,QADH,CADF;AAKD;;AAzFD,OAAA,CAAA,kBAAA,GAAA,kBAAA;;AA2FA,SAAgB,aAAhB,GAA6B;AAC3B,cAAuB,CAAA,GAAA,OAAA,CAAA,UAAA,EAAW,iBAAX,CAAvB;AAAA,MAAQ,UAAR,SAAQ,UAAR;;AACA,SAAO,UAAP;AACD;;AAHD,OAAA,CAAA,aAAA,GAAA,aAAA;;AAKA,SAAgB,mBAAhB,GAAmC;AACjC,eAA6B,CAAA,GAAA,OAAA,CAAA,UAAA,EAAW,iBAAX,CAA7B;AAAA,MAAQ,QAAR,UAAQ,QAAR;AAAA,MAAkB,MAAlB,UAAkB,MAAlB;;AACA,SAAO;AACL,IAAA,QAAQ,EAAR,QADK;AAEL,IAAA,MAAM,EAAN;AAFK,GAAP;AAID;;AAND,OAAA,CAAA,mBAAA,GAAA,mBAAA;;AAQO,IAAM,sBAAsB;AAAA,wEAAG,iBACpC,UADoC,EAEpC,IAFoC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAK9B,UAAU,CAAC,kBAAX,CAA8B,IAA9B,EAAoC,KAApC,CAL8B;;AAAA;AAAA;AAAA,mBAOnB,UAAU,CAAC,6BAAX,CAAyC,IAAzC,CAPmB;;AAAA;AAO9B,YAAA,EAP8B;AAS9B,YAAA,MAT8B,GASX,EATW;;AAUpC,gBAAI,CAAA,EAAE,KAAA,IAAF,IAAA,EAAE,KAAA,KAAA,CAAF,GAAE,KAAA,CAAF,GAAA,EAAE,CAAE,IAAJ,KAAY,EAAE,CAAC,IAAH,CAAQ,WAAxB,EAAqC;AACnC,cAAA,EAAE,CAAC,IAAH,CAAQ,WAAR,CAAoB,OAApB,CAA4B,UAAA,GAAG,EAAG;AAChC,oBAAM,KAAK,GAAG,eAAd;AACA,oBAAI,CAAJ;;AACA,uBAAO,CAAC,CAAC,GAAG,KAAK,CAAC,IAAN,CAAW,GAAX,CAAL,MAA0B,IAAjC,EAAuC;AACrC;AACA,sBAAI,CAAC,CAAC,KAAF,KAAY,KAAK,CAAC,SAAtB,EAAiC;AAC/B,oBAAA,KAAK,CAAC,SAAN;AACD;;AAED,sBAAI,CAAC,CAAC,MAAF,GAAW,CAAf,EAAkB;AAChB,oBAAA,MAAM,CAAC,IAAP,CAAY,CAAC,CAAC,CAAD,CAAb;AACD;AACF;AACF,eAbD;AAcD;;AAzBmC,6CA2B7B,MA3B6B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAtB,sBAAsB;AAAA;AAAA;AAAA,GAA5B;;AAAM,OAAA,CAAA,sBAAA,GAAsB,sBAAtB;AA8Bb,IAAY,YAAZ;;AAAA,CAAA,UAAY,YAAZ,EAAwB;AACtB,EAAA,YAAA,CAAA,YAAA,CAAA,YAAA,CAAA,GAAA,CAAA,CAAA,GAAA,YAAA;AACA,EAAA,YAAA,CAAA,YAAA,CAAA,UAAA,CAAA,GAAA,CAAA,CAAA,GAAA,UAAA;AACA,EAAA,YAAA,CAAA,YAAA,CAAA,eAAA,CAAA,GAAA,CAAA,CAAA,GAAA,eAAA;AACD,CAJD,EAAY,YAAY,GAAZ,OAAA,CAAA,YAAA,KAAA,OAAA,CAAA,YAAA,GAAY,EAAZ,CAAZ;;SAMsB,+B;;;;;8FAAf,kBACL,UADK,EAEL,MAFK,EAGL,YAHK,EAIL,OAJK;AAAA;AAAA;AAAA;AAAA;AAAA;AAMD,YAAA,SANC,GAMW,CANX;AAOD,YAAA,KAPC,GAOO,CAPP;AAQD,YAAA,sBARC,GAQwB,IARxB;AASC,YAAA,eATD,GAS4C,EAT5C;AAUL,YAAA,YAAY,GAAG,YAAY,CAAC,MAAb,CAAoB,UAAC,KAAD,EAAQ,CAAR,EAAa;AAC9C,kBAAI,KAAK,CAAC,MAAN,GAAe,CAAnB,EAAsB;AACpB,uBAAO,IAAP;AACD,eAFD,MAEO;AACL,gBAAA,eAAe,CAAC,CAAD,CAAf,GAAqB,IAArB;AACA,uBAAO,KAAP;AACD;AACF,aAPc,CAAf;AAQI,YAAA,eAlBC,GAkBiB,OAAO,CAAC,MAAR,CAAe,UAAC,CAAD,EAAI,CAAJ;AAAA,qBAAU,CAAC,eAAe,CAAC,CAAD,CAA1B;AAAA,aAAf,CAlBjB;;AAAA;AAAA,kBAoBE,SAAS,GAAG,YAAY,CAAC,MAAzB,IAAmC,KAAK,GAAG,CApB7C;AAAA;AAAA;AAAA;;AAqBH,YAAA,YAAY,GAAG,YAAY,CAAC,KAAb,CAAmB,SAAnB,EAA8B,YAAY,CAAC,MAA3C,CAAf;AACA,YAAA,eAAe,GAAG,eAAe,CAAC,KAAhB,CAAsB,SAAtB,EAAiC,eAAe,CAAC,MAAjD,CAAlB;AAEA,gBAAI,YAAY,CAAC,MAAb,KAAwB,sBAA5B,EAAoD,KAAK,GAAG,KAAK,GAAG,CAAhB,CAApD,KACK,KAAK,GAAG,CAAR;AAzBF;;AAAA,kBA4BG,YAAY,CAAC,MAAb,KAAwB,CA5B3B;AAAA;AAAA;AAAA;;AAAA;AAAA,mBA6BO,CAAA,GAAA,OAAA,CAAA,wBAAA,EACJ,UADI,EAEJ,MAFI,EAGJ,YAAY,CAAC,CAAD,CAHR,EAIJ,eAAe,CAAC,CAAD,CAJX,EAKJ,QALI,CA7BP;;AAAA;AAoCC,YAAA,SAAS,GAAG,CAAZ;AApCD;AAAA;;AAAA;AAAA;AAAA,mBAsCmB,CAAA,GAAA,OAAA,CAAA,gBAAA,EAChB,UADgB,EAEhB,MAFgB,EAGhB,YAHgB,EAIhB,eAJgB,EAKhB,YAAY,CAAC,aALG,EAMhB,QANgB,CAtCnB;;AAAA;AAsCC,YAAA,SAtCD;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAgDD,YAAA,OAAO,CAAC,KAAR;;AAhDC;AAkDH,YAAA,OAAO,CAAC,GAAR,CACE,UADF,EAEE,SAFF,EAGE,2BAHF,EAIE,YAAY,CAAC,SAAD,CAJd,EAKE,wBALF,EAME,YAAY,CAAC,MANf;AAQA,YAAA,sBAAsB,GAAG,YAAY,CAAC,MAAtC;AA1DG;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAAP,OAAA,CAAA,+BAAA,GAAA,+BAAA;;AA8DO,IAAM,wBAAwB;AAAA,wEAAG,kBACtC,UADsC,EAEtC,MAFsC,EAGtC,cAHsC,EAItC,UAJsC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAKtC,YAAA,YALsC,8DAKT,YAAY,CAAC,QALJ;AAMtC,YAAA,UANsC,8DAMb,cANa;AAOtC,YAAA,OAPsC,8DAOpB,MAPoB;AAQtC,YAAA,SARsC;;AAAA,gBAUjC,MAAM,CAAC,SAV0B;AAAA;AAAA;AAAA;;AAAA,kBAUT,IAAI,qBAAA,CAAA,uBAAJ,EAVS;;AAAA;AAWlC,YAAA,iBAXkC,GAWgB,CAAC,cAAD,CAXhB;AAYlC,YAAA,YAZkC,GAYJ,CAAC,UAAD,CAZI;AActC,YAAA,iBAAiB,GAAG,CAAA,GAAA,OAAA,CAAA,MAAA,EAAO,cAAP,EAAuB,SAAvB,CAApB;AACA,YAAA,YAAY,GAAG,CAAA,GAAA,OAAA,CAAA,MAAA,EAAO,UAAP,EAAmB,SAAnB,CAAf;AAfsC,yEAiB7B,CAjB6B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAkB9B,sBAAA,YAlB8B,GAkBA,EAlBA;AAAA,qFAoB3B,CApB2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAqB5B,gCAAA,YArB4B,GAqBb,iBAAiB,CAAC,CAAD,CAAjB,CAAqB,CAArB,CArBa;AAsB5B,gCAAA,OAtB4B,GAsBlB,YAAY,CAAC,CAAD,CAAZ,CAAgB,CAAhB,CAtBkB;;AAAA,sCAuB9B,YAAY,CAAC,MAAb,KAAwB,CAvBM;AAAA;AAAA;AAAA;;AAAA;;AAAA;AA0B5B,gCAAA,WA1B4B,GA0Bd,IAAI,SAAA,CAAA,WAAJ,EA1Bc;AAAA;AAAA,uCA2Bd,UAAU,CAAC,kBAAX,CAA8B,UAA9B,CA3Bc;;AAAA;AA2B5B,gCAAA,KA3B4B;AA6BlC,gCAAA,YAAY,CAAC,OAAb,CAAqB,UAAA,WAAW;AAAA,yCAAI,WAAW,CAAC,GAAZ,CAAgB,WAAhB,CAAJ;AAAA,iCAAhC;AACA,gCAAA,WAAW,CAAC,eAAZ,GAA8B,KAAK,CAAC,SAApC;AACA,gCAAA,WAAW,CAAC,UAAZ,OAAA,WAAW,GACT;AACA,gCAAA,MAAM,CAAC,SAFE,4BAGN,OAAO,CAAC,GAAR,CAAY,UAAA,CAAC;AAAA,yCAAI,CAAC,CAAC,SAAN;AAAA,iCAAb,CAHM,GAAX;;AAKA,oCAAI,OAAO,CAAC,MAAR,GAAiB,CAArB,EAAwB;AACtB,kCAAA,WAAW,CAAC,WAAZ,OAAA,WAAW,qBAAgB,OAAhB,EAAX;AACD;;AACD,gCAAA,YAAY,CAAC,IAAb,CAAkB,WAAlB;;AAvCkC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAoB3B,sBAAA,CApB2B,GAoBvB,CApBuB;;AAAA;AAAA,4BAoBpB,CAAC,GAAG,iBAAiB,CAAC,CAAD,CAAjB,CAAqB,MApBL;AAAA;AAAA;AAAA;;AAAA,4DAoB3B,CApB2B;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAoBa,sBAAA,CAAC,EApBd;AAAA;AAAA;;AAAA;AAAA;AAAA,6BA0CX,MAAM,CAAC,mBAAP,CAA2B,YAA3B,CA1CW;;AAAA;AA0C9B,sBAAA,UA1C8B;AA4C9B,sBAAA,gBA5C8B,GA4CX;AAAE,wBAAA,UAAU,EAAE,KAAd;AAAqB,wBAAA,CAAC,EAAE;AAAxB,uBA5CW;AA6CpC,sBAAA,OAAO,CAAC,GAAR,CACE,oBADF,EAEE,UAAU,CAAC,MAFb,EAGE,qBAHF,EAIE,cAAc,CAAC,MAJjB;AA7CoC,qFAmD3B,EAnD2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAoD5B,gCAAA,gBApD4B,GAoDT,qBAAqB,CAAC;AAC7C,kCAAA,UAAU,EAAV,UAD6C;AAE7C,kCAAA,iBAAiB,EAAE,UAAU,CAAC,EAAD,CAFgB;AAG7C,kCAAA,OAAO,EAAP;AAH6C,iCAAD,CApDZ;AAyDlC,gCAAA,gBAAgB,CAAC,KAAjB,CAAuB,YAAK;AAC1B;AACA,sCAAI,YAAY,KAAK,YAAY,CAAC,aAAlC,EAAiD;AAC/C,oCAAA,gBAAgB,CAAC,UAAjB,GAA8B,IAA9B;AACA,oCAAA,gBAAgB,CAAC,CAAjB,GAAqB,EAArB;AACD;AACF,iCAND;AAzDkC;AAAA;AAAA,uCAkE1B,gBAlE0B;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAoEhC,gCAAA,OAAO,CAAC,GAAR,CAAY,gBAAZ;;AApEgC,qCAqE5B,gBAAgB,CAAC,UArEW;AAAA;AAAA;AAAA;;AAsE9B,gCAAA,OAAO,CAAC,GAAR,CAAY,UAAZ,EAAwB,gBAAgB,CAAC,CAAzC;AAtE8B;AAAA;AAAA,uCAuEvB,gBAAgB,CAAC;AAvEM;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAmD3B,sBAAA,EAnD2B,GAmDvB,CAnDuB;;AAAA;AAAA,4BAmDpB,EAAC,GAAG,UAAU,CAAC,MAnDK;AAAA;AAAA;AAAA;;AAAA,4DAmD3B,EAnD2B;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAmDG,sBAAA,EAAC,EAnDJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiB7B,YAAA,CAjB6B,GAiBzB,CAjByB;;AAAA;AAAA,kBAiBtB,CAAC,GAAG,iBAAiB,CAAC,MAjBA;AAAA;AAAA;AAAA;;AAAA,iDAiB7B,CAjB6B;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAiBQ,YAAA,CAAC,EAjBT;AAAA;AAAA;;AAAA;AAAA,8CA6E/B,cAAc,CAAC,MA7EgB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAxB,wBAAwB;AAAA;AAAA;AAAA,GAA9B;;AAAM,OAAA,CAAA,wBAAA,GAAwB,wBAAxB;;AAgFN,IAAM,gBAAgB;AAAA,wEAAG,kBAC9B,UAD8B,EAE9B,MAF8B,EAG9B,cAH8B,EAI9B,UAJ8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAK9B,YAAA,YAL8B,8DAKD,YAAY,CAAC,QALZ;AAM9B,YAAA,UAN8B,8DAML,cANK;AAO9B,YAAA,eAP8B,8DAOyB,YAAK,CAAG,CAPjC;AAQ9B,YAAA,YAR8B,8DAQ2B;AAAA,qBAAM,KAAN;AAAA,aAR3B;AAS9B,YAAA,KAT8B;;AAAA,gBAWzB,MAAM,CAAC,SAXkB;AAAA;AAAA;AAAA;;AAAA,kBAWD,IAAI,qBAAA,CAAA,uBAAJ,EAXC;;AAAA;AAaxB,YAAA,YAbwB,GAaM,EAbN;;AAAA,gBAezB,KAfyB;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAgBd,UAAU,CAAC,kBAAX,CAA8B,UAA9B,CAhBc;;AAAA;AAgB5B,YAAA,KAhB4B;;AAAA;AAAA,qCAmBrB,CAnBqB;AAoB5B,kBAAM,YAAY,GAAG,cAAc,CAAC,CAAD,CAAnC;AACA,kBAAM,OAAO,GAAG,UAAU,CAAC,CAAD,CAA1B;;AAEA,kBAAI,YAAY,CAAC,MAAb,KAAwB,CAA5B,EAA+B;AAC7B;AACD;;AAED,kBAAM,WAAW,GAAG,IAAI,SAAA,CAAA,WAAJ,EAApB;AACA,cAAA,YAAY,CAAC,OAAb,CAAqB,UAAA,WAAW;AAAA,uBAAI,WAAW,CAAC,GAAZ,CAAgB,WAAhB,CAAJ;AAAA,eAAhC;AACA,cAAA,WAAW,CAAC,eAAZ,GAA8B,KAAK,CAAC,SAApC;AACA,cAAA,WAAW,CAAC,UAAZ,OAAA,WAAW,GACT;AACA,cAAA,MAAM,CAAC,SAFE,4BAGN,OAAO,CAAC,GAAR,CAAY,UAAA,CAAC;AAAA,uBAAI,CAAC,CAAC,SAAN;AAAA,eAAb,CAHM,GAAX;;AAMA,kBAAI,OAAO,CAAC,MAAR,GAAiB,CAArB,EAAwB;AACtB,gBAAA,WAAW,CAAC,WAAZ,OAAA,WAAW,qBAAgB,OAAhB,EAAX;AACD;;AAED,cAAA,YAAY,CAAC,IAAb,CAAkB,WAAlB;AAxC4B;;AAmBrB,YAAA,CAnBqB,GAmBjB,CAnBiB;;AAAA;AAAA,kBAmBd,CAAC,GAAG,cAAc,CAAC,MAnBL;AAAA;AAAA;AAAA;;AAAA,2BAmBrB,CAnBqB;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAmBa,YAAA,CAAC,EAnBd;AAAA;AAAA;;AAAA;AAAA;AAAA,mBA2CL,MAAM,CAAC,mBAAP,CAA2B,YAA3B,CA3CK;;AAAA;AA2CxB,YAAA,UA3CwB;AA6CxB,YAAA,WA7CwB,GA6CiC,EA7CjC;AA+CxB,YAAA,gBA/CwB,GA+CL;AAAE,cAAA,UAAU,EAAE,KAAd;AAAqB,cAAA,CAAC,EAAE;AAAxB,aA/CK;AAgD9B,YAAA,OAAO,CAAC,GAAR,CACE,oBADF,EAEE,UAAU,CAAC,MAFb,EAGE,qBAHF,EAIE,cAAc,CAAC,MAJjB;AAhD8B,2EAsDrB,GAtDqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAuDtB,sBAAA,gBAvDsB,GAuDH,qBAAqB,CAAC;AAC7C,wBAAA,UAAU,EAAV,UAD6C;AAE7C,wBAAA,iBAAiB,EAAE,UAAU,CAAC,GAAD;AAFgB,uBAAD,CAvDlB;AA4D5B,sBAAA,gBAAgB,CACb,IADH,CACQ,kBAAa;AAAA,4BAAV,IAAU,UAAV,IAAU;AACjB,wBAAA,eAAe,CAAC,IAAD,EAAO,GAAP,CAAf;AACD,uBAHH,EAIG,KAJH,CAIS,YAAK;AACV;AACA,wBAAA,YAAY,CAAC,UAAU,CAAC,GAAD,CAAX,EAAgB,GAAhB,CAAZ;;AACA,4BAAI,YAAY,KAAK,YAAY,CAAC,aAAlC,EAAiD;AAC/C,0BAAA,gBAAgB,CAAC,UAAjB,GAA8B,IAA9B;AACA,0BAAA,gBAAgB,CAAC,CAAjB,GAAqB,GAArB;AACD;AACF,uBAXH;;AA5D4B,4BAyExB,YAAY,KAAK,YAAY,CAAC,QAzEN;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,6BA2ElB,gBA3EkB;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA6ExB,sBAAA,OAAO,CAAC,GAAR,CAAY,gBAAZ;;AA7EwB,2BA8EpB,gBAAgB,CAAC,UA9EG;AAAA;AAAA;AAAA;;AA+EtB,sBAAA,OAAO,CAAC,GAAR,CAAY,UAAZ,EAAwB,gBAAgB,CAAC,CAAzC;AA/EsB;AAAA,2BAgFf,gBAAgB,CAAC;AAhFF;;AAAA;AAAA;AAAA;;AAAA;AAoF1B,sBAAA,WAAW,CAAC,IAAZ,CAAiB,gBAAjB;;AApF0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAsDrB,YAAA,GAtDqB,GAsDjB,CAtDiB;;AAAA;AAAA,kBAsDd,GAAC,GAAG,UAAU,CAAC,MAtDD;AAAA;AAAA;AAAA;;AAAA,kDAsDrB,GAtDqB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAsDS,YAAA,GAAC,EAtDV;AAAA;AAAA;;AAAA;AAAA,kBAwF1B,YAAY,KAAK,YAAY,CAAC,QAxFJ;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAyFtB,OAAO,CAAC,GAAR,CAAY,WAAZ,CAzFsB;;AAAA;AAAA,8CA4FvB,UAAU,CAAC,MA5FY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAhB,gBAAgB;AAAA;AAAA;AAAA,GAAtB;;AAAM,OAAA,CAAA,gBAAA,GAAgB,gBAAhB;;AA+FN,IAAM,+BAA+B;AAAA,wEAAG,kBAC7C,UAD6C,EAE7C,MAF6C,EAG7C,cAH6C,EAI7C,UAJ6C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAK7C,YAAA,UAL6C,iEAKpB,cALoB;;AAAA,gBAOxC,MAAM,CAAC,SAPiC;AAAA;AAAA;AAAA;;AAAA,kBAOhB,IAAI,qBAAA,CAAA,uBAAJ,EAPgB;;AAAA;AASvC,YAAA,YATuC,GAST,EATS;AAAA,2EAWpC,CAXoC;AAAA;AAAA;AAAA;AAAA;AAAA;AAYrC,sBAAA,YAZqC,GAYtB,cAAc,CAAC,CAAD,CAZQ;AAarC,sBAAA,OAbqC,GAa3B,UAAU,CAAC,CAAD,CAbiB;;AAAA,4BAevC,YAAY,CAAC,MAAb,KAAwB,CAfe;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA,6BAmBvB,UAAU,CAAC,kBAAX,CAA8B,UAA9B,CAnBuB;;AAAA;AAmBrC,sBAAA,KAnBqC;AAAA;AAAA,6BAoBrC,CAAA,GAAA,OAAA,CAAA,KAAA,EAAM,IAAN,CApBqC;;AAAA;AAsBrC,sBAAA,WAtBqC,GAsBvB,IAAI,SAAA,CAAA,WAAJ,EAtBuB;AAuB3C,sBAAA,YAAY,CAAC,OAAb,CAAqB,UAAA,WAAW;AAAA,+BAAI,WAAW,CAAC,GAAZ,CAAgB,WAAhB,CAAJ;AAAA,uBAAhC;AACA,sBAAA,WAAW,CAAC,eAAZ,GAA8B,KAAK,CAAC,SAApC;AACA,sBAAA,WAAW,CAAC,UAAZ,OAAA,WAAW,GACT;AACA,sBAAA,MAAM,CAAC,SAFE,4BAGN,OAAO,CAAC,GAAR,CAAY,UAAA,CAAC;AAAA,+BAAI,CAAC,CAAC,SAAN;AAAA,uBAAb,CAHM,GAAX;;AAMA,0BAAI,OAAO,CAAC,MAAR,GAAiB,CAArB,EAAwB;AACtB,wBAAA,WAAW,CAAC,WAAZ,OAAA,WAAW,qBAAgB,OAAhB,EAAX;AACD;;AAED,sBAAA,YAAY,CAAC,IAAb,CAAkB,WAAlB;;AAnC2C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWpC,YAAA,CAXoC,GAWhC,CAXgC;;AAAA;AAAA,kBAW7B,CAAC,GAAG,cAAc,CAAC,MAXU;AAAA;AAAA;AAAA;;AAAA,mDAWpC,CAXoC;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAWF,YAAA,CAAC,EAXC;AAAA;AAAA;;AAAA;AAAA;AAAA,mBAsCpB,MAAM,CAAC,mBAAP,CAA2B,YAA3B,CAtCoB;;AAAA;AAsCvC,YAAA,UAtCuC;AAwCvC,YAAA,gBAxCuC,GAwCpB;AAAE,cAAA,UAAU,EAAE,KAAd;AAAqB,cAAA,CAAC,EAAE;AAAxB,aAxCoB;AAyC7C,YAAA,OAAO,CAAC,GAAR,CACE,oBADF,EAEE,UAAU,CAAC,MAFb,EAGE,qBAHF,EAIE,cAAc,CAAC,MAJjB;AAzC6C,2EA+CpC,GA/CoC;AAAA;AAAA;AAAA;AAAA;AAAA;AAgDrC,sBAAA,gBAhDqC,GAgDlB,qBAAqB,CAAC;AAC7C,wBAAA,UAAU,EAAV,UAD6C;AAE7C,wBAAA,iBAAiB,EAAE,UAAU,CAAC,GAAD;AAFgB,uBAAD,CAhDH;AAqD3C,sBAAA,gBAAgB,CAAC,KAAjB,CAAuB,YAAK;AAC1B,wBAAA,gBAAgB,CAAC,UAAjB,GAA8B,IAA9B;AACA,wBAAA,gBAAgB,CAAC,CAAjB,GAAqB,GAArB;AACD,uBAHD;AArD2C;AAAA;AAAA,6BA2DnC,gBA3DmC;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA6DzC,sBAAA,OAAO,CAAC,GAAR,CAAY,gBAAZ;;AA7DyC,2BA8DrC,gBAAgB,CAAC,UA9DoB;AAAA;AAAA;AAAA;;AA+DvC,sBAAA,OAAO,CAAC,GAAR,CAAY,UAAZ,EAAwB,gBAAgB,CAAC,CAAzC;AA/DuC;AAAA,2BAgEhC,gBAAgB,CAAC;AAhEe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA+CpC,YAAA,GA/CoC,GA+ChC,CA/CgC;;AAAA;AAAA,kBA+C7B,GAAC,GAAG,UAAU,CAAC,MA/Cc;AAAA;AAAA;AAAA;;AAAA,mDA+CpC,GA/CoC;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AA+CN,YAAA,GAAC,EA/CK;AAAA;AAAA;;AAAA;AAAA,+CAqEtC,UAAU,CAAC,MArE2B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAA/B,+BAA+B;AAAA;AAAA;AAAA,GAArC;;AAAM,OAAA,CAAA,+BAAA,GAA+B,+BAA/B;;AAwEN,IAAM,eAAe;AAAA,wEAAG,kBAC7B,UAD6B,EAE7B,MAF6B,EAG7B,YAH6B,EAI7B,OAJ6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAK7B,YAAA,iBAL6B,iEAKT,IALS;AAM7B,YAAA,UAN6B,iEAMJ,cANI;AAO7B,YAAA,gBAP6B,iEAOD,KAPC;AAQ7B,YAAA,KAR6B;;AAAA,gBAUxB,MAAM,CAAC,SAViB;AAAA;AAAA;AAAA;;AAAA,kBAUA,IAAI,qBAAA,CAAA,uBAAJ,EAVA;;AAAA;AAYzB,YAAA,WAZyB,GAYX,IAAI,SAAA,CAAA,WAAJ,EAZW;AAa7B,YAAA,YAAY,CAAC,OAAb,CAAqB,UAAA,WAAW;AAAA,qBAAI,WAAW,CAAC,GAAZ,CAAgB,WAAhB,CAAJ;AAAA,aAAhC;AAb6B,4BAe3B,KAf2B;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAeX,UAAU,CAAC,kBAAX,CAA8B,UAA9B,CAfW;;AAAA;AAAA;;AAAA;AAc7B,YAAA,WAAW,CAAC,eAdiB,iBAgB3B,SAhB2B;;AAkB7B,gBAAI,gBAAJ,EAAsB;AACpB,8BAAA,WAAW,EAAC,UAAZ,wCAA0B,OAAO,CAAC,GAAR,CAAY,UAAA,CAAC;AAAA,uBAAI,CAAC,CAAC,SAAN;AAAA,eAAb,CAA1B;AACD,aAFD,MAEO;AACL,+BAAA,WAAW,EAAC,UAAZ,uBACE;AACA,cAAA,MAAM,CAAC,SAFT,4BAGK,OAAO,CAAC,GAAR,CAAY,UAAA,CAAC;AAAA,uBAAI,CAAC,CAAC,SAAN;AAAA,eAAb,CAHL;AAKD;;AAED,gBAAI,OAAO,CAAC,MAAR,GAAiB,CAArB,EAAwB;AACtB,+BAAA,WAAW,EAAC,WAAZ,yCAA2B,OAA3B;AACD;;AA9B4B,gBA+BxB,gBA/BwB;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAgCP,MAAM,CAAC,eAAP,CAAuB,WAAvB,CAhCO;;AAAA;AAgC3B,YAAA,WAhC2B;;AAAA;AAmCvB,YAAA,cAnCuB,GAmCN,WAAW,CAAC,SAAZ,EAnCM;AAoCvB,YAAA,OApCuB,GAoCb;AACd,cAAA,aAAa,EAAE,IADD;AAEd,cAAA,UAAU,EAAV;AAFc,aApCa;AAAA;AAAA,mBAyCV,UAAU,CAAC,kBAAX,CAA8B,cAA9B,EAA8C,OAA9C,CAzCU;;AAAA;AAyCvB,YAAA,IAzCuB;AA0CzB,YAAA,IA1CyB,GA0ClB,CA1CkB;;AAAA,iBA4CzB,iBA5CyB;AAAA;AAAA;AAAA;;AAAA;AAAA,mBA6CA,qCAAqC,CAC9D,IAD8D,EAE9D,eAF8D,EAG9D,UAH8D,EAI9D,UAJ8D,CA7CrC;;AAAA;AA6CrB,YAAA,YA7CqB;;AAAA,gBAoDtB,YApDsB;AAAA;AAAA;AAAA;;AAAA,kBAqDnB,IAAI,KAAJ,CAAU,gDAAV,CArDmB;;AAAA;AAsD3B,YAAA,IAAI,GAAG,CAAA,YAAY,KAAA,IAAZ,IAAA,YAAY,KAAA,KAAA,CAAZ,GAAY,KAAA,CAAZ,GAAA,YAAY,CAAE,IAAd,KAAsB,CAA7B;;AAtD2B,kBAwDvB,YAAY,KAAA,IAAZ,IAAA,YAAY,KAAA,KAAA,CAAZ,GAAY,KAAA,CAAZ,GAAA,YAAY,CAAE,GAxDS;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAyDJ,CAAA,GAAA,OAAA,CAAA,sBAAA,EAAuB,UAAvB,EAAmC,IAAnC,CAzDI;;AAAA;AAyDnB,YAAA,MAzDmB;AA0DzB,aAAA,GAAA,eAAA,CAAA,MAAA,EAAO;AACL,cAAA,OAAO,EAAE,uBADJ;AAEL,cAAA,WAAW,EACT,OAAA,CAAA,OAAA,CAAA,aAAA,CAAA,OAAA,CAAA,OAAA,CAAA,QAAA,EAAA,IAAA,EACG,MAAM,CAAC,GAAP,CAAW,UAAC,GAAD,EAAM,EAAN;AAAA,uBACV,OAAA,CAAA,OAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,kBAAA,GAAG,EAAE;AAAV,iBAAA,EAAe,GAAf,CADU;AAAA,eAAX,CADH,EAIE,OAAA,CAAA,OAAA,CAAA,aAAA,CAAC,cAAA,CAAA,YAAD,EAAa;AAAC,gBAAA,OAAO,EAAE,IAAV;AAAgB,gBAAA,IAAI,EAAC;AAArB,eAAb,CAJF,CAHG;AAUL,cAAA,IAAI,EAAE;AAVD,aAAP;AA1DyB,kBAuEnB,IAAI,KAAJ,2BACe,IADf,sBAC+B,IAAI,CAAC,SAAL,CAAe,MAAf,CAD/B,OAvEmB;;AAAA;AAAA,+CA6EtB;AAAE,cAAA,IAAI,EAAJ,IAAF;AAAQ,cAAA,IAAI,EAAJ;AAAR,aA7EsB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAf,eAAe;AAAA;AAAA;AAAA,GAArB;;AAAM,OAAA,CAAA,eAAA,GAAe,eAAf;;AAgFN,IAAM,wBAAwB;AAAA,wEAAG,kBACtC,UADsC,EAEtC,MAFsC,EAGtC,YAHsC,EAItC,OAJsC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAKtC,YAAA,UALsC,iEAKb,cALa;AAMtC,YAAA,gBANsC,iEAMV,KANU;AAOtC,YAAA,KAPsC;AAQtC,YAAA,UARsC;;AAAA,gBAUjC,MAAM,CAAC,SAV0B;AAAA;AAAA;AAAA;;AAAA,kBAUT,IAAI,qBAAA,CAAA,uBAAJ,EAVS;;AAAA;AAYlC,YAAA,WAZkC,GAYpB,IAAI,SAAA,CAAA,WAAJ,EAZoB;AAatC,YAAA,YAAY,CAAC,OAAb,CAAqB,UAAA,WAAW;AAAA,qBAAI,WAAW,CAAC,GAAZ,CAAgB,WAAhB,CAAJ;AAAA,aAAhC;AAbsC,4BAepC,KAfoC;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAepB,UAAU,CAAC,kBAAX,CAA8B,UAA9B,CAfoB;;AAAA;AAAA;;AAAA;AActC,YAAA,WAAW,CAAC,eAd0B,iBAgBpC,SAhBoC;;AAkBtC,gBAAI,gBAAJ,EAAsB;AACpB,+BAAA,WAAW,EAAC,UAAZ,yCAA0B,OAAO,CAAC,GAAR,CAAY,UAAA,CAAC;AAAA,uBAAI,CAAC,CAAC,SAAN;AAAA,eAAb,CAA1B;AACD,aAFD,MAEO;AACL,+BAAA,WAAW,EAAC,UAAZ,uBACE;AACA,cAAA,MAAM,CAAC,SAFT,4BAGK,OAAO,CAAC,GAAR,CAAY,UAAA,CAAC;AAAA,uBAAI,CAAC,CAAC,SAAN;AAAA,eAAb,CAHL;AAKD;;AAED,gBAAI,OAAO,CAAC,MAAR,GAAiB,CAArB,EAAwB;AACtB,+BAAA,WAAW,EAAC,WAAZ,yCAA2B,OAA3B;AACD;;AA9BqC,gBA+BjC,gBA/BiC;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAgChB,MAAM,CAAC,eAAP,CAAuB,WAAvB,CAhCgB;;AAAA;AAgCpC,YAAA,WAhCoC;;AAAA;AAmCtC,gBAAI,UAAJ,EAAgB;AACd,cAAA,UAAU;AACX;;AArCqC;AAAA,mBAuCT,qBAAqB,CAAC;AACjD,cAAA,UAAU,EAAV,UADiD;AAEjD,cAAA,iBAAiB,EAAE;AAF8B,aAAD,CAvCZ;;AAAA;AAAA;AAuC9B,YAAA,IAvC8B,yBAuC9B,IAvC8B;AAuCxB,YAAA,IAvCwB,yBAuCxB,IAvCwB;AAAA,+CA4C/B;AAAE,cAAA,IAAI,EAAJ,IAAF;AAAQ,cAAA,IAAI,EAAJ;AAAR,aA5C+B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAxB,wBAAwB;AAAA;AAAA;AAAA,GAA9B;;AAAM,OAAA,CAAA,wBAAA,GAAwB,wBAAxB;;AA+CN,IAAM,SAAS,GAAG,SAAZ,SAAY,GAAK;AAC5B,SAAO,IAAI,IAAJ,GAAW,OAAX,KAAuB,IAA9B;AACD,CAFM;;AAAM,OAAA,CAAA,SAAA,GAAS,SAAT;AAIb,IAAM,eAAe,GAAG,KAAxB;;SAEsB,qB;;;;;oFAAf;AAAA;;AAAA;AAAA;AAAA;AAAA;AACL,YAAA,iBADK,UACL,iBADK,EAEL,UAFK,UAEL,UAFK,0BAGL,OAHK,EAGL,OAHK,+BAGK,eAHL;AAYC,YAAA,cAZD,GAYkB,iBAAiB,CAAC,SAAlB,EAZlB;AAaC,YAAA,SAbD,GAaa,CAAA,GAAA,OAAA,CAAA,SAAA,GAbb;AAcD,YAAA,IAdC,GAcM,CAdN;AAAA;AAAA,mBAeoC,UAAU,CAAC,kBAAX,CACvC,cADuC,EAEvC;AACE,cAAA,aAAa,EAAE;AADjB,aAFuC,CAfpC;;AAAA;AAeC,YAAA,IAfD;AAsBL,YAAA,OAAO,CAAC,GAAR,CAAY,mCAAZ,EAAiD,IAAjD;AAEI,YAAA,IAxBC,GAwBM,KAxBN;;AAyBL,qEAAC;AAAA;AAAA;AAAA;AAAA;AAAA,4BACQ,CAAC,IAAD,IAAS,CAAA,GAAA,OAAA,CAAA,SAAA,MAAc,SAAd,GAA0B,OAD3C;AAAA;AAAA;AAAA;;AAEG,sBAAA,UAAU,CAAC,kBAAX,CAA8B,cAA9B,EAA8C;AAC5C,wBAAA,aAAa,EAAE;AAD6B,uBAA9C;AAFH;AAAA,6BAKS,CAAA,GAAA,OAAA,CAAA,KAAA,EAAM,GAAN,CALT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAD;;AAzBK;AAAA;AAAA,mBAkCwB,qCAAqC,CAC9D,IAD8D,EAE9D,OAF8D,EAG9D,UAH8D,EAI9D,QAJ8D,EAK9D,IAL8D,CAlC7D;;AAAA;AAkCG,YAAA,YAlCH;;AAAA,gBA0CE,YA1CF;AAAA;AAAA;AAAA;;AAAA,kBA2CK,IAAI,KAAJ,CAAU,gDAAV,CA3CL;;AAAA;AAAA,iBA6CC,YAAY,CAAC,GA7Cd;AAAA;AAAA;AAAA;;AA8CD,YAAA,OAAO,CAAC,KAAR,CAAc,YAAY,CAAC,GAA3B;AA9CC,kBA+CK,IAAI,KAAJ,CAAU,8CAAV,CA/CL;;AAAA;AAkDH,YAAA,IAAI,GAAG,CAAA,YAAY,KAAA,IAAZ,IAAA,YAAY,KAAA,KAAA,CAAZ,GAAY,KAAA,CAAZ,GAAA,YAAY,CAAE,IAAd,KAAsB,CAA7B;AAlDG;AAAA;;AAAA;AAAA;AAAA;AAoDH,YAAA,OAAO,CAAC,KAAR,CAAc,sBAAd;;AApDG,iBAqDC,cAAI,OArDL;AAAA;AAAA;AAAA;;AAAA,kBAsDK,IAAI,KAAJ,CAAU,gDAAV,CAtDL;;AAAA;AAwDC,YAAA,cAxDD,GAwDuD,IAxDvD;AAAA;AAAA;AAAA,mBA2DO,mBAAmB,CAAC,UAAD,EAAa,iBAAb,EAAgC,QAAhC,CA3D1B;;AAAA;AA0DD,YAAA,cA1DC,mBA4DC,KA5DD;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,kBA+DC,cAAc,IAAI,cAAc,CAAC,GA/DlC;AAAA;AAAA;AAAA;;AAAA,iBAgEG,cAAc,CAAC,IAhElB;AAAA;AAAA;AAAA;;AAiEU,YAAA,CAjEV,GAiEc,cAAc,CAAC,IAAf,CAAoB,MAApB,GAA6B,CAjE3C;;AAAA;AAAA,kBAiE8C,CAAC,IAAI,CAjEnD;AAAA;AAAA;AAAA;;AAkES,YAAA,IAlET,GAkEgB,cAAc,CAAC,IAAf,CAAoB,CAApB,CAlEhB;;AAAA,iBAmEO,IAAI,CAAC,UAAL,CAAgB,eAAhB,CAnEP;AAAA;AAAA;AAAA;;AAAA,kBAoEW,IAAI,KAAJ,CACJ,yBAAyB,IAAI,CAAC,KAAL,CAAW,gBAAgB,MAA3B,CADrB,CApEX;;AAAA;AAiEsD,cAAE,CAjExD;AAAA;AAAA;;AAAA;AAAA,kBA0EK,IAAI,KAAJ,CAAU,IAAI,CAAC,SAAL,CAAe,cAAc,CAAC,GAA9B,CAAV,CA1EL;;AAAA;AAAA;AA8EH,YAAA,IAAI,GAAG,IAAP;AA9EG;;AAAA;AAiFL,YAAA,OAAO,CAAC,GAAR,CAAY,SAAZ,EAAuB,IAAvB,EAA6B,CAAA,GAAA,OAAA,CAAA,SAAA,MAAc,SAA3C;AAjFK,+CAkFE;AAAE,cAAA,IAAI,EAAJ,IAAF;AAAQ,cAAA,IAAI,EAAJ;AAAR,aAlFF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAAP,OAAA,CAAA,qBAAA,GAAA,qBAAA;;SAqFe,mB;;;;;kFAAf,mBACE,UADF,EAEE,WAFF,EAGE,UAHF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAMsC,UAAU,CAAC,gBAAX,EAClC;AACA,YAAA,UAAU,CAAC,wBAFuB,CANtC;;AAAA;AAME,YAAA,WAAW,CAAC,eANd;AAWQ,YAAA,QAXR,GAWmB,WAAW,CAAC,gBAAZ,EAXnB,EAYE;;AACM,YAAA,eAbR,GAa0B,WAAW,CAAC,UAAZ,CAAuB,QAAvB,CAb1B;AAcQ,YAAA,kBAdR,GAc6B,eAAe,CAAC,QAAhB,CAAyB,QAAzB,CAd7B;AAeQ,YAAA,MAfR,GAesB;AAAE,cAAA,QAAQ,EAAE,QAAZ;AAAsB,cAAA,UAAU,EAAV;AAAtB,aAftB;AAgBQ,YAAA,IAhBR,GAgBe,CAAC,kBAAD,EAAqB,MAArB,CAhBf,EAkBE;;AAlBF;AAAA,mBAmBoB,UAAU,CAAC,WAAX,CAAuB,qBAAvB,EAA8C,IAA9C,CAnBpB;;AAAA;AAmBQ,YAAA,GAnBR;;AAAA,iBAoBM,GAAG,CAAC,KApBV;AAAA;AAAA;AAAA;;AAAA,kBAqBU,IAAI,KAAJ,CAAU,qCAAqC,GAAG,CAAC,KAAJ,CAAU,OAAzD,CArBV;;AAAA;AAAA,+CAuBS,GAAG,CAAC,MAvBb;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;SA0Be,qC;;;;;oGAAf,mBACE,IADF,EAEE,OAFF,EAGE,UAHF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIE,YAAA,UAJF,iEAI2B,QAJ3B;AAKE,YAAA,WALF,iEAKgB,KALhB;AAOM,YAAA,IAPN,GAOa,KAPb;AAQM,YAAA,MARN,GAQ8C;AAC1C,cAAA,IAAI,EAAE,CADoC;AAE1C,cAAA,aAAa,EAAE,CAF2B;AAG1C,cAAA,GAAG,EAAE;AAHqC,aAR9C;AAaM,YAAA,KAbN,GAac,CAbd;AAAA;AAAA,mBAciB,yDAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AACd,sBAAA,UAAU,CAAC,YAAK;AACd,4BAAI,IAAJ,EAAU;AACR;AACD;;AACD,wBAAA,IAAI,GAAG,IAAP;AACA,wBAAA,OAAO,CAAC,GAAR,CAAY,0BAAZ;AACA,8BAAM;AAAE,0BAAA,OAAO,EAAE;AAAX,yBAAN;AACD,uBAPS,EAOP,OAPO,CAAV;AADc;AAAA;AAAA,6BAUC,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAoB;AAC3C,wBAAA,KAAK,GAAG,UAAU,CAAC,WAAX,CACN,IADM,EAEN,UAAC,MAAD,EAAS,OAAT,EAAoB;AAClB,0BAAA,IAAI,GAAG,IAAP;AACA,8BAAM,UAAU,GAAG;AACjB,4BAAA,GAAG,EAAE,MAAM,CAAC,GADK;AAEjB,4BAAA,IAAI,EAAE,OAAO,CAAC,IAFG;AAGjB,4BAAA,aAAa,EAAE;AAHE,2BAAnB;;AAKA,8BAAI,MAAM,CAAC,GAAX,EAAgB;AACd,4BAAA,OAAO,CAAC,GAAR,CAAY,wBAAZ,EAAsC,MAAM,CAAC,GAA7C;AACA,4BAAA,MAAM,CAAC,UAAD,CAAN;AACD,2BAHD,MAGO;AACL,4BAAA,OAAO,CAAC,GAAR,CAAY,wBAAZ,EAAsC,MAAtC;AACA,4BAAA,OAAO,CAAC,UAAD,CAAP;AACD;AACF,yBAhBK,EAiBN,UAjBM,CAAR;AAmBD,uBApBY,CAVD;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAgCZ,sBAAA,IAAI,GAAG,IAAP;AACA,sBAAA,OAAO,CAAC,KAAR,CAAc,mBAAd,EAAmC,IAAnC;;AAjCY;AAAA,4BAmCP,CAAC,IAAD,IAAS,WAnCF;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,6BAqCsB,UAAU,CAAC,oBAAX,CAAgC,CAAC,IAAD,CAAhC,CArCtB;;AAAA;AAqCJ,sBAAA,iBArCI;AAsCJ,sBAAA,UAtCI,GAsCS,iBAAiB,IAAI,iBAAiB,CAAC,KAAlB,CAAwB,CAAxB,CAtC9B;;AAAA,0BAuCL,IAvCK;AAAA;AAAA;AAAA;;AAAA,0BAwCH,UAxCG;AAAA;AAAA;AAAA;;AAyCN,sBAAA,OAAO,CAAC,GAAR,CAAY,sBAAZ,EAAoC,IAApC,EAA0C,UAA1C;AAzCM;AAAA;;AAAA;AAAA,2BA0CG,UAAU,CAAC,GA1Cd;AAAA;AAAA;AAAA;;AA2CN,sBAAA,OAAO,CAAC,GAAR,CAAY,gBAAZ,EAA8B,IAA9B,EAAoC,UAApC;AACA,sBAAA,IAAI,GAAG,IAAP;AA5CM,4BA6CA,UAAU,CAAC,GA7CX;;AAAA;AAAA,0BA8CI,UAAU,CAAC,aA9Cf;AAAA;AAAA;AAAA;;AA+CN,sBAAA,OAAO,CAAC,GAAR,CAAY,2BAAZ,EAAyC,IAAzC,EAA+C,UAA/C;AA/CM;AAAA;;AAAA;AAiDN,sBAAA,OAAO,CAAC,GAAR,CAAY,uBAAZ,EAAqC,IAArC,EAA2C,UAA3C;AACA,sBAAA,IAAI,GAAG,IAAP;AAlDM,yDAmDC,UAnDD;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAuDV,0BAAI,CAAC,IAAL,EAAW;AACT,wBAAA,OAAO,CAAC,GAAR,CAAY,6BAAZ,EAA2C,IAA3C;AACD;;AAzDS;AAAA;AAAA,6BA2DN,CAAA,GAAA,OAAA,CAAA,KAAA,EAAM,IAAN,CA3DM;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAD,IAdjB;;AAAA;AAcE,YAAA,MAdF;AA6EE;AACA,gBAAI,UAAU,CAAC,uBAAX,CAAmC,KAAnC,CAAJ,EACE,UAAU,CAAC,uBAAX,CAAmC,KAAnC;AACF,YAAA,IAAI,GAAG,IAAP;AACA,YAAA,OAAO,CAAC,GAAR,CAAY,kBAAZ,EAAgC,MAAhC;AAjFF,+CAkFS,MAlFT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourceRoot":"","sourcesContent":["\"use strict\";\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n});\r\nvar __importStar = (this && this.__importStar) || function (mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.sendSignedTransaction = exports.getUnixTs = exports.sendTransactionWithRetry = exports.sendTransaction = exports.sendTransactionsWithRecentBlock = exports.sendTransactions = exports.sendTransactionsInChunks = exports.sendTransactionsWithManualRetry = exports.SequenceType = exports.getErrorForTransaction = exports.useConnectionConfig = exports.useConnection = exports.ConnectionProvider = exports.ENDPOINTS = void 0;\r\nconst react_1 = __importStar(require(\"react\"));\r\nconst utils_1 = require(\"../utils\");\r\nconst spl_token_registry_1 = require(\"@solana/spl-token-registry\");\r\nconst wallet_adapter_base_1 = require(\"@solana/wallet-adapter-base\");\r\nconst web3_js_1 = require(\"@solana/web3.js\");\r\nconst utils_2 = require(\"../utils/utils\");\r\nconst notifications_1 = require(\"../utils/notifications\");\r\nconst ExplorerLink_1 = require(\"../components/ExplorerLink\");\r\nconst hooks_1 = require(\"../hooks\");\r\nexports.ENDPOINTS = [\r\n    {\r\n        name: 'mainnet-beta',\r\n        label: 'mainnet-beta',\r\n        url: 'https://api.metaplex.solana.com/',\r\n        chainId: spl_token_registry_1.ENV.MainnetBeta,\r\n    },\r\n    {\r\n        name: 'testnet',\r\n        label: 'testnet',\r\n        url: (0, web3_js_1.clusterApiUrl)('testnet'),\r\n        chainId: spl_token_registry_1.ENV.Testnet,\r\n    },\r\n    {\r\n        name: 'devnet',\r\n        label: 'devnet',\r\n        url: (0, web3_js_1.clusterApiUrl)('devnet'),\r\n        chainId: spl_token_registry_1.ENV.Devnet,\r\n    },\r\n];\r\nconst DEFAULT_ENDPOINT = exports.ENDPOINTS[0];\r\nconst ConnectionContext = react_1.default.createContext({\r\n    connection: new web3_js_1.Connection(DEFAULT_ENDPOINT.url, 'recent'),\r\n    endpoint: DEFAULT_ENDPOINT,\r\n    tokens: new Map(),\r\n});\r\nfunction ConnectionProvider({ children }) {\r\n    const searchParams = (0, hooks_1.useQuerySearch)();\r\n    const [networkStorage, setNetworkStorage] = (0, utils_2.useLocalStorageState)('network', DEFAULT_ENDPOINT.name);\r\n    const networkParam = searchParams.get('network');\r\n    let maybeEndpoint;\r\n    if (networkParam) {\r\n        const endpointParam = exports.ENDPOINTS.find(({ name }) => name === networkParam);\r\n        if (endpointParam) {\r\n            maybeEndpoint = endpointParam;\r\n        }\r\n    }\r\n    if (networkStorage && !maybeEndpoint) {\r\n        const endpointStorage = exports.ENDPOINTS.find(({ name }) => name === networkStorage);\r\n        if (endpointStorage) {\r\n            maybeEndpoint = endpointStorage;\r\n        }\r\n    }\r\n    const endpoint = maybeEndpoint || DEFAULT_ENDPOINT;\r\n    const { current: connection } = (0, react_1.useRef)(new web3_js_1.Connection(endpoint.url));\r\n    const [tokens, setTokens] = (0, react_1.useState)(new Map());\r\n    (0, react_1.useEffect)(() => {\r\n        function fetchTokens() {\r\n            return (0, utils_1.getTokenListContainerPromise)().then(container => {\r\n                const list = container\r\n                    .excludeByTag('nft')\r\n                    .filterByChainId(endpoint.chainId)\r\n                    .getList();\r\n                const map = new Map(list.map(item => [item.address, item]));\r\n                setTokens(map);\r\n            });\r\n        }\r\n        fetchTokens();\r\n    }, []);\r\n    (0, react_1.useEffect)(() => {\r\n        function updateNetworkInLocalStorageIfNeeded() {\r\n            if (networkStorage !== endpoint.name) {\r\n                setNetworkStorage(endpoint.name);\r\n            }\r\n        }\r\n        updateNetworkInLocalStorageIfNeeded();\r\n    }, []);\r\n    // solana/web3.js closes its websocket connection when the subscription list\r\n    // is empty after opening for the first time, preventing subsequent\r\n    // subscriptions from receiving responses.\r\n    // This is a hack to prevent the list from ever being empty.\r\n    (0, react_1.useEffect)(() => {\r\n        const id = connection.onAccountChange(web3_js_1.Keypair.generate().publicKey, () => { });\r\n        return () => {\r\n            connection.removeAccountChangeListener(id);\r\n        };\r\n    }, []);\r\n    (0, react_1.useEffect)(() => {\r\n        const id = connection.onSlotChange(() => null);\r\n        return () => {\r\n            connection.removeSlotChangeListener(id);\r\n        };\r\n    }, []);\r\n    const contextValue = react_1.default.useMemo(() => {\r\n        return {\r\n            endpoint,\r\n            connection,\r\n            tokens,\r\n        };\r\n    }, [tokens]);\r\n    return (react_1.default.createElement(ConnectionContext.Provider, { value: contextValue }, children));\r\n}\r\nexports.ConnectionProvider = ConnectionProvider;\r\nfunction useConnection() {\r\n    const { connection } = (0, react_1.useContext)(ConnectionContext);\r\n    return connection;\r\n}\r\nexports.useConnection = useConnection;\r\nfunction useConnectionConfig() {\r\n    const { endpoint, tokens } = (0, react_1.useContext)(ConnectionContext);\r\n    return {\r\n        endpoint,\r\n        tokens,\r\n    };\r\n}\r\nexports.useConnectionConfig = useConnectionConfig;\r\nconst getErrorForTransaction = async (connection, txid) => {\r\n    // wait for all confirmation before geting transaction\r\n    await connection.confirmTransaction(txid, 'max');\r\n    const tx = await connection.getParsedConfirmedTransaction(txid);\r\n    const errors = [];\r\n    if ((tx === null || tx === void 0 ? void 0 : tx.meta) && tx.meta.logMessages) {\r\n        tx.meta.logMessages.forEach(log => {\r\n            const regex = /Error: (.*)/gm;\r\n            let m;\r\n            while ((m = regex.exec(log)) !== null) {\r\n                // This is necessary to avoid infinite loops with zero-width matches\r\n                if (m.index === regex.lastIndex) {\r\n                    regex.lastIndex++;\r\n                }\r\n                if (m.length > 1) {\r\n                    errors.push(m[1]);\r\n                }\r\n            }\r\n        });\r\n    }\r\n    return errors;\r\n};\r\nexports.getErrorForTransaction = getErrorForTransaction;\r\nvar SequenceType;\r\n(function (SequenceType) {\r\n    SequenceType[SequenceType[\"Sequential\"] = 0] = \"Sequential\";\r\n    SequenceType[SequenceType[\"Parallel\"] = 1] = \"Parallel\";\r\n    SequenceType[SequenceType[\"StopOnFailure\"] = 2] = \"StopOnFailure\";\r\n})(SequenceType = exports.SequenceType || (exports.SequenceType = {}));\r\nasync function sendTransactionsWithManualRetry(connection, wallet, instructions, signers) {\r\n    let stopPoint = 0;\r\n    let tries = 0;\r\n    let lastInstructionsLength = null;\r\n    const toRemoveSigners = {};\r\n    instructions = instructions.filter((instr, i) => {\r\n        if (instr.length > 0) {\r\n            return true;\r\n        }\r\n        else {\r\n            toRemoveSigners[i] = true;\r\n            return false;\r\n        }\r\n    });\r\n    let filteredSigners = signers.filter((_, i) => !toRemoveSigners[i]);\r\n    while (stopPoint < instructions.length && tries < 3) {\r\n        instructions = instructions.slice(stopPoint, instructions.length);\r\n        filteredSigners = filteredSigners.slice(stopPoint, filteredSigners.length);\r\n        if (instructions.length === lastInstructionsLength)\r\n            tries = tries + 1;\r\n        else\r\n            tries = 0;\r\n        try {\r\n            if (instructions.length === 1) {\r\n                await (0, exports.sendTransactionWithRetry)(connection, wallet, instructions[0], filteredSigners[0], 'single');\r\n                stopPoint = 1;\r\n            }\r\n            else {\r\n                stopPoint = await (0, exports.sendTransactions)(connection, wallet, instructions, filteredSigners, SequenceType.StopOnFailure, 'single');\r\n            }\r\n        }\r\n        catch (e) {\r\n            console.error(e);\r\n        }\r\n        console.log('Died on ', stopPoint, 'retrying from instruction', instructions[stopPoint], 'instructions length is', instructions.length);\r\n        lastInstructionsLength = instructions.length;\r\n    }\r\n}\r\nexports.sendTransactionsWithManualRetry = sendTransactionsWithManualRetry;\r\nconst sendTransactionsInChunks = async (connection, wallet, instructionSet, signersSet, sequenceType = SequenceType.Parallel, commitment = 'singleGossip', timeout = 120000, batchSize) => {\r\n    if (!wallet.publicKey)\r\n        throw new wallet_adapter_base_1.WalletNotConnectedError();\r\n    let instructionsChunk = [instructionSet];\r\n    let signersChunk = [signersSet];\r\n    instructionsChunk = (0, utils_2.chunks)(instructionSet, batchSize);\r\n    signersChunk = (0, utils_2.chunks)(signersSet, batchSize);\r\n    for (let c = 0; c < instructionsChunk.length; c++) {\r\n        const unsignedTxns = [];\r\n        for (let i = 0; i < instructionsChunk[c].length; i++) {\r\n            const instructions = instructionsChunk[c][i];\r\n            const signers = signersChunk[c][i];\r\n            if (instructions.length === 0) {\r\n                continue;\r\n            }\r\n            const transaction = new web3_js_1.Transaction();\r\n            const block = await connection.getRecentBlockhash(commitment);\r\n            instructions.forEach(instruction => transaction.add(instruction));\r\n            transaction.recentBlockhash = block.blockhash;\r\n            transaction.setSigners(\r\n            // fee payed by the wallet owner\r\n            wallet.publicKey, ...signers.map(s => s.publicKey));\r\n            if (signers.length > 0) {\r\n                transaction.partialSign(...signers);\r\n            }\r\n            unsignedTxns.push(transaction);\r\n        }\r\n        const signedTxns = await wallet.signAllTransactions(unsignedTxns);\r\n        const breakEarlyObject = { breakEarly: false, i: 0 };\r\n        console.log('Signed txns length', signedTxns.length, 'vs handed in length', instructionSet.length);\r\n        for (let i = 0; i < signedTxns.length; i++) {\r\n            const signedTxnPromise = sendSignedTransaction({\r\n                connection,\r\n                signedTransaction: signedTxns[i],\r\n                timeout,\r\n            });\r\n            signedTxnPromise.catch(() => {\r\n                // @ts-ignore\r\n                if (sequenceType === SequenceType.StopOnFailure) {\r\n                    breakEarlyObject.breakEarly = true;\r\n                    breakEarlyObject.i = i;\r\n                }\r\n            });\r\n            try {\r\n                await signedTxnPromise;\r\n            }\r\n            catch (e) {\r\n                console.log('Caught failure', e);\r\n                if (breakEarlyObject.breakEarly) {\r\n                    console.log('Died on ', breakEarlyObject.i);\r\n                    return breakEarlyObject.i; // Return the txn we failed on by index\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return instructionSet.length;\r\n};\r\nexports.sendTransactionsInChunks = sendTransactionsInChunks;\r\nconst sendTransactions = async (connection, wallet, instructionSet, signersSet, sequenceType = SequenceType.Parallel, commitment = 'singleGossip', successCallback = () => { }, failCallback = () => false, block) => {\r\n    if (!wallet.publicKey)\r\n        throw new wallet_adapter_base_1.WalletNotConnectedError();\r\n    const unsignedTxns = [];\r\n    if (!block) {\r\n        block = await connection.getRecentBlockhash(commitment);\r\n    }\r\n    for (let i = 0; i < instructionSet.length; i++) {\r\n        const instructions = instructionSet[i];\r\n        const signers = signersSet[i];\r\n        if (instructions.length === 0) {\r\n            continue;\r\n        }\r\n        const transaction = new web3_js_1.Transaction();\r\n        instructions.forEach(instruction => transaction.add(instruction));\r\n        transaction.recentBlockhash = block.blockhash;\r\n        transaction.setSigners(\r\n        // fee payed by the wallet owner\r\n        wallet.publicKey, ...signers.map(s => s.publicKey));\r\n        if (signers.length > 0) {\r\n            transaction.partialSign(...signers);\r\n        }\r\n        unsignedTxns.push(transaction);\r\n    }\r\n    const signedTxns = await wallet.signAllTransactions(unsignedTxns);\r\n    const pendingTxns = [];\r\n    const breakEarlyObject = { breakEarly: false, i: 0 };\r\n    console.log('Signed txns length', signedTxns.length, 'vs handed in length', instructionSet.length);\r\n    for (let i = 0; i < signedTxns.length; i++) {\r\n        const signedTxnPromise = sendSignedTransaction({\r\n            connection,\r\n            signedTransaction: signedTxns[i],\r\n        });\r\n        signedTxnPromise\r\n            .then(({ txid }) => {\r\n            successCallback(txid, i);\r\n        })\r\n            .catch(() => {\r\n            // @ts-ignore\r\n            failCallback(signedTxns[i], i);\r\n            if (sequenceType === SequenceType.StopOnFailure) {\r\n                breakEarlyObject.breakEarly = true;\r\n                breakEarlyObject.i = i;\r\n            }\r\n        });\r\n        if (sequenceType !== SequenceType.Parallel) {\r\n            try {\r\n                await signedTxnPromise;\r\n            }\r\n            catch (e) {\r\n                console.log('Caught failure', e);\r\n                if (breakEarlyObject.breakEarly) {\r\n                    console.log('Died on ', breakEarlyObject.i);\r\n                    return breakEarlyObject.i; // Return the txn we failed on by index\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            pendingTxns.push(signedTxnPromise);\r\n        }\r\n    }\r\n    if (sequenceType !== SequenceType.Parallel) {\r\n        await Promise.all(pendingTxns);\r\n    }\r\n    return signedTxns.length;\r\n};\r\nexports.sendTransactions = sendTransactions;\r\nconst sendTransactionsWithRecentBlock = async (connection, wallet, instructionSet, signersSet, commitment = 'singleGossip') => {\r\n    if (!wallet.publicKey)\r\n        throw new wallet_adapter_base_1.WalletNotConnectedError();\r\n    const unsignedTxns = [];\r\n    for (let i = 0; i < instructionSet.length; i++) {\r\n        const instructions = instructionSet[i];\r\n        const signers = signersSet[i];\r\n        if (instructions.length === 0) {\r\n            continue;\r\n        }\r\n        const block = await connection.getRecentBlockhash(commitment);\r\n        await (0, utils_2.sleep)(1200);\r\n        const transaction = new web3_js_1.Transaction();\r\n        instructions.forEach(instruction => transaction.add(instruction));\r\n        transaction.recentBlockhash = block.blockhash;\r\n        transaction.setSigners(\r\n        // fee payed by the wallet owner\r\n        wallet.publicKey, ...signers.map(s => s.publicKey));\r\n        if (signers.length > 0) {\r\n            transaction.partialSign(...signers);\r\n        }\r\n        unsignedTxns.push(transaction);\r\n    }\r\n    const signedTxns = await wallet.signAllTransactions(unsignedTxns);\r\n    const breakEarlyObject = { breakEarly: false, i: 0 };\r\n    console.log('Signed txns length', signedTxns.length, 'vs handed in length', instructionSet.length);\r\n    for (let i = 0; i < signedTxns.length; i++) {\r\n        const signedTxnPromise = sendSignedTransaction({\r\n            connection,\r\n            signedTransaction: signedTxns[i],\r\n        });\r\n        signedTxnPromise.catch(() => {\r\n            breakEarlyObject.breakEarly = true;\r\n            breakEarlyObject.i = i;\r\n        });\r\n        try {\r\n            await signedTxnPromise;\r\n        }\r\n        catch (e) {\r\n            console.log('Caught failure', e);\r\n            if (breakEarlyObject.breakEarly) {\r\n                console.log('Died on ', breakEarlyObject.i);\r\n                return breakEarlyObject.i; // Return the txn we failed on by index\r\n            }\r\n        }\r\n    }\r\n    return signedTxns.length;\r\n};\r\nexports.sendTransactionsWithRecentBlock = sendTransactionsWithRecentBlock;\r\nconst sendTransaction = async (connection, wallet, instructions, signers, awaitConfirmation = true, commitment = 'singleGossip', includesFeePayer = false, block) => {\r\n    if (!wallet.publicKey)\r\n        throw new wallet_adapter_base_1.WalletNotConnectedError();\r\n    let transaction = new web3_js_1.Transaction();\r\n    instructions.forEach(instruction => transaction.add(instruction));\r\n    transaction.recentBlockhash = (block || (await connection.getRecentBlockhash(commitment))).blockhash;\r\n    if (includesFeePayer) {\r\n        transaction.setSigners(...signers.map(s => s.publicKey));\r\n    }\r\n    else {\r\n        transaction.setSigners(\r\n        // fee payed by the wallet owner\r\n        wallet.publicKey, ...signers.map(s => s.publicKey));\r\n    }\r\n    if (signers.length > 0) {\r\n        transaction.partialSign(...signers);\r\n    }\r\n    if (!includesFeePayer) {\r\n        transaction = await wallet.signTransaction(transaction);\r\n    }\r\n    const rawTransaction = transaction.serialize();\r\n    const options = {\r\n        skipPreflight: true,\r\n        commitment,\r\n    };\r\n    const txid = await connection.sendRawTransaction(rawTransaction, options);\r\n    let slot = 0;\r\n    if (awaitConfirmation) {\r\n        const confirmation = await awaitTransactionSignatureConfirmation(txid, DEFAULT_TIMEOUT, connection, commitment);\r\n        if (!confirmation)\r\n            throw new Error('Timed out awaiting confirmation on transaction');\r\n        slot = (confirmation === null || confirmation === void 0 ? void 0 : confirmation.slot) || 0;\r\n        if (confirmation === null || confirmation === void 0 ? void 0 : confirmation.err) {\r\n            const errors = await (0, exports.getErrorForTransaction)(connection, txid);\r\n            (0, notifications_1.notify)({\r\n                message: 'Transaction failed...',\r\n                description: (react_1.default.createElement(react_1.default.Fragment, null,\r\n                    errors.map((err, ii) => (react_1.default.createElement(\"div\", { key: ii }, err))),\r\n                    react_1.default.createElement(ExplorerLink_1.ExplorerLink, { address: txid, type: \"transaction\" }))),\r\n                type: 'error',\r\n            });\r\n            throw new Error(`Raw transaction ${txid} failed (${JSON.stringify(status)})`);\r\n        }\r\n    }\r\n    return { txid, slot };\r\n};\r\nexports.sendTransaction = sendTransaction;\r\nconst sendTransactionWithRetry = async (connection, wallet, instructions, signers, commitment = 'singleGossip', includesFeePayer = false, block, beforeSend) => {\r\n    if (!wallet.publicKey)\r\n        throw new wallet_adapter_base_1.WalletNotConnectedError();\r\n    let transaction = new web3_js_1.Transaction();\r\n    instructions.forEach(instruction => transaction.add(instruction));\r\n    transaction.recentBlockhash = (block || (await connection.getRecentBlockhash(commitment))).blockhash;\r\n    if (includesFeePayer) {\r\n        transaction.setSigners(...signers.map(s => s.publicKey));\r\n    }\r\n    else {\r\n        transaction.setSigners(\r\n        // fee payed by the wallet owner\r\n        wallet.publicKey, ...signers.map(s => s.publicKey));\r\n    }\r\n    if (signers.length > 0) {\r\n        transaction.partialSign(...signers);\r\n    }\r\n    if (!includesFeePayer) {\r\n        transaction = await wallet.signTransaction(transaction);\r\n    }\r\n    if (beforeSend) {\r\n        beforeSend();\r\n    }\r\n    const { txid, slot } = await sendSignedTransaction({\r\n        connection,\r\n        signedTransaction: transaction,\r\n    });\r\n    return { txid, slot };\r\n};\r\nexports.sendTransactionWithRetry = sendTransactionWithRetry;\r\nconst getUnixTs = () => {\r\n    return new Date().getTime() / 1000;\r\n};\r\nexports.getUnixTs = getUnixTs;\r\nconst DEFAULT_TIMEOUT = 15000;\r\nasync function sendSignedTransaction({ signedTransaction, connection, timeout = DEFAULT_TIMEOUT, }) {\r\n    const rawTransaction = signedTransaction.serialize();\r\n    const startTime = (0, exports.getUnixTs)();\r\n    let slot = 0;\r\n    const txid = await connection.sendRawTransaction(rawTransaction, {\r\n        skipPreflight: true,\r\n    });\r\n    console.log('Started awaiting confirmation for', txid);\r\n    let done = false;\r\n    (async () => {\r\n        while (!done && (0, exports.getUnixTs)() - startTime < timeout) {\r\n            connection.sendRawTransaction(rawTransaction, {\r\n                skipPreflight: true,\r\n            });\r\n            await (0, utils_2.sleep)(500);\r\n        }\r\n    })();\r\n    try {\r\n        const confirmation = await awaitTransactionSignatureConfirmation(txid, timeout, connection, 'recent', true);\r\n        if (!confirmation)\r\n            throw new Error('Timed out awaiting confirmation on transaction');\r\n        if (confirmation.err) {\r\n            console.error(confirmation.err);\r\n            throw new Error('Transaction failed: Custom instruction error');\r\n        }\r\n        slot = (confirmation === null || confirmation === void 0 ? void 0 : confirmation.slot) || 0;\r\n    }\r\n    catch (err) {\r\n        console.error('Timeout Error caught', err);\r\n        if (err.timeout) {\r\n            throw new Error('Timed out awaiting confirmation on transaction');\r\n        }\r\n        let simulateResult = null;\r\n        try {\r\n            simulateResult = (await simulateTransaction(connection, signedTransaction, 'single')).value;\r\n            // eslint-disable-next-line no-empty\r\n        }\r\n        catch (e) { }\r\n        if (simulateResult && simulateResult.err) {\r\n            if (simulateResult.logs) {\r\n                for (let i = simulateResult.logs.length - 1; i >= 0; --i) {\r\n                    const line = simulateResult.logs[i];\r\n                    if (line.startsWith('Program log: ')) {\r\n                        throw new Error('Transaction failed: ' + line.slice('Program log: '.length));\r\n                    }\r\n                }\r\n            }\r\n            throw new Error(JSON.stringify(simulateResult.err));\r\n        }\r\n        // throw new Error('Transaction failed');\r\n    }\r\n    finally {\r\n        done = true;\r\n    }\r\n    console.log('Latency', txid, (0, exports.getUnixTs)() - startTime);\r\n    return { txid, slot };\r\n}\r\nexports.sendSignedTransaction = sendSignedTransaction;\r\nasync function simulateTransaction(connection, transaction, commitment) {\r\n    // @ts-ignore\r\n    transaction.recentBlockhash = await connection._recentBlockhash(\r\n    // @ts-ignore\r\n    connection._disableBlockhashCaching);\r\n    const signData = transaction.serializeMessage();\r\n    // @ts-ignore\r\n    const wireTransaction = transaction._serialize(signData);\r\n    const encodedTransaction = wireTransaction.toString('base64');\r\n    const config = { encoding: 'base64', commitment };\r\n    const args = [encodedTransaction, config];\r\n    // @ts-ignore\r\n    const res = await connection._rpcRequest('simulateTransaction', args);\r\n    if (res.error) {\r\n        throw new Error('failed to simulate transaction: ' + res.error.message);\r\n    }\r\n    return res.result;\r\n}\r\nasync function awaitTransactionSignatureConfirmation(txid, timeout, connection, commitment = 'recent', queryStatus = false) {\r\n    let done = false;\r\n    let status = {\r\n        slot: 0,\r\n        confirmations: 0,\r\n        err: null,\r\n    };\r\n    let subId = 0;\r\n    status = await (async () => {\r\n        setTimeout(() => {\r\n            if (done) {\r\n                return;\r\n            }\r\n            done = true;\r\n            console.log('Rejecting for timeout...');\r\n            throw { timeout: true };\r\n        }, timeout);\r\n        try {\r\n            return await new Promise((resolve, reject) => {\r\n                subId = connection.onSignature(txid, (result, context) => {\r\n                    done = true;\r\n                    const nextStatus = {\r\n                        err: result.err,\r\n                        slot: context.slot,\r\n                        confirmations: 0,\r\n                    };\r\n                    if (result.err) {\r\n                        console.log('Rejected via websocket', result.err);\r\n                        reject(nextStatus);\r\n                    }\r\n                    else {\r\n                        console.log('Resolved via websocket', result);\r\n                        resolve(nextStatus);\r\n                    }\r\n                }, commitment);\r\n            });\r\n        }\r\n        catch (e) {\r\n            done = true;\r\n            console.error('WS error in setup', txid, e);\r\n        }\r\n        while (!done && queryStatus) {\r\n            try {\r\n                const signatureStatuses = await connection.getSignatureStatuses([txid]);\r\n                const nextStatus = signatureStatuses && signatureStatuses.value[0];\r\n                if (!done) {\r\n                    if (!nextStatus) {\r\n                        console.log('REST null result for', txid, nextStatus);\r\n                    }\r\n                    else if (nextStatus.err) {\r\n                        console.log('REST error for', txid, nextStatus);\r\n                        done = true;\r\n                        throw nextStatus.err;\r\n                    }\r\n                    else if (!nextStatus.confirmations) {\r\n                        console.log('REST no confirmations for', txid, nextStatus);\r\n                    }\r\n                    else {\r\n                        console.log('REST confirmation for', txid, nextStatus);\r\n                        done = true;\r\n                        return nextStatus;\r\n                    }\r\n                }\r\n            }\r\n            catch (e) {\r\n                if (!done) {\r\n                    console.log('REST connection error: txid', txid, e);\r\n                }\r\n            }\r\n            await (0, utils_2.sleep)(2000);\r\n        }\r\n    })();\r\n    //@ts-ignore\r\n    if (connection._signatureSubscriptions[subId])\r\n        connection.removeSignatureListener(subId);\r\n    done = true;\r\n    console.log('Returning status', status);\r\n    return status;\r\n}\r\n//# sourceMappingURL=connection.js.map"]},"metadata":{},"sourceType":"script"}