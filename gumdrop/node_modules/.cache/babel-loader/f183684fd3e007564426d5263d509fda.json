{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport { isThrottlingError } from \"@aws-sdk/service-error-classification\";\n\nvar DefaultRateLimiter = function () {\n  function DefaultRateLimiter(options) {\n    var _a, _b, _c, _d, _e;\n\n    this.currentCapacity = 0;\n    this.enabled = false;\n    this.lastMaxRate = 0;\n    this.measuredTxRate = 0;\n    this.requestCount = 0;\n    this.lastTimestamp = 0;\n    this.timeWindow = 0;\n    this.beta = (_a = options === null || options === void 0 ? void 0 : options.beta) !== null && _a !== void 0 ? _a : 0.7;\n    this.minCapacity = (_b = options === null || options === void 0 ? void 0 : options.minCapacity) !== null && _b !== void 0 ? _b : 1;\n    this.minFillRate = (_c = options === null || options === void 0 ? void 0 : options.minFillRate) !== null && _c !== void 0 ? _c : 0.5;\n    this.scaleConstant = (_d = options === null || options === void 0 ? void 0 : options.scaleConstant) !== null && _d !== void 0 ? _d : 0.4;\n    this.smooth = (_e = options === null || options === void 0 ? void 0 : options.smooth) !== null && _e !== void 0 ? _e : 0.8;\n    var currentTimeInSeconds = this.getCurrentTimeInSeconds();\n    this.lastThrottleTime = currentTimeInSeconds;\n    this.lastTxRateBucket = Math.floor(this.getCurrentTimeInSeconds());\n    this.fillRate = this.minFillRate;\n    this.maxCapacity = this.minCapacity;\n  }\n\n  DefaultRateLimiter.prototype.getCurrentTimeInSeconds = function () {\n    return Date.now() / 1000;\n  };\n\n  DefaultRateLimiter.prototype.getSendToken = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2, this.acquireTokenBucket(1)];\n      });\n    });\n  };\n\n  DefaultRateLimiter.prototype.acquireTokenBucket = function (amount) {\n    return __awaiter(this, void 0, void 0, function () {\n      var delay_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!this.enabled) {\n              return [2];\n            }\n\n            this.refillTokenBucket();\n            if (!(amount > this.currentCapacity)) return [3, 2];\n            delay_1 = (amount - this.currentCapacity) / this.fillRate * 1000;\n            return [4, new Promise(function (resolve) {\n              return setTimeout(resolve, delay_1);\n            })];\n\n          case 1:\n            _a.sent();\n\n            _a.label = 2;\n\n          case 2:\n            this.currentCapacity = this.currentCapacity - amount;\n            return [2];\n        }\n      });\n    });\n  };\n\n  DefaultRateLimiter.prototype.refillTokenBucket = function () {\n    var timestamp = this.getCurrentTimeInSeconds();\n\n    if (!this.lastTimestamp) {\n      this.lastTimestamp = timestamp;\n      return;\n    }\n\n    var fillAmount = (timestamp - this.lastTimestamp) * this.fillRate;\n    this.currentCapacity = Math.min(this.maxCapacity, this.currentCapacity + fillAmount);\n    this.lastTimestamp = timestamp;\n  };\n\n  DefaultRateLimiter.prototype.updateClientSendingRate = function (response) {\n    var calculatedRate;\n    this.updateMeasuredRate();\n\n    if (isThrottlingError(response)) {\n      var rateToUse = !this.enabled ? this.measuredTxRate : Math.min(this.measuredTxRate, this.fillRate);\n      this.lastMaxRate = rateToUse;\n      this.calculateTimeWindow();\n      this.lastThrottleTime = this.getCurrentTimeInSeconds();\n      calculatedRate = this.cubicThrottle(rateToUse);\n      this.enableTokenBucket();\n    } else {\n      this.calculateTimeWindow();\n      calculatedRate = this.cubicSuccess(this.getCurrentTimeInSeconds());\n    }\n\n    var newRate = Math.min(calculatedRate, 2 * this.measuredTxRate);\n    this.updateTokenBucketRate(newRate);\n  };\n\n  DefaultRateLimiter.prototype.calculateTimeWindow = function () {\n    this.timeWindow = this.getPrecise(Math.pow(this.lastMaxRate * (1 - this.beta) / this.scaleConstant, 1 / 3));\n  };\n\n  DefaultRateLimiter.prototype.cubicThrottle = function (rateToUse) {\n    return this.getPrecise(rateToUse * this.beta);\n  };\n\n  DefaultRateLimiter.prototype.cubicSuccess = function (timestamp) {\n    return this.getPrecise(this.scaleConstant * Math.pow(timestamp - this.lastThrottleTime - this.timeWindow, 3) + this.lastMaxRate);\n  };\n\n  DefaultRateLimiter.prototype.enableTokenBucket = function () {\n    this.enabled = true;\n  };\n\n  DefaultRateLimiter.prototype.updateTokenBucketRate = function (newRate) {\n    this.refillTokenBucket();\n    this.fillRate = Math.max(newRate, this.minFillRate);\n    this.maxCapacity = Math.max(newRate, this.minCapacity);\n    this.currentCapacity = Math.min(this.currentCapacity, this.maxCapacity);\n  };\n\n  DefaultRateLimiter.prototype.updateMeasuredRate = function () {\n    var t = this.getCurrentTimeInSeconds();\n    var timeBucket = Math.floor(t * 2) / 2;\n    this.requestCount++;\n\n    if (timeBucket > this.lastTxRateBucket) {\n      var currentRate = this.requestCount / (timeBucket - this.lastTxRateBucket);\n      this.measuredTxRate = this.getPrecise(currentRate * this.smooth + this.measuredTxRate * (1 - this.smooth));\n      this.requestCount = 0;\n      this.lastTxRateBucket = timeBucket;\n    }\n  };\n\n  DefaultRateLimiter.prototype.getPrecise = function (num) {\n    return parseFloat(num.toFixed(8));\n  };\n\n  return DefaultRateLimiter;\n}();\n\nexport { DefaultRateLimiter };","map":{"version":3,"sources":["C:/Users/AHSAN PC/Desktop/digitsu/gamp/js/node_modules/@aws-sdk/middleware-retry/dist-es/DefaultRateLimiter.js"],"names":["__awaiter","__generator","isThrottlingError","DefaultRateLimiter","options","_a","_b","_c","_d","_e","currentCapacity","enabled","lastMaxRate","measuredTxRate","requestCount","lastTimestamp","timeWindow","beta","minCapacity","minFillRate","scaleConstant","smooth","currentTimeInSeconds","getCurrentTimeInSeconds","lastThrottleTime","lastTxRateBucket","Math","floor","fillRate","maxCapacity","prototype","Date","now","getSendToken","acquireTokenBucket","amount","delay_1","label","refillTokenBucket","Promise","resolve","setTimeout","sent","timestamp","fillAmount","min","updateClientSendingRate","response","calculatedRate","updateMeasuredRate","rateToUse","calculateTimeWindow","cubicThrottle","enableTokenBucket","cubicSuccess","newRate","updateTokenBucketRate","getPrecise","pow","max","t","timeBucket","currentRate","num","parseFloat","toFixed"],"mappings":"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","sourcesContent":["import { __awaiter, __generator } from \"tslib\";\nimport { isThrottlingError } from \"@aws-sdk/service-error-classification\";\nvar DefaultRateLimiter = (function () {\n    function DefaultRateLimiter(options) {\n        var _a, _b, _c, _d, _e;\n        this.currentCapacity = 0;\n        this.enabled = false;\n        this.lastMaxRate = 0;\n        this.measuredTxRate = 0;\n        this.requestCount = 0;\n        this.lastTimestamp = 0;\n        this.timeWindow = 0;\n        this.beta = (_a = options === null || options === void 0 ? void 0 : options.beta) !== null && _a !== void 0 ? _a : 0.7;\n        this.minCapacity = (_b = options === null || options === void 0 ? void 0 : options.minCapacity) !== null && _b !== void 0 ? _b : 1;\n        this.minFillRate = (_c = options === null || options === void 0 ? void 0 : options.minFillRate) !== null && _c !== void 0 ? _c : 0.5;\n        this.scaleConstant = (_d = options === null || options === void 0 ? void 0 : options.scaleConstant) !== null && _d !== void 0 ? _d : 0.4;\n        this.smooth = (_e = options === null || options === void 0 ? void 0 : options.smooth) !== null && _e !== void 0 ? _e : 0.8;\n        var currentTimeInSeconds = this.getCurrentTimeInSeconds();\n        this.lastThrottleTime = currentTimeInSeconds;\n        this.lastTxRateBucket = Math.floor(this.getCurrentTimeInSeconds());\n        this.fillRate = this.minFillRate;\n        this.maxCapacity = this.minCapacity;\n    }\n    DefaultRateLimiter.prototype.getCurrentTimeInSeconds = function () {\n        return Date.now() / 1000;\n    };\n    DefaultRateLimiter.prototype.getSendToken = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                return [2, this.acquireTokenBucket(1)];\n            });\n        });\n    };\n    DefaultRateLimiter.prototype.acquireTokenBucket = function (amount) {\n        return __awaiter(this, void 0, void 0, function () {\n            var delay_1;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!this.enabled) {\n                            return [2];\n                        }\n                        this.refillTokenBucket();\n                        if (!(amount > this.currentCapacity)) return [3, 2];\n                        delay_1 = ((amount - this.currentCapacity) / this.fillRate) * 1000;\n                        return [4, new Promise(function (resolve) { return setTimeout(resolve, delay_1); })];\n                    case 1:\n                        _a.sent();\n                        _a.label = 2;\n                    case 2:\n                        this.currentCapacity = this.currentCapacity - amount;\n                        return [2];\n                }\n            });\n        });\n    };\n    DefaultRateLimiter.prototype.refillTokenBucket = function () {\n        var timestamp = this.getCurrentTimeInSeconds();\n        if (!this.lastTimestamp) {\n            this.lastTimestamp = timestamp;\n            return;\n        }\n        var fillAmount = (timestamp - this.lastTimestamp) * this.fillRate;\n        this.currentCapacity = Math.min(this.maxCapacity, this.currentCapacity + fillAmount);\n        this.lastTimestamp = timestamp;\n    };\n    DefaultRateLimiter.prototype.updateClientSendingRate = function (response) {\n        var calculatedRate;\n        this.updateMeasuredRate();\n        if (isThrottlingError(response)) {\n            var rateToUse = !this.enabled ? this.measuredTxRate : Math.min(this.measuredTxRate, this.fillRate);\n            this.lastMaxRate = rateToUse;\n            this.calculateTimeWindow();\n            this.lastThrottleTime = this.getCurrentTimeInSeconds();\n            calculatedRate = this.cubicThrottle(rateToUse);\n            this.enableTokenBucket();\n        }\n        else {\n            this.calculateTimeWindow();\n            calculatedRate = this.cubicSuccess(this.getCurrentTimeInSeconds());\n        }\n        var newRate = Math.min(calculatedRate, 2 * this.measuredTxRate);\n        this.updateTokenBucketRate(newRate);\n    };\n    DefaultRateLimiter.prototype.calculateTimeWindow = function () {\n        this.timeWindow = this.getPrecise(Math.pow((this.lastMaxRate * (1 - this.beta)) / this.scaleConstant, 1 / 3));\n    };\n    DefaultRateLimiter.prototype.cubicThrottle = function (rateToUse) {\n        return this.getPrecise(rateToUse * this.beta);\n    };\n    DefaultRateLimiter.prototype.cubicSuccess = function (timestamp) {\n        return this.getPrecise(this.scaleConstant * Math.pow(timestamp - this.lastThrottleTime - this.timeWindow, 3) + this.lastMaxRate);\n    };\n    DefaultRateLimiter.prototype.enableTokenBucket = function () {\n        this.enabled = true;\n    };\n    DefaultRateLimiter.prototype.updateTokenBucketRate = function (newRate) {\n        this.refillTokenBucket();\n        this.fillRate = Math.max(newRate, this.minFillRate);\n        this.maxCapacity = Math.max(newRate, this.minCapacity);\n        this.currentCapacity = Math.min(this.currentCapacity, this.maxCapacity);\n    };\n    DefaultRateLimiter.prototype.updateMeasuredRate = function () {\n        var t = this.getCurrentTimeInSeconds();\n        var timeBucket = Math.floor(t * 2) / 2;\n        this.requestCount++;\n        if (timeBucket > this.lastTxRateBucket) {\n            var currentRate = this.requestCount / (timeBucket - this.lastTxRateBucket);\n            this.measuredTxRate = this.getPrecise(currentRate * this.smooth + this.measuredTxRate * (1 - this.smooth));\n            this.requestCount = 0;\n            this.lastTxRateBucket = timeBucket;\n        }\n    };\n    DefaultRateLimiter.prototype.getPrecise = function (num) {\n        return parseFloat(num.toFixed(8));\n    };\n    return DefaultRateLimiter;\n}());\nexport { DefaultRateLimiter };\n"]},"metadata":{},"sourceType":"module"}