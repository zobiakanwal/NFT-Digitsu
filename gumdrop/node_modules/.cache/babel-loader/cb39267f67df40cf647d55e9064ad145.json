{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"C:\\\\Users\\\\AHSAN PC\\\\Desktop\\\\digitsu\\\\gamp\\\\js\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\");\n\nvar _asyncToGenerator = require(\"C:\\\\Users\\\\AHSAN PC\\\\Desktop\\\\digitsu\\\\gamp\\\\js\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\asyncToGenerator.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.programIds = exports.setProgramIds = exports.getStoreID = void 0;\n\nvar __1 = require(\"..\");\n\nvar utils_1 = require(\"../utils\");\n\nvar ids_1 = require(\"./ids\");\n\nvar getStoreID = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(storeOwnerAddress) {\n    var programs, storeAddress;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (storeOwnerAddress) {\n              _context.next = 2;\n              break;\n            }\n\n            return _context.abrupt(\"return\", undefined);\n\n          case 2:\n            console.log('Store owner', storeOwnerAddress, ids_1.METAPLEX_ID);\n            _context.next = 5;\n            return (0, utils_1.findProgramAddress)([Buffer.from('metaplex'), (0, ids_1.toPublicKey)(ids_1.METAPLEX_ID).toBuffer(), (0, ids_1.toPublicKey)(storeOwnerAddress).toBuffer()], (0, ids_1.toPublicKey)(ids_1.METAPLEX_ID));\n\n          case 5:\n            programs = _context.sent;\n            storeAddress = programs[0];\n            return _context.abrupt(\"return\", storeAddress);\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function getStoreID(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexports.getStoreID = getStoreID;\n\nvar setProgramIds = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(store) {\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            STORE = store ? (0, ids_1.toPublicKey)(store) : undefined;\n\n          case 1:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function setProgramIds(_x2) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nexports.setProgramIds = setProgramIds;\nvar STORE;\n\nvar programIds = function programIds() {\n  return {\n    token: ids_1.TOKEN_PROGRAM_ID,\n    associatedToken: ids_1.SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    bpf_upgrade_loader: ids_1.BPF_UPGRADE_LOADER_ID,\n    system: ids_1.SYSTEM,\n    metadata: ids_1.METADATA_PROGRAM_ID,\n    memo: ids_1.MEMO_ID,\n    vault: ids_1.VAULT_ID,\n    auction: ids_1.AUCTION_ID,\n    metaplex: ids_1.METAPLEX_ID,\n    pack_create: ids_1.PACK_CREATE_ID,\n    oracle: __1.ORACLE_ID,\n    store: STORE\n  };\n};\n\nexports.programIds = programIds;","map":{"version":3,"sources":["../../../src/utils/programIds.ts"],"names":[],"mappings":";;;;;;;;;;;AACA,IAAA,GAAA,GAAA,OAAA,CAAA,IAAA,CAAA;;AACA,IAAA,OAAA,GAAA,OAAA,CAAA,UAAA,CAAA;;AAEA,IAAA,KAAA,GAAA,OAAA,CAAA,OAAA,CAAA;;AAcO,IAAM,UAAU;AAAA,sEAAG,iBAAO,iBAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACnB,iBADmB;AAAA;AAAA;AAAA;;AAAA,6CAEf,SAFe;;AAAA;AAKxB,YAAA,OAAO,CAAC,GAAR,CAAY,aAAZ,EAA2B,iBAA3B,EAA8C,KAAA,CAAA,WAA9C;AALwB;AAAA,mBAMD,CAAA,GAAA,OAAA,CAAA,kBAAA,EACrB,CACE,MAAM,CAAC,IAAP,CAAY,UAAZ,CADF,EAEE,CAAA,GAAA,KAAA,CAAA,WAAA,EAAY,KAAA,CAAA,WAAZ,EAAyB,QAAzB,EAFF,EAGE,CAAA,GAAA,KAAA,CAAA,WAAA,EAAY,iBAAZ,EAA+B,QAA/B,EAHF,CADqB,EAMrB,CAAA,GAAA,KAAA,CAAA,WAAA,EAAY,KAAA,CAAA,WAAZ,CANqB,CANC;;AAAA;AAMlB,YAAA,QANkB;AAclB,YAAA,YAdkB,GAcH,QAAQ,CAAC,CAAD,CAdL;AAAA,6CAgBjB,YAhBiB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAV,UAAU;AAAA;AAAA;AAAA,GAAhB;;AAAM,OAAA,CAAA,UAAA,GAAU,UAAV;;AAmBN,IAAM,aAAa;AAAA,uEAAG,kBAAO,KAAP;AAAA;AAAA;AAAA;AAAA;AAC3B,YAAA,KAAK,GAAG,KAAK,GAAG,CAAA,GAAA,KAAA,CAAA,WAAA,EAAY,KAAZ,CAAH,GAAwB,SAArC;;AAD2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAb,aAAa;AAAA;AAAA;AAAA,GAAnB;;AAAM,OAAA,CAAA,aAAA,GAAa,aAAb;AAIb,IAAI,KAAJ;;AAEO,IAAM,UAAU,GAAG,SAAb,UAAa,GAAK;AAC7B,SAAO;AACL,IAAA,KAAK,EAAE,KAAA,CAAA,gBADF;AAEL,IAAA,eAAe,EAAE,KAAA,CAAA,uCAFZ;AAGL,IAAA,kBAAkB,EAAE,KAAA,CAAA,qBAHf;AAIL,IAAA,MAAM,EAAE,KAAA,CAAA,MAJH;AAKL,IAAA,QAAQ,EAAE,KAAA,CAAA,mBALL;AAML,IAAA,IAAI,EAAE,KAAA,CAAA,OAND;AAOL,IAAA,KAAK,EAAE,KAAA,CAAA,QAPF;AAQL,IAAA,OAAO,EAAE,KAAA,CAAA,UARJ;AASL,IAAA,QAAQ,EAAE,KAAA,CAAA,WATL;AAUL,IAAA,WAAW,EAAE,KAAA,CAAA,cAVR;AAWL,IAAA,MAAM,EAAE,GAAA,CAAA,SAXH;AAYL,IAAA,KAAK,EAAE;AAZF,GAAP;AAcD,CAfM;;AAAM,OAAA,CAAA,UAAA,GAAU,UAAV","sourceRoot":"","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.programIds = exports.setProgramIds = exports.getStoreID = void 0;\r\nconst __1 = require(\"..\");\r\nconst utils_1 = require(\"../utils\");\r\nconst ids_1 = require(\"./ids\");\r\nconst getStoreID = async (storeOwnerAddress) => {\r\n    if (!storeOwnerAddress) {\r\n        return undefined;\r\n    }\r\n    console.log('Store owner', storeOwnerAddress, ids_1.METAPLEX_ID);\r\n    const programs = await (0, utils_1.findProgramAddress)([\r\n        Buffer.from('metaplex'),\r\n        (0, ids_1.toPublicKey)(ids_1.METAPLEX_ID).toBuffer(),\r\n        (0, ids_1.toPublicKey)(storeOwnerAddress).toBuffer(),\r\n    ], (0, ids_1.toPublicKey)(ids_1.METAPLEX_ID));\r\n    const storeAddress = programs[0];\r\n    return storeAddress;\r\n};\r\nexports.getStoreID = getStoreID;\r\nconst setProgramIds = async (store) => {\r\n    STORE = store ? (0, ids_1.toPublicKey)(store) : undefined;\r\n};\r\nexports.setProgramIds = setProgramIds;\r\nlet STORE;\r\nconst programIds = () => {\r\n    return {\r\n        token: ids_1.TOKEN_PROGRAM_ID,\r\n        associatedToken: ids_1.SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\r\n        bpf_upgrade_loader: ids_1.BPF_UPGRADE_LOADER_ID,\r\n        system: ids_1.SYSTEM,\r\n        metadata: ids_1.METADATA_PROGRAM_ID,\r\n        memo: ids_1.MEMO_ID,\r\n        vault: ids_1.VAULT_ID,\r\n        auction: ids_1.AUCTION_ID,\r\n        metaplex: ids_1.METAPLEX_ID,\r\n        pack_create: ids_1.PACK_CREATE_ID,\r\n        oracle: __1.ORACLE_ID,\r\n        store: STORE,\r\n    };\r\n};\r\nexports.programIds = programIds;\r\n//# sourceMappingURL=programIds.js.map"]},"metadata":{},"sourceType":"script"}