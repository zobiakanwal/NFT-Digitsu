{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"C:\\\\Users\\\\AHSAN PC\\\\Desktop\\\\digitsu\\\\gamp\\\\js\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\slicedToArray.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useThatState = void 0;\n\nvar react_1 = require(\"react\"); // Extends useState() hook with async getThatState getter which can be used to get state value in contexts (ex. async callbacks) where up to date state is not available\n\n\nfunction useThatState(initialState) {\n  var _ref = (0, react_1.useState)(initialState),\n      _ref2 = _slicedToArray(_ref, 2),\n      state = _ref2[0],\n      setState = _ref2[1];\n\n  var getThatState = function getThatState() {\n    return new Promise(function (resolve) {\n      // Use NOP setState call to retrieve current state value\n      setState(function (s) {\n        resolve(s);\n        return s;\n      });\n    });\n  };\n\n  return [state, setState, getThatState];\n}\n\nexports.useThatState = useThatState;","map":{"version":3,"sources":["../../../src/hooks/useThatState.ts"],"names":[],"mappings":";;;;;;;;;AAAA,IAAA,OAAA,GAAA,OAAA,CAAA,OAAA,CAAA,C,CAEA;;;AACA,SAAgB,YAAhB,CAAgC,YAAhC,EAA+C;AAC7C,aAA0B,CAAA,GAAA,OAAA,CAAA,QAAA,EAAY,YAAZ,CAA1B;AAAA;AAAA,MAAO,KAAP;AAAA,MAAc,QAAd;;AACA,MAAM,YAAY,GAAG,SAAf,YAAe;AAAA,WACnB,IAAI,OAAJ,CAAe,UAAA,OAAO,EAAG;AACvB;AACA,MAAA,QAAQ,CAAC,UAAA,CAAC,EAAG;AACX,QAAA,OAAO,CAAC,CAAD,CAAP;AACA,eAAO,CAAP;AACD,OAHO,CAAR;AAID,KAND,CADmB;AAAA,GAArB;;AASA,SAAO,CAAC,KAAD,EAAQ,QAAR,EAAkB,YAAlB,CAAP;AACD;;AAZD,OAAA,CAAA,YAAA,GAAA,YAAA","sourceRoot":"","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.useThatState = void 0;\r\nconst react_1 = require(\"react\");\r\n// Extends useState() hook with async getThatState getter which can be used to get state value in contexts (ex. async callbacks) where up to date state is not available\r\nfunction useThatState(initialState) {\r\n    const [state, setState] = (0, react_1.useState)(initialState);\r\n    const getThatState = () => new Promise(resolve => {\r\n        // Use NOP setState call to retrieve current state value\r\n        setState(s => {\r\n            resolve(s);\r\n            return s;\r\n        });\r\n    });\r\n    return [state, setState, getThatState];\r\n}\r\nexports.useThatState = useThatState;\r\n//# sourceMappingURL=useThatState.js.map"]},"metadata":{},"sourceType":"script"}