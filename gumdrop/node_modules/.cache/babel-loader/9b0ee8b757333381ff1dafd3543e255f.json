{"ast":null,"code":"import _slicedToArray from\"C:\\\\Users\\\\AHSAN PC\\\\Desktop\\\\digitsu\\\\gamp\\\\js\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\slicedToArray.js\";import _asyncToGenerator from\"C:\\\\Users\\\\AHSAN PC\\\\Desktop\\\\digitsu\\\\gamp\\\\js\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";import _regeneratorRuntime from\"C:\\\\Users\\\\AHSAN PC\\\\Desktop\\\\digitsu\\\\gamp\\\\js\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\";import*as anchor from'@project-serum/anchor';import{PublicKey}from'@solana/web3.js';import{AccountLayout,MintLayout,TOKEN_PROGRAM_ID}from'@solana/spl-token';import BN from'bn.js';import{CANDY_MACHINE_ID,SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,TOKEN_METADATA_PROGRAM_ID}from'./ids';export var getMintInfo=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(connection,mint){var mintKey,mintAccount,mintOwner,mintInfo;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;mintKey=new PublicKey(mint);_context.next=7;break;case 4:_context.prev=4;_context.t0=_context[\"catch\"](0);throw new Error(\"Invalid mint key \".concat(_context.t0));case 7:_context.next=9;return connection.getAccountInfo(mintKey);case 9:mintAccount=_context.sent;if(!(mintAccount===null)){_context.next=12;break;}throw new Error(\"Could not fetch mint\");case 12:if(mintAccount.owner.equals(TOKEN_PROGRAM_ID)){_context.next=15;break;}mintOwner=mintAccount.owner.toBase58();throw new Error(\"Invalid mint owner \".concat(mintOwner));case 15:if(!(mintAccount.data.length!==MintLayout.span)){_context.next=17;break;}throw new Error(\"Invalid mint size \".concat(mintAccount.data.length));case 17:mintInfo=MintLayout.decode(Buffer.from(mintAccount.data));return _context.abrupt(\"return\",{key:mintKey,info:mintInfo});case 19:case\"end\":return _context.stop();}}},_callee,null,[[0,4]]);}));return function getMintInfo(_x,_x2){return _ref.apply(this,arguments);};}();export var getCreatorTokenAccount=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(walletKey,connection,mintKey,totalClaim){var _yield$PublicKey$find,_yield$PublicKey$find2,creatorTokenKey,creatorTokenAccount,creatorTokenInfo;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return PublicKey.findProgramAddress([walletKey.toBuffer(),TOKEN_PROGRAM_ID.toBuffer(),mintKey.toBuffer()],SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID);case 2:_yield$PublicKey$find=_context2.sent;_yield$PublicKey$find2=_slicedToArray(_yield$PublicKey$find,1);creatorTokenKey=_yield$PublicKey$find2[0];_context2.next=7;return connection.getAccountInfo(creatorTokenKey);case 7:creatorTokenAccount=_context2.sent;if(!(creatorTokenAccount===null)){_context2.next=10;break;}throw new Error(\"Could not fetch creator token account\");case 10:if(!(creatorTokenAccount.data.length!==AccountLayout.span)){_context2.next=12;break;}throw new Error(\"Invalid token account size \".concat(creatorTokenAccount.data.length));case 12:creatorTokenInfo=AccountLayout.decode(Buffer.from(creatorTokenAccount.data));if(!(new BN(creatorTokenInfo.amount,8,'le').toNumber()<totalClaim)){_context2.next=15;break;}throw new Error(\"Creator token account does not have enough tokens\");case 15:return _context2.abrupt(\"return\",creatorTokenKey);case 16:case\"end\":return _context2.stop();}}},_callee2);}));return function getCreatorTokenAccount(_x3,_x4,_x5,_x6){return _ref2.apply(this,arguments);};}();export var fetchCoder=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(address,connection){return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.t0=anchor.Coder;_context3.next=3;return anchor.Program.fetchIdl(address,{connection:connection});case 3:_context3.t1=_context3.sent;return _context3.abrupt(\"return\",new _context3.t0(_context3.t1));case 5:case\"end\":return _context3.stop();}}},_callee3);}));return function fetchCoder(_x7,_x8){return _ref3.apply(this,arguments);};}();export var getCandyConfig=/*#__PURE__*/function(){var _ref4=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(connection,config){var configKey,configAccount;return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:_context4.prev=0;configKey=new PublicKey(config);_context4.next=7;break;case 4:_context4.prev=4;_context4.t0=_context4[\"catch\"](0);throw new Error(\"Invalid config key \".concat(_context4.t0));case 7:_context4.next=9;return connection.getAccountInfo(configKey);case 9:configAccount=_context4.sent;if(!(configAccount===null)){_context4.next=12;break;}throw new Error(\"Could not fetch config\");case 12:if(configAccount.owner.equals(CANDY_MACHINE_ID)){_context4.next=14;break;}throw new Error(\"Invalid config owner \".concat(configAccount.owner.toBase58()));case 14:return _context4.abrupt(\"return\",configKey);case 15:case\"end\":return _context4.stop();}}},_callee4,null,[[0,4]]);}));return function getCandyConfig(_x9,_x10){return _ref4.apply(this,arguments);};}();export var getCandyMachineAddress=/*#__PURE__*/function(){var _ref5=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(config,uuid){return _regeneratorRuntime.wrap(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:_context5.next=2;return PublicKey.findProgramAddress([Buffer.from('candy_machine'),config.toBuffer(),Buffer.from(uuid)],CANDY_MACHINE_ID);case 2:return _context5.abrupt(\"return\",_context5.sent);case 3:case\"end\":return _context5.stop();}}},_callee5);}));return function getCandyMachineAddress(_x11,_x12){return _ref5.apply(this,arguments);};}();export var getCandyMachine=/*#__PURE__*/function(){var _ref6=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(connection,candyMachineKey){var candyMachineCoder,candyMachineAccount;return _regeneratorRuntime.wrap(function _callee6$(_context6){while(1){switch(_context6.prev=_context6.next){case 0:_context6.next=2;return fetchCoder(CANDY_MACHINE_ID,connection);case 2:candyMachineCoder=_context6.sent;if(!(candyMachineCoder===null)){_context6.next=5;break;}throw new Error(\"Could not fetch candy machine IDL\");case 5:_context6.next=7;return connection.getAccountInfo(candyMachineKey);case 7:candyMachineAccount=_context6.sent;if(!(candyMachineAccount===null)){_context6.next=10;break;}throw new Error(\"Could not fetch candy machine\");case 10:return _context6.abrupt(\"return\",candyMachineCoder.accounts.decode('CandyMachine',candyMachineAccount.data));case 11:case\"end\":return _context6.stop();}}},_callee6);}));return function getCandyMachine(_x13,_x14){return _ref6.apply(this,arguments);};}();export var getMetadata=/*#__PURE__*/function(){var _ref7=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7(mint){return _regeneratorRuntime.wrap(function _callee7$(_context7){while(1){switch(_context7.prev=_context7.next){case 0:_context7.next=2;return PublicKey.findProgramAddress([Buffer.from('metadata'),TOKEN_METADATA_PROGRAM_ID.toBuffer(),mint.toBuffer()],TOKEN_METADATA_PROGRAM_ID);case 2:return _context7.abrupt(\"return\",_context7.sent[0]);case 3:case\"end\":return _context7.stop();}}},_callee7);}));return function getMetadata(_x15){return _ref7.apply(this,arguments);};}();export var getEdition=/*#__PURE__*/function(){var _ref8=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee8(mint){return _regeneratorRuntime.wrap(function _callee8$(_context8){while(1){switch(_context8.prev=_context8.next){case 0:_context8.next=2;return PublicKey.findProgramAddress([Buffer.from('metadata'),TOKEN_METADATA_PROGRAM_ID.toBuffer(),mint.toBuffer(),Buffer.from('edition')],TOKEN_METADATA_PROGRAM_ID);case 2:return _context8.abrupt(\"return\",_context8.sent[0]);case 3:case\"end\":return _context8.stop();}}},_callee8);}));return function getEdition(_x16){return _ref8.apply(this,arguments);};}();export var getEditionMarkerPda=/*#__PURE__*/function(){var _ref9=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee9(mint,edition){var editionPageNumber;return _regeneratorRuntime.wrap(function _callee9$(_context9){while(1){switch(_context9.prev=_context9.next){case 0:// editions are divided into pages of 31-bytes (248-bits) for more efficient\n// packing to check if an edition is occupied. The offset is determined from\n// the edition passed in through data\neditionPageNumber=edition.div(new BN(248)).toNumber();_context9.next=3;return PublicKey.findProgramAddress([Buffer.from('metadata'),TOKEN_METADATA_PROGRAM_ID.toBuffer(),mint.toBuffer(),Buffer.from('edition'),Buffer.from(String(editionPageNumber))],TOKEN_METADATA_PROGRAM_ID);case 3:return _context9.abrupt(\"return\",_context9.sent[0]);case 4:case\"end\":return _context9.stop();}}},_callee9);}));return function getEditionMarkerPda(_x17,_x18){return _ref9.apply(this,arguments);};}();","map":{"version":3,"sources":["C:/Users/AHSAN PC/Desktop/digitsu/gamp/js/packages/gumdrop/src/utils/accounts.ts"],"names":["anchor","PublicKey","AccountLayout","MintLayout","TOKEN_PROGRAM_ID","BN","CANDY_MACHINE_ID","SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","TOKEN_METADATA_PROGRAM_ID","getMintInfo","connection","mint","mintKey","Error","getAccountInfo","mintAccount","owner","equals","mintOwner","toBase58","data","length","span","mintInfo","decode","Buffer","from","key","info","getCreatorTokenAccount","walletKey","totalClaim","findProgramAddress","toBuffer","creatorTokenKey","creatorTokenAccount","creatorTokenInfo","amount","toNumber","fetchCoder","address","Coder","Program","fetchIdl","getCandyConfig","config","configKey","configAccount","getCandyMachineAddress","uuid","getCandyMachine","candyMachineKey","candyMachineCoder","candyMachineAccount","accounts","getMetadata","getEdition","getEditionMarkerPda","edition","editionPageNumber","div","String"],"mappings":"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","sourcesContent":["import * as anchor from '@project-serum/anchor';\r\nimport { Connection, PublicKey } from '@solana/web3.js';\r\nimport {\r\n  AccountLayout,\r\n  MintInfo,\r\n  MintLayout,\r\n  TOKEN_PROGRAM_ID,\r\n} from '@solana/spl-token';\r\nimport BN from 'bn.js';\r\n\r\nimport {\r\n  CANDY_MACHINE_ID,\r\n  SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\r\n  TOKEN_METADATA_PROGRAM_ID,\r\n} from './ids';\r\n\r\nexport const getMintInfo = async (\r\n  connection: Connection,\r\n  mint: string,\r\n): Promise<{ key: PublicKey; info: MintInfo }> => {\r\n  let mintKey: PublicKey;\r\n  try {\r\n    mintKey = new PublicKey(mint);\r\n  } catch (err) {\r\n    throw new Error(`Invalid mint key ${err}`);\r\n  }\r\n  const mintAccount = await connection.getAccountInfo(mintKey);\r\n  if (mintAccount === null) {\r\n    throw new Error(`Could not fetch mint`);\r\n  }\r\n  if (!mintAccount.owner.equals(TOKEN_PROGRAM_ID)) {\r\n    const mintOwner = mintAccount.owner.toBase58();\r\n    throw new Error(`Invalid mint owner ${mintOwner}`);\r\n  }\r\n  if (mintAccount.data.length !== MintLayout.span) {\r\n    throw new Error(`Invalid mint size ${mintAccount.data.length}`);\r\n  }\r\n  const mintInfo = MintLayout.decode(Buffer.from(mintAccount.data));\r\n  return {\r\n    key: mintKey,\r\n    info: mintInfo,\r\n  };\r\n};\r\n\r\nexport const getCreatorTokenAccount = async (\r\n  walletKey: PublicKey,\r\n  connection: Connection,\r\n  mintKey: PublicKey,\r\n  totalClaim: number,\r\n) => {\r\n  const [creatorTokenKey] = await PublicKey.findProgramAddress(\r\n    [walletKey.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mintKey.toBuffer()],\r\n    SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\r\n  );\r\n  const creatorTokenAccount = await connection.getAccountInfo(creatorTokenKey);\r\n  if (creatorTokenAccount === null) {\r\n    throw new Error(`Could not fetch creator token account`);\r\n  }\r\n  if (creatorTokenAccount.data.length !== AccountLayout.span) {\r\n    throw new Error(\r\n      `Invalid token account size ${creatorTokenAccount.data.length}`,\r\n    );\r\n  }\r\n  const creatorTokenInfo = AccountLayout.decode(\r\n    Buffer.from(creatorTokenAccount.data),\r\n  );\r\n  if (new BN(creatorTokenInfo.amount, 8, 'le').toNumber() < totalClaim) {\r\n    throw new Error(`Creator token account does not have enough tokens`);\r\n  }\r\n  return creatorTokenKey;\r\n};\r\n\r\nexport const fetchCoder = async (\r\n  address: anchor.Address,\r\n  connection: Connection,\r\n): Promise<anchor.Coder | null> => {\r\n  return new anchor.Coder(\r\n    await anchor.Program.fetchIdl(address, {\r\n      connection: connection,\r\n    } as anchor.Provider),\r\n  );\r\n};\r\n\r\nexport const getCandyConfig = async (\r\n  connection: Connection,\r\n  config: string,\r\n): Promise<PublicKey> => {\r\n  let configKey: PublicKey;\r\n  try {\r\n    configKey = new PublicKey(config);\r\n  } catch (err) {\r\n    throw new Error(`Invalid config key ${err}`);\r\n  }\r\n  const configAccount = await connection.getAccountInfo(configKey);\r\n  if (configAccount === null) {\r\n    throw new Error(`Could not fetch config`);\r\n  }\r\n  if (!configAccount.owner.equals(CANDY_MACHINE_ID)) {\r\n    throw new Error(`Invalid config owner ${configAccount.owner.toBase58()}`);\r\n  }\r\n  return configKey;\r\n};\r\n\r\nexport const getCandyMachineAddress = async (\r\n  config: PublicKey,\r\n  uuid: string,\r\n) => {\r\n  return await PublicKey.findProgramAddress(\r\n    [Buffer.from('candy_machine'), config.toBuffer(), Buffer.from(uuid)],\r\n    CANDY_MACHINE_ID,\r\n  );\r\n};\r\n\r\nexport const getCandyMachine = async (\r\n  connection: Connection,\r\n  candyMachineKey: PublicKey,\r\n) => {\r\n  const candyMachineCoder = await fetchCoder(CANDY_MACHINE_ID, connection);\r\n  if (candyMachineCoder === null) {\r\n    throw new Error(`Could not fetch candy machine IDL`);\r\n  }\r\n  const candyMachineAccount = await connection.getAccountInfo(candyMachineKey);\r\n  if (candyMachineAccount === null) {\r\n    throw new Error(`Could not fetch candy machine`);\r\n  }\r\n  return candyMachineCoder.accounts.decode(\r\n    'CandyMachine',\r\n    candyMachineAccount.data,\r\n  );\r\n};\r\n\r\nexport const getMetadata = async (mint: PublicKey): Promise<PublicKey> => {\r\n  return (\r\n    await PublicKey.findProgramAddress(\r\n      [\r\n        Buffer.from('metadata'),\r\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\r\n        mint.toBuffer(),\r\n      ],\r\n      TOKEN_METADATA_PROGRAM_ID,\r\n    )\r\n  )[0];\r\n};\r\n\r\nexport const getEdition = async (mint: PublicKey): Promise<PublicKey> => {\r\n  return (\r\n    await PublicKey.findProgramAddress(\r\n      [\r\n        Buffer.from('metadata'),\r\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\r\n        mint.toBuffer(),\r\n        Buffer.from('edition'),\r\n      ],\r\n      TOKEN_METADATA_PROGRAM_ID,\r\n    )\r\n  )[0];\r\n};\r\n\r\nexport const getEditionMarkerPda = async (\r\n  mint: PublicKey,\r\n  edition: BN,\r\n): Promise<PublicKey> => {\r\n  // editions are divided into pages of 31-bytes (248-bits) for more efficient\r\n  // packing to check if an edition is occupied. The offset is determined from\r\n  // the edition passed in through data\r\n  const editionPageNumber = edition.div(new BN(248)).toNumber();\r\n\r\n  return (\r\n    await PublicKey.findProgramAddress(\r\n      [\r\n        Buffer.from('metadata'),\r\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\r\n        mint.toBuffer(),\r\n        Buffer.from('edition'),\r\n        Buffer.from(String(editionPageNumber)),\r\n      ],\r\n      TOKEN_METADATA_PROGRAM_ID,\r\n    )\r\n  )[0];\r\n};\r\n"]},"metadata":{},"sourceType":"module"}