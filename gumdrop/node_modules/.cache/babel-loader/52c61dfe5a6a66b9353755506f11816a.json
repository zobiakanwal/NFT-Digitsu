{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.findOrCreateAccountByMint = exports.ensureWrappedAccount = exports.createTokenAccount = exports.createMint = exports.createAssociatedTokenAccountInstruction = exports.createUninitializedAccount = exports.createUninitializedMint = exports.createTempMemoryAccount = exports.DEFAULT_TEMP_MEM_SPACE = exports.ensureSplAccount = void 0;\n\nvar spl_token_1 = require(\"@solana/spl-token\");\n\nvar web3_js_1 = require(\"@solana/web3.js\");\n\nvar ids_1 = require(\"../utils/ids\");\n\nvar programIds_1 = require(\"../utils/programIds\");\n\nvar cache_1 = require(\"../contexts/accounts/cache\");\n\nvar parsesrs_1 = require(\"../contexts/accounts/parsesrs\");\n\nfunction ensureSplAccount(instructions, cleanupInstructions, toCheck, payer, amount, signers) {\n  if (!toCheck.info.isNative) {\n    return toCheck.pubkey;\n  }\n\n  var account = createUninitializedAccount(instructions, payer, amount, signers);\n  instructions.push(spl_token_1.Token.createInitAccountInstruction(ids_1.TOKEN_PROGRAM_ID, ids_1.WRAPPED_SOL_MINT, account, payer));\n  cleanupInstructions.push(spl_token_1.Token.createCloseAccountInstruction(ids_1.TOKEN_PROGRAM_ID, account, payer, payer, []));\n  return account;\n}\n\nexports.ensureSplAccount = ensureSplAccount;\nexports.DEFAULT_TEMP_MEM_SPACE = 65548;\n\nfunction createTempMemoryAccount(instructions, payer, signers, owner) {\n  var space = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : exports.DEFAULT_TEMP_MEM_SPACE;\n  var account = web3_js_1.Keypair.generate();\n  instructions.push(web3_js_1.SystemProgram.createAccount({\n    fromPubkey: payer,\n    newAccountPubkey: account.publicKey,\n    // 0 will evict/close account since it cannot pay rent\n    lamports: 0,\n    space: space,\n    programId: owner\n  }));\n  signers.push(account);\n  return account.publicKey;\n}\n\nexports.createTempMemoryAccount = createTempMemoryAccount;\n\nfunction createUninitializedMint(instructions, payer, amount, signers) {\n  var account = web3_js_1.Keypair.generate();\n  instructions.push(web3_js_1.SystemProgram.createAccount({\n    fromPubkey: payer,\n    newAccountPubkey: account.publicKey,\n    lamports: amount,\n    space: spl_token_1.MintLayout.span,\n    programId: ids_1.TOKEN_PROGRAM_ID\n  }));\n  signers.push(account);\n  return account.publicKey;\n}\n\nexports.createUninitializedMint = createUninitializedMint;\n\nfunction createUninitializedAccount(instructions, payer, amount, signers) {\n  var account = web3_js_1.Keypair.generate();\n  instructions.push(web3_js_1.SystemProgram.createAccount({\n    fromPubkey: payer,\n    newAccountPubkey: account.publicKey,\n    lamports: amount,\n    space: spl_token_1.AccountLayout.span,\n    programId: ids_1.TOKEN_PROGRAM_ID\n  }));\n  signers.push(account);\n  return account.publicKey;\n}\n\nexports.createUninitializedAccount = createUninitializedAccount;\n\nfunction createAssociatedTokenAccountInstruction(instructions, associatedTokenAddress, payer, walletAddress, splTokenMintAddress) {\n  var keys = [{\n    pubkey: payer,\n    isSigner: true,\n    isWritable: true\n  }, {\n    pubkey: associatedTokenAddress,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: walletAddress,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: splTokenMintAddress,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: web3_js_1.SystemProgram.programId,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: ids_1.TOKEN_PROGRAM_ID,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: web3_js_1.SYSVAR_RENT_PUBKEY,\n    isSigner: false,\n    isWritable: false\n  }];\n  instructions.push(new web3_js_1.TransactionInstruction({\n    keys: keys,\n    programId: ids_1.SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    data: Buffer.from([])\n  }));\n}\n\nexports.createAssociatedTokenAccountInstruction = createAssociatedTokenAccountInstruction;\n\nfunction createMint(instructions, payer, mintRentExempt, decimals, owner, freezeAuthority, signers) {\n  var account = createUninitializedMint(instructions, payer, mintRentExempt, signers);\n  instructions.push(spl_token_1.Token.createInitMintInstruction(ids_1.TOKEN_PROGRAM_ID, account, decimals, owner, freezeAuthority));\n  return account;\n}\n\nexports.createMint = createMint;\n\nfunction createTokenAccount(instructions, payer, accountRentExempt, mint, owner, signers) {\n  var account = createUninitializedAccount(instructions, payer, accountRentExempt, signers);\n  instructions.push(spl_token_1.Token.createInitAccountInstruction(ids_1.TOKEN_PROGRAM_ID, mint, account, owner));\n  return account;\n}\n\nexports.createTokenAccount = createTokenAccount;\n\nfunction ensureWrappedAccount(instructions, cleanupInstructions, toCheck, payer, amount, signers) {\n  if (toCheck && !toCheck.info.isNative) {\n    return toCheck.pubkey;\n  }\n\n  var TOKEN_PROGRAM_ID = (0, programIds_1.programIds)().token;\n  var account = web3_js_1.Keypair.generate();\n  instructions.push(web3_js_1.SystemProgram.createAccount({\n    fromPubkey: payer,\n    newAccountPubkey: account.publicKey,\n    lamports: amount,\n    space: spl_token_1.AccountLayout.span,\n    programId: TOKEN_PROGRAM_ID\n  }));\n  instructions.push(spl_token_1.Token.createInitAccountInstruction(TOKEN_PROGRAM_ID, ids_1.WRAPPED_SOL_MINT, account.publicKey, payer));\n  cleanupInstructions.push(spl_token_1.Token.createCloseAccountInstruction(TOKEN_PROGRAM_ID, account.publicKey, payer, payer, []));\n  signers.push(account);\n  return account.publicKey.toBase58();\n}\n\nexports.ensureWrappedAccount = ensureWrappedAccount; // TODO: check if one of to accounts needs to be native sol ... if yes unwrap it ...\n\nfunction findOrCreateAccountByMint(payer, owner, instructions, cleanupInstructions, accountRentExempt, mint, // use to identify same type\nsigners, excluded) {\n  var accountToFind = mint.toBase58();\n  var ownerKey = owner.toBase58();\n  var account = cache_1.cache.byParser(parsesrs_1.TokenAccountParser).map(function (id) {\n    return cache_1.cache.get(id);\n  }).find(function (acc) {\n    return acc !== undefined && acc.info.mint.toBase58() === accountToFind && acc.info.owner.toBase58() === ownerKey && (excluded === undefined || !excluded.has(acc.pubkey));\n  });\n  var isWrappedSol = accountToFind === ids_1.WRAPPED_SOL_MINT.toBase58();\n  var toAccount;\n\n  if (account && !isWrappedSol) {\n    toAccount = new web3_js_1.PublicKey(account.pubkey);\n  } else {\n    // creating depositor pool account\n    toAccount = createTokenAccount(instructions, payer, accountRentExempt, mint, owner, signers);\n\n    if (isWrappedSol) {\n      cleanupInstructions.push(spl_token_1.Token.createCloseAccountInstruction(ids_1.TOKEN_PROGRAM_ID, toAccount, payer, payer, []));\n    }\n  }\n\n  return toAccount;\n}\n\nexports.findOrCreateAccountByMint = findOrCreateAccountByMint;","map":{"version":3,"sources":["../../../src/actions/account.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.findOrCreateAccountByMint = exports.ensureWrappedAccount = exports.createTokenAccount = exports.createMint = exports.createAssociatedTokenAccountInstruction = exports.createUninitializedAccount = exports.createUninitializedMint = exports.createTempMemoryAccount = exports.DEFAULT_TEMP_MEM_SPACE = exports.ensureSplAccount = void 0;\r\nconst spl_token_1 = require(\"@solana/spl-token\");\r\nconst web3_js_1 = require(\"@solana/web3.js\");\r\nconst ids_1 = require(\"../utils/ids\");\r\nconst programIds_1 = require(\"../utils/programIds\");\r\nconst cache_1 = require(\"../contexts/accounts/cache\");\r\nconst parsesrs_1 = require(\"../contexts/accounts/parsesrs\");\r\nfunction ensureSplAccount(instructions, cleanupInstructions, toCheck, payer, amount, signers) {\r\n    if (!toCheck.info.isNative) {\r\n        return toCheck.pubkey;\r\n    }\r\n    const account = createUninitializedAccount(instructions, payer, amount, signers);\r\n    instructions.push(spl_token_1.Token.createInitAccountInstruction(ids_1.TOKEN_PROGRAM_ID, ids_1.WRAPPED_SOL_MINT, account, payer));\r\n    cleanupInstructions.push(spl_token_1.Token.createCloseAccountInstruction(ids_1.TOKEN_PROGRAM_ID, account, payer, payer, []));\r\n    return account;\r\n}\r\nexports.ensureSplAccount = ensureSplAccount;\r\nexports.DEFAULT_TEMP_MEM_SPACE = 65548;\r\nfunction createTempMemoryAccount(instructions, payer, signers, owner, space = exports.DEFAULT_TEMP_MEM_SPACE) {\r\n    const account = web3_js_1.Keypair.generate();\r\n    instructions.push(web3_js_1.SystemProgram.createAccount({\r\n        fromPubkey: payer,\r\n        newAccountPubkey: account.publicKey,\r\n        // 0 will evict/close account since it cannot pay rent\r\n        lamports: 0,\r\n        space: space,\r\n        programId: owner,\r\n    }));\r\n    signers.push(account);\r\n    return account.publicKey;\r\n}\r\nexports.createTempMemoryAccount = createTempMemoryAccount;\r\nfunction createUninitializedMint(instructions, payer, amount, signers) {\r\n    const account = web3_js_1.Keypair.generate();\r\n    instructions.push(web3_js_1.SystemProgram.createAccount({\r\n        fromPubkey: payer,\r\n        newAccountPubkey: account.publicKey,\r\n        lamports: amount,\r\n        space: spl_token_1.MintLayout.span,\r\n        programId: ids_1.TOKEN_PROGRAM_ID,\r\n    }));\r\n    signers.push(account);\r\n    return account.publicKey;\r\n}\r\nexports.createUninitializedMint = createUninitializedMint;\r\nfunction createUninitializedAccount(instructions, payer, amount, signers) {\r\n    const account = web3_js_1.Keypair.generate();\r\n    instructions.push(web3_js_1.SystemProgram.createAccount({\r\n        fromPubkey: payer,\r\n        newAccountPubkey: account.publicKey,\r\n        lamports: amount,\r\n        space: spl_token_1.AccountLayout.span,\r\n        programId: ids_1.TOKEN_PROGRAM_ID,\r\n    }));\r\n    signers.push(account);\r\n    return account.publicKey;\r\n}\r\nexports.createUninitializedAccount = createUninitializedAccount;\r\nfunction createAssociatedTokenAccountInstruction(instructions, associatedTokenAddress, payer, walletAddress, splTokenMintAddress) {\r\n    const keys = [\r\n        {\r\n            pubkey: payer,\r\n            isSigner: true,\r\n            isWritable: true,\r\n        },\r\n        {\r\n            pubkey: associatedTokenAddress,\r\n            isSigner: false,\r\n            isWritable: true,\r\n        },\r\n        {\r\n            pubkey: walletAddress,\r\n            isSigner: false,\r\n            isWritable: false,\r\n        },\r\n        {\r\n            pubkey: splTokenMintAddress,\r\n            isSigner: false,\r\n            isWritable: false,\r\n        },\r\n        {\r\n            pubkey: web3_js_1.SystemProgram.programId,\r\n            isSigner: false,\r\n            isWritable: false,\r\n        },\r\n        {\r\n            pubkey: ids_1.TOKEN_PROGRAM_ID,\r\n            isSigner: false,\r\n            isWritable: false,\r\n        },\r\n        {\r\n            pubkey: web3_js_1.SYSVAR_RENT_PUBKEY,\r\n            isSigner: false,\r\n            isWritable: false,\r\n        },\r\n    ];\r\n    instructions.push(new web3_js_1.TransactionInstruction({\r\n        keys,\r\n        programId: ids_1.SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\r\n        data: Buffer.from([]),\r\n    }));\r\n}\r\nexports.createAssociatedTokenAccountInstruction = createAssociatedTokenAccountInstruction;\r\nfunction createMint(instructions, payer, mintRentExempt, decimals, owner, freezeAuthority, signers) {\r\n    const account = createUninitializedMint(instructions, payer, mintRentExempt, signers);\r\n    instructions.push(spl_token_1.Token.createInitMintInstruction(ids_1.TOKEN_PROGRAM_ID, account, decimals, owner, freezeAuthority));\r\n    return account;\r\n}\r\nexports.createMint = createMint;\r\nfunction createTokenAccount(instructions, payer, accountRentExempt, mint, owner, signers) {\r\n    const account = createUninitializedAccount(instructions, payer, accountRentExempt, signers);\r\n    instructions.push(spl_token_1.Token.createInitAccountInstruction(ids_1.TOKEN_PROGRAM_ID, mint, account, owner));\r\n    return account;\r\n}\r\nexports.createTokenAccount = createTokenAccount;\r\nfunction ensureWrappedAccount(instructions, cleanupInstructions, toCheck, payer, amount, signers) {\r\n    if (toCheck && !toCheck.info.isNative) {\r\n        return toCheck.pubkey;\r\n    }\r\n    const TOKEN_PROGRAM_ID = (0, programIds_1.programIds)().token;\r\n    const account = web3_js_1.Keypair.generate();\r\n    instructions.push(web3_js_1.SystemProgram.createAccount({\r\n        fromPubkey: payer,\r\n        newAccountPubkey: account.publicKey,\r\n        lamports: amount,\r\n        space: spl_token_1.AccountLayout.span,\r\n        programId: TOKEN_PROGRAM_ID,\r\n    }));\r\n    instructions.push(spl_token_1.Token.createInitAccountInstruction(TOKEN_PROGRAM_ID, ids_1.WRAPPED_SOL_MINT, account.publicKey, payer));\r\n    cleanupInstructions.push(spl_token_1.Token.createCloseAccountInstruction(TOKEN_PROGRAM_ID, account.publicKey, payer, payer, []));\r\n    signers.push(account);\r\n    return account.publicKey.toBase58();\r\n}\r\nexports.ensureWrappedAccount = ensureWrappedAccount;\r\n// TODO: check if one of to accounts needs to be native sol ... if yes unwrap it ...\r\nfunction findOrCreateAccountByMint(payer, owner, instructions, cleanupInstructions, accountRentExempt, mint, // use to identify same type\r\nsigners, excluded) {\r\n    const accountToFind = mint.toBase58();\r\n    const ownerKey = owner.toBase58();\r\n    const account = cache_1.cache\r\n        .byParser(parsesrs_1.TokenAccountParser)\r\n        .map(id => cache_1.cache.get(id))\r\n        .find(acc => acc !== undefined &&\r\n        acc.info.mint.toBase58() === accountToFind &&\r\n        acc.info.owner.toBase58() === ownerKey &&\r\n        (excluded === undefined || !excluded.has(acc.pubkey)));\r\n    const isWrappedSol = accountToFind === ids_1.WRAPPED_SOL_MINT.toBase58();\r\n    let toAccount;\r\n    if (account && !isWrappedSol) {\r\n        toAccount = new web3_js_1.PublicKey(account.pubkey);\r\n    }\r\n    else {\r\n        // creating depositor pool account\r\n        toAccount = createTokenAccount(instructions, payer, accountRentExempt, mint, owner, signers);\r\n        if (isWrappedSol) {\r\n            cleanupInstructions.push(spl_token_1.Token.createCloseAccountInstruction(ids_1.TOKEN_PROGRAM_ID, toAccount, payer, payer, []));\r\n        }\r\n    }\r\n    return toAccount;\r\n}\r\nexports.findOrCreateAccountByMint = findOrCreateAccountByMint;\r\n//# sourceMappingURL=account.js.map"]},"metadata":{},"sourceType":"script"}