{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.processVaultData = void 0;\n\nvar actions_1 = require(\"../../actions\");\n\nvar utils_1 = require(\"../../utils\");\n\nvar processVaultData = function processVaultData(_ref, setter) {\n  var account = _ref.account,\n      pubkey = _ref.pubkey;\n  if (!isVaultAccount(account)) return;\n\n  try {\n    if (isSafetyDepositBoxV1Account(account)) {\n      var safetyDeposit = (0, actions_1.decodeSafetyDeposit)(account.data);\n      var parsedAccount = {\n        pubkey: pubkey,\n        account: account,\n        info: safetyDeposit\n      };\n      setter('safetyDepositBoxesByVaultAndIndex', safetyDeposit.vault + '-' + safetyDeposit.order, parsedAccount);\n    }\n\n    if (isVaultV1Account(account)) {\n      var vault = (0, actions_1.decodeVault)(account.data);\n      var _parsedAccount = {\n        pubkey: pubkey,\n        account: account,\n        info: vault\n      };\n      setter('vaults', pubkey, _parsedAccount);\n    }\n  } catch (_unused) {// ignore errors\n    // add type as first byte for easier deserialization\n  }\n};\n\nexports.processVaultData = processVaultData;\n\nvar isVaultAccount = function isVaultAccount(account) {\n  return account && (0, utils_1.pubkeyToString)(account.owner) === utils_1.VAULT_ID;\n};\n\nvar isSafetyDepositBoxV1Account = function isSafetyDepositBoxV1Account(account) {\n  return account.data[0] === actions_1.VaultKey.SafetyDepositBoxV1;\n};\n\nvar isVaultV1Account = function isVaultV1Account(account) {\n  return account.data[0] === actions_1.VaultKey.VaultV1;\n};","map":{"version":3,"sources":["../../../../src/contexts/meta/processVaultData.ts"],"names":[],"mappings":";;;;;;;AACA,IAAA,SAAA,GAAA,OAAA,CAAA,eAAA,CAAA;;AAOA,IAAA,OAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;AAIO,IAAM,gBAAgB,GAAwB,SAAxC,gBAAwC,OAEnD,MAFmD,EAGjD;AAAA,MAFA,OAEA,QAFA,OAEA;AAAA,MAFS,MAET,QAFS,MAET;AACF,MAAI,CAAC,cAAc,CAAC,OAAD,CAAnB,EAA8B;;AAE9B,MAAI;AACF,QAAI,2BAA2B,CAAC,OAAD,CAA/B,EAA0C;AACxC,UAAM,aAAa,GAAG,CAAA,GAAA,SAAA,CAAA,mBAAA,EAAoB,OAAO,CAAC,IAA5B,CAAtB;AACA,UAAM,aAAa,GAAoC;AACrD,QAAA,MAAM,EAAN,MADqD;AAErD,QAAA,OAAO,EAAE,OAF4C;AAGrD,QAAA,IAAI,EAAE;AAH+C,OAAvD;AAKA,MAAA,MAAM,CACJ,mCADI,EAEJ,aAAa,CAAC,KAAd,GAAsB,GAAtB,GAA4B,aAAa,CAAC,KAFtC,EAGJ,aAHI,CAAN;AAKD;;AACD,QAAI,gBAAgB,CAAC,OAAD,CAApB,EAA+B;AAC7B,UAAM,KAAK,GAAG,CAAA,GAAA,SAAA,CAAA,WAAA,EAAY,OAAO,CAAC,IAApB,CAAd;AACA,UAAM,cAAa,GAAyB;AAC1C,QAAA,MAAM,EAAN,MAD0C;AAE1C,QAAA,OAAO,EAAE,OAFiC;AAG1C,QAAA,IAAI,EAAE;AAHoC,OAA5C;AAMA,MAAA,MAAM,CAAC,QAAD,EAAW,MAAX,EAAmB,cAAnB,CAAN;AACD;AACF,GAxBD,CAwBE,gBAAM,CACN;AACA;AACD;AACF,CAlCM;;AAAM,OAAA,CAAA,gBAAA,GAAgB,gBAAhB;;AAoCb,IAAM,cAAc,GAAG,SAAjB,cAAiB,CAAC,OAAD;AAAA,SACrB,OAAO,IAAI,CAAA,GAAA,OAAA,CAAA,cAAA,EAAe,OAAO,CAAC,KAAvB,MAAkC,OAAA,CAAA,QADxB;AAAA,CAAvB;;AAGA,IAAM,2BAA2B,GAAG,SAA9B,2BAA8B,CAAC,OAAD;AAAA,SAClC,OAAO,CAAC,IAAR,CAAa,CAAb,MAAoB,SAAA,CAAA,QAAA,CAAS,kBADK;AAAA,CAApC;;AAGA,IAAM,gBAAgB,GAAG,SAAnB,gBAAmB,CAAC,OAAD;AAAA,SACvB,OAAO,CAAC,IAAR,CAAa,CAAb,MAAoB,SAAA,CAAA,QAAA,CAAS,OADN;AAAA,CAAzB","sourceRoot":"","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.processVaultData = void 0;\r\nconst actions_1 = require(\"../../actions\");\r\nconst utils_1 = require(\"../../utils\");\r\nconst processVaultData = ({ account, pubkey }, setter) => {\r\n    if (!isVaultAccount(account))\r\n        return;\r\n    try {\r\n        if (isSafetyDepositBoxV1Account(account)) {\r\n            const safetyDeposit = (0, actions_1.decodeSafetyDeposit)(account.data);\r\n            const parsedAccount = {\r\n                pubkey,\r\n                account: account,\r\n                info: safetyDeposit,\r\n            };\r\n            setter('safetyDepositBoxesByVaultAndIndex', safetyDeposit.vault + '-' + safetyDeposit.order, parsedAccount);\r\n        }\r\n        if (isVaultV1Account(account)) {\r\n            const vault = (0, actions_1.decodeVault)(account.data);\r\n            const parsedAccount = {\r\n                pubkey,\r\n                account: account,\r\n                info: vault,\r\n            };\r\n            setter('vaults', pubkey, parsedAccount);\r\n        }\r\n    }\r\n    catch {\r\n        // ignore errors\r\n        // add type as first byte for easier deserialization\r\n    }\r\n};\r\nexports.processVaultData = processVaultData;\r\nconst isVaultAccount = (account) => account && (0, utils_1.pubkeyToString)(account.owner) === utils_1.VAULT_ID;\r\nconst isSafetyDepositBoxV1Account = (account) => account.data[0] === actions_1.VaultKey.SafetyDepositBoxV1;\r\nconst isVaultV1Account = (account) => account.data[0] === actions_1.VaultKey.VaultV1;\r\n//# sourceMappingURL=processVaultData.js.map"]},"metadata":{},"sourceType":"script"}