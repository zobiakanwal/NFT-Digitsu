{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { getHostnameFromVariants } from \"./getHostnameFromVariants\";\nimport { getResolvedHostname } from \"./getResolvedHostname\";\nimport { getResolvedPartition } from \"./getResolvedPartition\";\nimport { getResolvedSigningRegion } from \"./getResolvedSigningRegion\";\nexport var getRegionInfo = function getRegionInfo(region, _a) {\n  var _b, _c, _d, _e, _f, _g;\n\n  var _h = _a.useFipsEndpoint,\n      useFipsEndpoint = _h === void 0 ? false : _h,\n      _j = _a.useDualstackEndpoint,\n      useDualstackEndpoint = _j === void 0 ? false : _j,\n      signingService = _a.signingService,\n      regionHash = _a.regionHash,\n      partitionHash = _a.partitionHash;\n  var partition = getResolvedPartition(region, {\n    partitionHash: partitionHash\n  });\n  var resolvedRegion = region in regionHash ? region : (_c = (_b = partitionHash[partition]) === null || _b === void 0 ? void 0 : _b.endpoint) !== null && _c !== void 0 ? _c : region;\n  var hostnameOptions = {\n    useFipsEndpoint: useFipsEndpoint,\n    useDualstackEndpoint: useDualstackEndpoint\n  };\n  var regionHostname = getHostnameFromVariants((_d = regionHash[resolvedRegion]) === null || _d === void 0 ? void 0 : _d.variants, hostnameOptions);\n  var partitionHostname = getHostnameFromVariants((_e = partitionHash[partition]) === null || _e === void 0 ? void 0 : _e.variants, hostnameOptions);\n  var hostname = getResolvedHostname(resolvedRegion, {\n    regionHostname: regionHostname,\n    partitionHostname: partitionHostname\n  });\n\n  if (hostname === undefined) {\n    throw new Error(\"Endpoint resolution failed for: \" + {\n      resolvedRegion: resolvedRegion,\n      useFipsEndpoint: useFipsEndpoint,\n      useDualstackEndpoint: useDualstackEndpoint\n    });\n  }\n\n  var signingRegion = getResolvedSigningRegion(hostname, {\n    signingRegion: (_f = regionHash[resolvedRegion]) === null || _f === void 0 ? void 0 : _f.signingRegion,\n    regionRegex: partitionHash[partition].regionRegex,\n    useFipsEndpoint: useFipsEndpoint\n  });\n  return __assign(__assign({\n    partition: partition,\n    signingService: signingService,\n    hostname: hostname\n  }, signingRegion && {\n    signingRegion: signingRegion\n  }), ((_g = regionHash[resolvedRegion]) === null || _g === void 0 ? void 0 : _g.signingService) && {\n    signingService: regionHash[resolvedRegion].signingService\n  });\n};","map":{"version":3,"sources":["C:/Users/AHSAN PC/Desktop/digitsu/gamp/js/node_modules/@aws-sdk/config-resolver/dist-es/regionInfo/getRegionInfo.js"],"names":["__assign","getHostnameFromVariants","getResolvedHostname","getResolvedPartition","getResolvedSigningRegion","getRegionInfo","region","_a","_b","_c","_d","_e","_f","_g","_h","useFipsEndpoint","_j","useDualstackEndpoint","signingService","regionHash","partitionHash","partition","resolvedRegion","endpoint","hostnameOptions","regionHostname","variants","partitionHostname","hostname","undefined","Error","signingRegion","regionRegex"],"mappings":"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","sourcesContent":["import { __assign } from \"tslib\";\nimport { getHostnameFromVariants } from \"./getHostnameFromVariants\";\nimport { getResolvedHostname } from \"./getResolvedHostname\";\nimport { getResolvedPartition } from \"./getResolvedPartition\";\nimport { getResolvedSigningRegion } from \"./getResolvedSigningRegion\";\nexport var getRegionInfo = function (region, _a) {\n    var _b, _c, _d, _e, _f, _g;\n    var _h = _a.useFipsEndpoint, useFipsEndpoint = _h === void 0 ? false : _h, _j = _a.useDualstackEndpoint, useDualstackEndpoint = _j === void 0 ? false : _j, signingService = _a.signingService, regionHash = _a.regionHash, partitionHash = _a.partitionHash;\n    var partition = getResolvedPartition(region, { partitionHash: partitionHash });\n    var resolvedRegion = region in regionHash ? region : (_c = (_b = partitionHash[partition]) === null || _b === void 0 ? void 0 : _b.endpoint) !== null && _c !== void 0 ? _c : region;\n    var hostnameOptions = { useFipsEndpoint: useFipsEndpoint, useDualstackEndpoint: useDualstackEndpoint };\n    var regionHostname = getHostnameFromVariants((_d = regionHash[resolvedRegion]) === null || _d === void 0 ? void 0 : _d.variants, hostnameOptions);\n    var partitionHostname = getHostnameFromVariants((_e = partitionHash[partition]) === null || _e === void 0 ? void 0 : _e.variants, hostnameOptions);\n    var hostname = getResolvedHostname(resolvedRegion, { regionHostname: regionHostname, partitionHostname: partitionHostname });\n    if (hostname === undefined) {\n        throw new Error(\"Endpoint resolution failed for: \" + { resolvedRegion: resolvedRegion, useFipsEndpoint: useFipsEndpoint, useDualstackEndpoint: useDualstackEndpoint });\n    }\n    var signingRegion = getResolvedSigningRegion(hostname, {\n        signingRegion: (_f = regionHash[resolvedRegion]) === null || _f === void 0 ? void 0 : _f.signingRegion,\n        regionRegex: partitionHash[partition].regionRegex,\n        useFipsEndpoint: useFipsEndpoint,\n    });\n    return __assign(__assign({ partition: partition, signingService: signingService, hostname: hostname }, (signingRegion && { signingRegion: signingRegion })), (((_g = regionHash[resolvedRegion]) === null || _g === void 0 ? void 0 : _g.signingService) && {\n        signingService: regionHash[resolvedRegion].signingService,\n    }));\n};\n"]},"metadata":{},"sourceType":"module"}