{"ast":null,"code":"import { __read } from \"tslib\";\nimport { strictParseByte, strictParseDouble, strictParseFloat32, strictParseShort } from \"./parse-utils\";\nvar DAYS = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\nvar MONTHS = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\nexport function dateToUtcString(date) {\n  var year = date.getUTCFullYear();\n  var month = date.getUTCMonth();\n  var dayOfWeek = date.getUTCDay();\n  var dayOfMonthInt = date.getUTCDate();\n  var hoursInt = date.getUTCHours();\n  var minutesInt = date.getUTCMinutes();\n  var secondsInt = date.getUTCSeconds();\n  var dayOfMonthString = dayOfMonthInt < 10 ? \"0\" + dayOfMonthInt : \"\" + dayOfMonthInt;\n  var hoursString = hoursInt < 10 ? \"0\" + hoursInt : \"\" + hoursInt;\n  var minutesString = minutesInt < 10 ? \"0\" + minutesInt : \"\" + minutesInt;\n  var secondsString = secondsInt < 10 ? \"0\" + secondsInt : \"\" + secondsInt;\n  return DAYS[dayOfWeek] + \", \" + dayOfMonthString + \" \" + MONTHS[month] + \" \" + year + \" \" + hoursString + \":\" + minutesString + \":\" + secondsString + \" GMT\";\n}\nvar RFC3339 = new RegExp(/^(\\d{4})-(\\d{2})-(\\d{2})[tT](\\d{2}):(\\d{2}):(\\d{2})(?:\\.(\\d+))?[zZ]$/);\nexport var parseRfc3339DateTime = function parseRfc3339DateTime(value) {\n  if (value === null || value === undefined) {\n    return undefined;\n  }\n\n  if (typeof value !== \"string\") {\n    throw new TypeError(\"RFC-3339 date-times must be expressed as strings\");\n  }\n\n  var match = RFC3339.exec(value);\n\n  if (!match) {\n    throw new TypeError(\"Invalid RFC-3339 date-time value\");\n  }\n\n  var _a = __read(match, 8),\n      _ = _a[0],\n      yearStr = _a[1],\n      monthStr = _a[2],\n      dayStr = _a[3],\n      hours = _a[4],\n      minutes = _a[5],\n      seconds = _a[6],\n      fractionalMilliseconds = _a[7];\n\n  var year = strictParseShort(stripLeadingZeroes(yearStr));\n  var month = parseDateValue(monthStr, \"month\", 1, 12);\n  var day = parseDateValue(dayStr, \"day\", 1, 31);\n  return buildDate(year, month, day, {\n    hours: hours,\n    minutes: minutes,\n    seconds: seconds,\n    fractionalMilliseconds: fractionalMilliseconds\n  });\n};\nvar IMF_FIXDATE = new RegExp(/^(?:Mon|Tue|Wed|Thu|Fri|Sat|Sun), (\\d{2}) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (\\d{4}) (\\d{2}):(\\d{2}):(\\d{2})(?:\\.(\\d+))? GMT$/);\nvar RFC_850_DATE = new RegExp(/^(?:Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sunday), (\\d{2})-(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-(\\d{2}) (\\d{2}):(\\d{2}):(\\d{2})(?:\\.(\\d+))? GMT$/);\nvar ASC_TIME = new RegExp(/^(?:Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) ( [1-9]|\\d{2}) (\\d{2}):(\\d{2}):(\\d{2})(?:\\.(\\d+))? (\\d{4})$/);\nexport var parseRfc7231DateTime = function parseRfc7231DateTime(value) {\n  if (value === null || value === undefined) {\n    return undefined;\n  }\n\n  if (typeof value !== \"string\") {\n    throw new TypeError(\"RFC-7231 date-times must be expressed as strings\");\n  }\n\n  var match = IMF_FIXDATE.exec(value);\n\n  if (match) {\n    var _a = __read(match, 8),\n        _1 = _a[0],\n        dayStr = _a[1],\n        monthStr = _a[2],\n        yearStr = _a[3],\n        hours = _a[4],\n        minutes = _a[5],\n        seconds = _a[6],\n        fractionalMilliseconds = _a[7];\n\n    return buildDate(strictParseShort(stripLeadingZeroes(yearStr)), parseMonthByShortName(monthStr), parseDateValue(dayStr, \"day\", 1, 31), {\n      hours: hours,\n      minutes: minutes,\n      seconds: seconds,\n      fractionalMilliseconds: fractionalMilliseconds\n    });\n  }\n\n  match = RFC_850_DATE.exec(value);\n\n  if (match) {\n    var _b = __read(match, 8),\n        _2 = _b[0],\n        dayStr = _b[1],\n        monthStr = _b[2],\n        yearStr = _b[3],\n        hours = _b[4],\n        minutes = _b[5],\n        seconds = _b[6],\n        fractionalMilliseconds = _b[7];\n\n    return adjustRfc850Year(buildDate(parseTwoDigitYear(yearStr), parseMonthByShortName(monthStr), parseDateValue(dayStr, \"day\", 1, 31), {\n      hours: hours,\n      minutes: minutes,\n      seconds: seconds,\n      fractionalMilliseconds: fractionalMilliseconds\n    }));\n  }\n\n  match = ASC_TIME.exec(value);\n\n  if (match) {\n    var _c = __read(match, 8),\n        _3 = _c[0],\n        monthStr = _c[1],\n        dayStr = _c[2],\n        hours = _c[3],\n        minutes = _c[4],\n        seconds = _c[5],\n        fractionalMilliseconds = _c[6],\n        yearStr = _c[7];\n\n    return buildDate(strictParseShort(stripLeadingZeroes(yearStr)), parseMonthByShortName(monthStr), parseDateValue(dayStr.trimLeft(), \"day\", 1, 31), {\n      hours: hours,\n      minutes: minutes,\n      seconds: seconds,\n      fractionalMilliseconds: fractionalMilliseconds\n    });\n  }\n\n  throw new TypeError(\"Invalid RFC-7231 date-time value\");\n};\nexport var parseEpochTimestamp = function parseEpochTimestamp(value) {\n  if (value === null || value === undefined) {\n    return undefined;\n  }\n\n  var valueAsDouble;\n\n  if (typeof value === \"number\") {\n    valueAsDouble = value;\n  } else if (typeof value === \"string\") {\n    valueAsDouble = strictParseDouble(value);\n  } else {\n    throw new TypeError(\"Epoch timestamps must be expressed as floating point numbers or their string representation\");\n  }\n\n  if (Number.isNaN(valueAsDouble) || valueAsDouble === Infinity || valueAsDouble === -Infinity) {\n    throw new TypeError(\"Epoch timestamps must be valid, non-Infinite, non-NaN numerics\");\n  }\n\n  return new Date(Math.round(valueAsDouble * 1000));\n};\n\nvar buildDate = function buildDate(year, month, day, time) {\n  var adjustedMonth = month - 1;\n  validateDayOfMonth(year, adjustedMonth, day);\n  return new Date(Date.UTC(year, adjustedMonth, day, parseDateValue(time.hours, \"hour\", 0, 23), parseDateValue(time.minutes, \"minute\", 0, 59), parseDateValue(time.seconds, \"seconds\", 0, 60), parseMilliseconds(time.fractionalMilliseconds)));\n};\n\nvar parseTwoDigitYear = function parseTwoDigitYear(value) {\n  var thisYear = new Date().getUTCFullYear();\n  var valueInThisCentury = Math.floor(thisYear / 100) * 100 + strictParseShort(stripLeadingZeroes(value));\n\n  if (valueInThisCentury < thisYear) {\n    return valueInThisCentury + 100;\n  }\n\n  return valueInThisCentury;\n};\n\nvar FIFTY_YEARS_IN_MILLIS = 50 * 365 * 24 * 60 * 60 * 1000;\n\nvar adjustRfc850Year = function adjustRfc850Year(input) {\n  if (input.getTime() - new Date().getTime() > FIFTY_YEARS_IN_MILLIS) {\n    return new Date(Date.UTC(input.getUTCFullYear() - 100, input.getUTCMonth(), input.getUTCDate(), input.getUTCHours(), input.getUTCMinutes(), input.getUTCSeconds(), input.getUTCMilliseconds()));\n  }\n\n  return input;\n};\n\nvar parseMonthByShortName = function parseMonthByShortName(value) {\n  var monthIdx = MONTHS.indexOf(value);\n\n  if (monthIdx < 0) {\n    throw new TypeError(\"Invalid month: \" + value);\n  }\n\n  return monthIdx + 1;\n};\n\nvar DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\nvar validateDayOfMonth = function validateDayOfMonth(year, month, day) {\n  var maxDays = DAYS_IN_MONTH[month];\n\n  if (month === 1 && isLeapYear(year)) {\n    maxDays = 29;\n  }\n\n  if (day > maxDays) {\n    throw new TypeError(\"Invalid day for \" + MONTHS[month] + \" in \" + year + \": \" + day);\n  }\n};\n\nvar isLeapYear = function isLeapYear(year) {\n  return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);\n};\n\nvar parseDateValue = function parseDateValue(value, type, lower, upper) {\n  var dateVal = strictParseByte(stripLeadingZeroes(value));\n\n  if (dateVal < lower || dateVal > upper) {\n    throw new TypeError(type + \" must be between \" + lower + \" and \" + upper + \", inclusive\");\n  }\n\n  return dateVal;\n};\n\nvar parseMilliseconds = function parseMilliseconds(value) {\n  if (value === null || value === undefined) {\n    return 0;\n  }\n\n  return strictParseFloat32(\"0.\" + value) * 1000;\n};\n\nvar stripLeadingZeroes = function stripLeadingZeroes(value) {\n  var idx = 0;\n\n  while (idx < value.length - 1 && value.charAt(idx) === \"0\") {\n    idx++;\n  }\n\n  if (idx === 0) {\n    return value;\n  }\n\n  return value.slice(idx);\n};","map":{"version":3,"sources":["C:/Users/AHSAN PC/Desktop/digitsu/gamp/js/node_modules/@aws-sdk/smithy-client/dist-es/date-utils.js"],"names":["__read","strictParseByte","strictParseDouble","strictParseFloat32","strictParseShort","DAYS","MONTHS","dateToUtcString","date","year","getUTCFullYear","month","getUTCMonth","dayOfWeek","getUTCDay","dayOfMonthInt","getUTCDate","hoursInt","getUTCHours","minutesInt","getUTCMinutes","secondsInt","getUTCSeconds","dayOfMonthString","hoursString","minutesString","secondsString","RFC3339","RegExp","parseRfc3339DateTime","value","undefined","TypeError","match","exec","_a","_","yearStr","monthStr","dayStr","hours","minutes","seconds","fractionalMilliseconds","stripLeadingZeroes","parseDateValue","day","buildDate","IMF_FIXDATE","RFC_850_DATE","ASC_TIME","parseRfc7231DateTime","_1","parseMonthByShortName","_b","_2","adjustRfc850Year","parseTwoDigitYear","_c","_3","trimLeft","parseEpochTimestamp","valueAsDouble","Number","isNaN","Infinity","Date","Math","round","time","adjustedMonth","validateDayOfMonth","UTC","parseMilliseconds","thisYear","valueInThisCentury","floor","FIFTY_YEARS_IN_MILLIS","input","getTime","getUTCMilliseconds","monthIdx","indexOf","DAYS_IN_MONTH","maxDays","isLeapYear","type","lower","upper","dateVal","idx","length","charAt","slice"],"mappings":"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","sourcesContent":["import { __read } from \"tslib\";\nimport { strictParseByte, strictParseDouble, strictParseFloat32, strictParseShort } from \"./parse-utils\";\nvar DAYS = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\nvar MONTHS = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\nexport function dateToUtcString(date) {\n    var year = date.getUTCFullYear();\n    var month = date.getUTCMonth();\n    var dayOfWeek = date.getUTCDay();\n    var dayOfMonthInt = date.getUTCDate();\n    var hoursInt = date.getUTCHours();\n    var minutesInt = date.getUTCMinutes();\n    var secondsInt = date.getUTCSeconds();\n    var dayOfMonthString = dayOfMonthInt < 10 ? \"0\" + dayOfMonthInt : \"\" + dayOfMonthInt;\n    var hoursString = hoursInt < 10 ? \"0\" + hoursInt : \"\" + hoursInt;\n    var minutesString = minutesInt < 10 ? \"0\" + minutesInt : \"\" + minutesInt;\n    var secondsString = secondsInt < 10 ? \"0\" + secondsInt : \"\" + secondsInt;\n    return DAYS[dayOfWeek] + \", \" + dayOfMonthString + \" \" + MONTHS[month] + \" \" + year + \" \" + hoursString + \":\" + minutesString + \":\" + secondsString + \" GMT\";\n}\nvar RFC3339 = new RegExp(/^(\\d{4})-(\\d{2})-(\\d{2})[tT](\\d{2}):(\\d{2}):(\\d{2})(?:\\.(\\d+))?[zZ]$/);\nexport var parseRfc3339DateTime = function (value) {\n    if (value === null || value === undefined) {\n        return undefined;\n    }\n    if (typeof value !== \"string\") {\n        throw new TypeError(\"RFC-3339 date-times must be expressed as strings\");\n    }\n    var match = RFC3339.exec(value);\n    if (!match) {\n        throw new TypeError(\"Invalid RFC-3339 date-time value\");\n    }\n    var _a = __read(match, 8), _ = _a[0], yearStr = _a[1], monthStr = _a[2], dayStr = _a[3], hours = _a[4], minutes = _a[5], seconds = _a[6], fractionalMilliseconds = _a[7];\n    var year = strictParseShort(stripLeadingZeroes(yearStr));\n    var month = parseDateValue(monthStr, \"month\", 1, 12);\n    var day = parseDateValue(dayStr, \"day\", 1, 31);\n    return buildDate(year, month, day, { hours: hours, minutes: minutes, seconds: seconds, fractionalMilliseconds: fractionalMilliseconds });\n};\nvar IMF_FIXDATE = new RegExp(/^(?:Mon|Tue|Wed|Thu|Fri|Sat|Sun), (\\d{2}) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (\\d{4}) (\\d{2}):(\\d{2}):(\\d{2})(?:\\.(\\d+))? GMT$/);\nvar RFC_850_DATE = new RegExp(/^(?:Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sunday), (\\d{2})-(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-(\\d{2}) (\\d{2}):(\\d{2}):(\\d{2})(?:\\.(\\d+))? GMT$/);\nvar ASC_TIME = new RegExp(/^(?:Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) ( [1-9]|\\d{2}) (\\d{2}):(\\d{2}):(\\d{2})(?:\\.(\\d+))? (\\d{4})$/);\nexport var parseRfc7231DateTime = function (value) {\n    if (value === null || value === undefined) {\n        return undefined;\n    }\n    if (typeof value !== \"string\") {\n        throw new TypeError(\"RFC-7231 date-times must be expressed as strings\");\n    }\n    var match = IMF_FIXDATE.exec(value);\n    if (match) {\n        var _a = __read(match, 8), _1 = _a[0], dayStr = _a[1], monthStr = _a[2], yearStr = _a[3], hours = _a[4], minutes = _a[5], seconds = _a[6], fractionalMilliseconds = _a[7];\n        return buildDate(strictParseShort(stripLeadingZeroes(yearStr)), parseMonthByShortName(monthStr), parseDateValue(dayStr, \"day\", 1, 31), { hours: hours, minutes: minutes, seconds: seconds, fractionalMilliseconds: fractionalMilliseconds });\n    }\n    match = RFC_850_DATE.exec(value);\n    if (match) {\n        var _b = __read(match, 8), _2 = _b[0], dayStr = _b[1], monthStr = _b[2], yearStr = _b[3], hours = _b[4], minutes = _b[5], seconds = _b[6], fractionalMilliseconds = _b[7];\n        return adjustRfc850Year(buildDate(parseTwoDigitYear(yearStr), parseMonthByShortName(monthStr), parseDateValue(dayStr, \"day\", 1, 31), {\n            hours: hours,\n            minutes: minutes,\n            seconds: seconds,\n            fractionalMilliseconds: fractionalMilliseconds,\n        }));\n    }\n    match = ASC_TIME.exec(value);\n    if (match) {\n        var _c = __read(match, 8), _3 = _c[0], monthStr = _c[1], dayStr = _c[2], hours = _c[3], minutes = _c[4], seconds = _c[5], fractionalMilliseconds = _c[6], yearStr = _c[7];\n        return buildDate(strictParseShort(stripLeadingZeroes(yearStr)), parseMonthByShortName(monthStr), parseDateValue(dayStr.trimLeft(), \"day\", 1, 31), { hours: hours, minutes: minutes, seconds: seconds, fractionalMilliseconds: fractionalMilliseconds });\n    }\n    throw new TypeError(\"Invalid RFC-7231 date-time value\");\n};\nexport var parseEpochTimestamp = function (value) {\n    if (value === null || value === undefined) {\n        return undefined;\n    }\n    var valueAsDouble;\n    if (typeof value === \"number\") {\n        valueAsDouble = value;\n    }\n    else if (typeof value === \"string\") {\n        valueAsDouble = strictParseDouble(value);\n    }\n    else {\n        throw new TypeError(\"Epoch timestamps must be expressed as floating point numbers or their string representation\");\n    }\n    if (Number.isNaN(valueAsDouble) || valueAsDouble === Infinity || valueAsDouble === -Infinity) {\n        throw new TypeError(\"Epoch timestamps must be valid, non-Infinite, non-NaN numerics\");\n    }\n    return new Date(Math.round(valueAsDouble * 1000));\n};\nvar buildDate = function (year, month, day, time) {\n    var adjustedMonth = month - 1;\n    validateDayOfMonth(year, adjustedMonth, day);\n    return new Date(Date.UTC(year, adjustedMonth, day, parseDateValue(time.hours, \"hour\", 0, 23), parseDateValue(time.minutes, \"minute\", 0, 59), parseDateValue(time.seconds, \"seconds\", 0, 60), parseMilliseconds(time.fractionalMilliseconds)));\n};\nvar parseTwoDigitYear = function (value) {\n    var thisYear = new Date().getUTCFullYear();\n    var valueInThisCentury = Math.floor(thisYear / 100) * 100 + strictParseShort(stripLeadingZeroes(value));\n    if (valueInThisCentury < thisYear) {\n        return valueInThisCentury + 100;\n    }\n    return valueInThisCentury;\n};\nvar FIFTY_YEARS_IN_MILLIS = 50 * 365 * 24 * 60 * 60 * 1000;\nvar adjustRfc850Year = function (input) {\n    if (input.getTime() - new Date().getTime() > FIFTY_YEARS_IN_MILLIS) {\n        return new Date(Date.UTC(input.getUTCFullYear() - 100, input.getUTCMonth(), input.getUTCDate(), input.getUTCHours(), input.getUTCMinutes(), input.getUTCSeconds(), input.getUTCMilliseconds()));\n    }\n    return input;\n};\nvar parseMonthByShortName = function (value) {\n    var monthIdx = MONTHS.indexOf(value);\n    if (monthIdx < 0) {\n        throw new TypeError(\"Invalid month: \" + value);\n    }\n    return monthIdx + 1;\n};\nvar DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\nvar validateDayOfMonth = function (year, month, day) {\n    var maxDays = DAYS_IN_MONTH[month];\n    if (month === 1 && isLeapYear(year)) {\n        maxDays = 29;\n    }\n    if (day > maxDays) {\n        throw new TypeError(\"Invalid day for \" + MONTHS[month] + \" in \" + year + \": \" + day);\n    }\n};\nvar isLeapYear = function (year) {\n    return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);\n};\nvar parseDateValue = function (value, type, lower, upper) {\n    var dateVal = strictParseByte(stripLeadingZeroes(value));\n    if (dateVal < lower || dateVal > upper) {\n        throw new TypeError(type + \" must be between \" + lower + \" and \" + upper + \", inclusive\");\n    }\n    return dateVal;\n};\nvar parseMilliseconds = function (value) {\n    if (value === null || value === undefined) {\n        return 0;\n    }\n    return strictParseFloat32(\"0.\" + value) * 1000;\n};\nvar stripLeadingZeroes = function (value) {\n    var idx = 0;\n    while (idx < value.length - 1 && value.charAt(idx) === \"0\") {\n        idx++;\n    }\n    if (idx === 0) {\n        return value;\n    }\n    return value.slice(idx);\n};\n"]},"metadata":{},"sourceType":"module"}