{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"C:\\\\Users\\\\AHSAN PC\\\\Desktop\\\\digitsu\\\\gamp\\\\js\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\");\n\nvar _asyncToGenerator = require(\"C:\\\\Users\\\\AHSAN PC\\\\Desktop\\\\digitsu\\\\gamp\\\\js\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\asyncToGenerator.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.claimPack = void 0;\n\nvar web3_js_1 = require(\"@solana/web3.js\");\n\nvar borsh_1 = require(\"borsh\");\n\nvar utils_1 = require(\"../../../utils\");\n\nvar __1 = require(\"../../..\");\n\nvar find_1 = require(\"../find\");\n\nfunction claimPack(_x) {\n  return _claimPack.apply(this, arguments);\n}\n\nfunction _claimPack() {\n  _claimPack = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {\n    var index, packSetKey, wallet, voucherMint, userToken, newMint, metadataMint, edition, randomOracle, PROGRAM_IDS, value, provingProcess, packCard, newMetadata, metadata, newEdition, masterEdition, editionMarkPda, programAuthority, data, keys;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            index = _ref.index, packSetKey = _ref.packSetKey, wallet = _ref.wallet, voucherMint = _ref.voucherMint, userToken = _ref.userToken, newMint = _ref.newMint, metadataMint = _ref.metadataMint, edition = _ref.edition, randomOracle = _ref.randomOracle;\n            PROGRAM_IDS = (0, utils_1.programIds)();\n            value = new __1.ClaimPackArgs({\n              index: index\n            });\n            _context.next = 5;\n            return (0, find_1.findProvingProcessProgramAddress)((0, utils_1.toPublicKey)(packSetKey), wallet, (0, utils_1.toPublicKey)(voucherMint));\n\n          case 5:\n            provingProcess = _context.sent;\n            _context.next = 8;\n            return (0, find_1.findPackCardProgramAddress)((0, utils_1.toPublicKey)(packSetKey), index);\n\n          case 8:\n            packCard = _context.sent;\n            _context.next = 11;\n            return (0, __1.getMetadata)(newMint);\n\n          case 11:\n            newMetadata = _context.sent;\n            _context.next = 14;\n            return (0, __1.getMetadata)(metadataMint);\n\n          case 14:\n            metadata = _context.sent;\n            _context.next = 17;\n            return (0, __1.getEdition)(newMint);\n\n          case 17:\n            newEdition = _context.sent;\n            _context.next = 20;\n            return (0, __1.getEdition)(metadataMint);\n\n          case 20:\n            masterEdition = _context.sent;\n            _context.next = 23;\n            return (0, __1.getEditionMarkPda)(metadataMint, edition);\n\n          case 23:\n            editionMarkPda = _context.sent;\n            _context.next = 26;\n            return (0, find_1.getProgramAuthority)();\n\n          case 26:\n            programAuthority = _context.sent;\n            data = Buffer.from((0, borsh_1.serialize)(__1.PACKS_SCHEMA, value));\n            keys = [// pack_set\n            {\n              pubkey: (0, utils_1.toPublicKey)(packSetKey),\n              isSigner: false,\n              isWritable: false\n            }, // proving_process\n            {\n              pubkey: (0, utils_1.toPublicKey)(provingProcess),\n              isSigner: false,\n              isWritable: true\n            }, // user_wallet\n            {\n              pubkey: wallet,\n              isSigner: true,\n              isWritable: true\n            }, // program_authority\n            {\n              pubkey: (0, utils_1.toPublicKey)(programAuthority),\n              isSigner: false,\n              isWritable: false\n            }, // pack_card\n            {\n              pubkey: (0, utils_1.toPublicKey)(packCard),\n              isSigner: false,\n              isWritable: true\n            }, // user_token_acc\n            {\n              pubkey: (0, utils_1.toPublicKey)(userToken),\n              isSigner: false,\n              isWritable: true\n            }, // new_metadata_acc\n            {\n              pubkey: (0, utils_1.toPublicKey)(newMetadata),\n              isSigner: false,\n              isWritable: true\n            }, // new_edition_acc\n            {\n              pubkey: (0, utils_1.toPublicKey)(newEdition),\n              isSigner: false,\n              isWritable: true\n            }, // master_edition_acc\n            {\n              pubkey: (0, utils_1.toPublicKey)(masterEdition),\n              isSigner: false,\n              isWritable: true\n            }, // new_mint_account\n            {\n              pubkey: (0, utils_1.toPublicKey)(newMint),\n              isSigner: false,\n              isWritable: true\n            }, // new_mint_authority_acc\n            {\n              pubkey: wallet,\n              isSigner: true,\n              isWritable: true\n            }, // metadata_acc\n            {\n              pubkey: (0, utils_1.toPublicKey)(metadata),\n              isSigner: false,\n              isWritable: true\n            }, // metadata_mint_acc\n            {\n              pubkey: (0, utils_1.toPublicKey)(metadataMint),\n              isSigner: false,\n              isWritable: true\n            }, // edition_mark\n            {\n              pubkey: (0, utils_1.toPublicKey)(editionMarkPda),\n              isSigner: false,\n              isWritable: true\n            }, // rent\n            {\n              pubkey: (0, utils_1.toPublicKey)(web3_js_1.SYSVAR_RENT_PUBKEY),\n              isSigner: false,\n              isWritable: false\n            }, // randomness_oracle\n            {\n              pubkey: (0, utils_1.toPublicKey)(randomOracle),\n              isSigner: false,\n              isWritable: false\n            }, // metaplex_token_metadata\n            {\n              pubkey: (0, utils_1.toPublicKey)((0, utils_1.programIds)().metadata),\n              isSigner: false,\n              isWritable: false\n            }, // spl_token program\n            {\n              pubkey: (0, utils_1.programIds)().token,\n              isSigner: false,\n              isWritable: false\n            }, // system_program\n            {\n              pubkey: web3_js_1.SystemProgram.programId,\n              isSigner: false,\n              isWritable: false\n            }];\n            return _context.abrupt(\"return\", new web3_js_1.TransactionInstruction({\n              keys: keys,\n              programId: (0, utils_1.toPublicKey)(PROGRAM_IDS.pack_create),\n              data: data\n            }));\n\n          case 30:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _claimPack.apply(this, arguments);\n}\n\nexports.claimPack = claimPack;","map":{"version":3,"sources":["../../../../../src/models/packs/instructions/claimPack.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.claimPack = void 0;\r\nconst web3_js_1 = require(\"@solana/web3.js\");\r\nconst borsh_1 = require(\"borsh\");\r\nconst utils_1 = require(\"../../../utils\");\r\nconst __1 = require(\"../../..\");\r\nconst find_1 = require(\"../find\");\r\nasync function claimPack({ index, packSetKey, wallet, voucherMint, userToken, newMint, metadataMint, edition, randomOracle, }) {\r\n    const PROGRAM_IDS = (0, utils_1.programIds)();\r\n    const value = new __1.ClaimPackArgs({ index });\r\n    const provingProcess = await (0, find_1.findProvingProcessProgramAddress)((0, utils_1.toPublicKey)(packSetKey), wallet, (0, utils_1.toPublicKey)(voucherMint));\r\n    const packCard = await (0, find_1.findPackCardProgramAddress)((0, utils_1.toPublicKey)(packSetKey), index);\r\n    const newMetadata = await (0, __1.getMetadata)(newMint);\r\n    const metadata = await (0, __1.getMetadata)(metadataMint);\r\n    const newEdition = await (0, __1.getEdition)(newMint);\r\n    const masterEdition = await (0, __1.getEdition)(metadataMint);\r\n    const editionMarkPda = await (0, __1.getEditionMarkPda)(metadataMint, edition);\r\n    const programAuthority = await (0, find_1.getProgramAuthority)();\r\n    const data = Buffer.from((0, borsh_1.serialize)(__1.PACKS_SCHEMA, value));\r\n    const keys = [\r\n        // pack_set\r\n        {\r\n            pubkey: (0, utils_1.toPublicKey)(packSetKey),\r\n            isSigner: false,\r\n            isWritable: false,\r\n        },\r\n        // proving_process\r\n        {\r\n            pubkey: (0, utils_1.toPublicKey)(provingProcess),\r\n            isSigner: false,\r\n            isWritable: true,\r\n        },\r\n        // user_wallet\r\n        {\r\n            pubkey: wallet,\r\n            isSigner: true,\r\n            isWritable: true,\r\n        },\r\n        // program_authority\r\n        {\r\n            pubkey: (0, utils_1.toPublicKey)(programAuthority),\r\n            isSigner: false,\r\n            isWritable: false,\r\n        },\r\n        // pack_card\r\n        {\r\n            pubkey: (0, utils_1.toPublicKey)(packCard),\r\n            isSigner: false,\r\n            isWritable: true,\r\n        },\r\n        // user_token_acc\r\n        {\r\n            pubkey: (0, utils_1.toPublicKey)(userToken),\r\n            isSigner: false,\r\n            isWritable: true,\r\n        },\r\n        // new_metadata_acc\r\n        {\r\n            pubkey: (0, utils_1.toPublicKey)(newMetadata),\r\n            isSigner: false,\r\n            isWritable: true,\r\n        },\r\n        // new_edition_acc\r\n        {\r\n            pubkey: (0, utils_1.toPublicKey)(newEdition),\r\n            isSigner: false,\r\n            isWritable: true,\r\n        },\r\n        // master_edition_acc\r\n        {\r\n            pubkey: (0, utils_1.toPublicKey)(masterEdition),\r\n            isSigner: false,\r\n            isWritable: true,\r\n        },\r\n        // new_mint_account\r\n        {\r\n            pubkey: (0, utils_1.toPublicKey)(newMint),\r\n            isSigner: false,\r\n            isWritable: true,\r\n        },\r\n        // new_mint_authority_acc\r\n        {\r\n            pubkey: wallet,\r\n            isSigner: true,\r\n            isWritable: true,\r\n        },\r\n        // metadata_acc\r\n        {\r\n            pubkey: (0, utils_1.toPublicKey)(metadata),\r\n            isSigner: false,\r\n            isWritable: true,\r\n        },\r\n        // metadata_mint_acc\r\n        {\r\n            pubkey: (0, utils_1.toPublicKey)(metadataMint),\r\n            isSigner: false,\r\n            isWritable: true,\r\n        },\r\n        // edition_mark\r\n        {\r\n            pubkey: (0, utils_1.toPublicKey)(editionMarkPda),\r\n            isSigner: false,\r\n            isWritable: true,\r\n        },\r\n        // rent\r\n        {\r\n            pubkey: (0, utils_1.toPublicKey)(web3_js_1.SYSVAR_RENT_PUBKEY),\r\n            isSigner: false,\r\n            isWritable: false,\r\n        },\r\n        // randomness_oracle\r\n        {\r\n            pubkey: (0, utils_1.toPublicKey)(randomOracle),\r\n            isSigner: false,\r\n            isWritable: false,\r\n        },\r\n        // metaplex_token_metadata\r\n        {\r\n            pubkey: (0, utils_1.toPublicKey)((0, utils_1.programIds)().metadata),\r\n            isSigner: false,\r\n            isWritable: false,\r\n        },\r\n        // spl_token program\r\n        {\r\n            pubkey: (0, utils_1.programIds)().token,\r\n            isSigner: false,\r\n            isWritable: false,\r\n        },\r\n        // system_program\r\n        {\r\n            pubkey: web3_js_1.SystemProgram.programId,\r\n            isSigner: false,\r\n            isWritable: false,\r\n        },\r\n    ];\r\n    return new web3_js_1.TransactionInstruction({\r\n        keys,\r\n        programId: (0, utils_1.toPublicKey)(PROGRAM_IDS.pack_create),\r\n        data,\r\n    });\r\n}\r\nexports.claimPack = claimPack;\r\n//# sourceMappingURL=claimPack.js.map"]},"metadata":{},"sourceType":"script"}