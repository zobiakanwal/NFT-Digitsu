{"ast":null,"code":"import _asyncToGenerator from\"C:\\\\Users\\\\AHSAN PC\\\\Desktop\\\\digitsu\\\\gamp\\\\js\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";import _toConsumableArray from\"C:\\\\Users\\\\AHSAN PC\\\\Desktop\\\\digitsu\\\\gamp\\\\js\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\toConsumableArray.js\";import _slicedToArray from\"C:\\\\Users\\\\AHSAN PC\\\\Desktop\\\\digitsu\\\\gamp\\\\js\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\slicedToArray.js\";import _regeneratorRuntime from\"C:\\\\Users\\\\AHSAN PC\\\\Desktop\\\\digitsu\\\\gamp\\\\js\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\";import{getTokenListContainerPromise,useLocalStorageState}from'@oyster/common';import{Keypair,Connection,Transaction}from'@solana/web3.js';import React,{useContext,useEffect,useMemo,useState}from'react';import{sendSignedTransaction}from'../utils/transactions';import{ENV as ChainId}from'@solana/spl-token-registry';import{WalletNotConnectedError}from'@solana/wallet-adapter-base';import{jsx as _jsx}from\"react/jsx-runtime\";export var ENDPOINTS=[{name:'mainnet-beta',endpoint:'https://api.metaplex.solana.com',ChainId:ChainId.MainnetBeta},{name:'devnet',endpoint:'https://metaplex.devnet.rpcpool.com/',ChainId:ChainId.Devnet}];var DEFAULT=ENDPOINTS[0].endpoint;var ConnectionContext=/*#__PURE__*/React.createContext({endpoint:DEFAULT,setEndpoint:function setEndpoint(){},connection:new Connection(DEFAULT,'recent'),env:ENDPOINTS[0].name,tokens:[],tokenMap:new Map()});export function ConnectionProvider(_ref){var _ENDPOINTS$find;var _ref$children=_ref.children,children=_ref$children===void 0?undefined:_ref$children;var _useLocalStorageState=useLocalStorageState('connectionEndpoint',ENDPOINTS[0].endpoint),_useLocalStorageState2=_slicedToArray(_useLocalStorageState,2),endpoint=_useLocalStorageState2[0],setEndpoint=_useLocalStorageState2[1];var connection=useMemo(function(){return new Connection(endpoint,'recent');},[endpoint]);var env=((_ENDPOINTS$find=ENDPOINTS.find(function(end){return end.endpoint===endpoint;}))===null||_ENDPOINTS$find===void 0?void 0:_ENDPOINTS$find.name)||ENDPOINTS[0].name;var _useState=useState([]),_useState2=_slicedToArray(_useState,2),tokens=_useState2[0],setTokens=_useState2[1];var _useState3=useState(new Map()),_useState4=_slicedToArray(_useState3,2),tokenMap=_useState4[0],setTokenMap=_useState4[1];useEffect(function(){// fetch token files\ngetTokenListContainerPromise().then(function(container){var _ENDPOINTS$find2;var list=container.excludeByTag('nft').filterByChainId(((_ENDPOINTS$find2=ENDPOINTS.find(function(end){return end.endpoint===endpoint;}))===null||_ENDPOINTS$find2===void 0?void 0:_ENDPOINTS$find2.ChainId)||ChainId.MainnetBeta).getList();var knownMints=_toConsumableArray(list).reduce(function(map,item){map.set(item.address,item);return map;},new Map());setTokenMap(knownMints);setTokens(list);});},[env,endpoint]);// The websocket library solana/web3.js uses closes its websocket connection when the subscription list\n// is empty after opening its first time, preventing subsequent subscriptions from receiving responses.\n// This is a hack to prevent the list from every getting empty\nuseEffect(function(){var id=connection.onAccountChange(Keypair.generate().publicKey,function(){});return function(){connection.removeAccountChangeListener(id);};},[connection]);useEffect(function(){var id=connection.onSlotChange(function(){return null;});return function(){connection.removeSlotChangeListener(id);};},[connection]);return/*#__PURE__*/_jsx(ConnectionContext.Provider,{value:{endpoint:endpoint,setEndpoint:setEndpoint,connection:connection,tokens:tokens,tokenMap:tokenMap,env:env},children:children});}export function useConnection(){return useContext(ConnectionContext).connection;}export function useConnectionConfig(){var context=useContext(ConnectionContext);return{endpoint:context.endpoint,setEndpoint:context.setEndpoint,env:context.env,tokens:context.tokens,tokenMap:context.tokenMap};}export var getErrorForTransaction=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(connection,txid){var tx,errors;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return connection.confirmTransaction(txid,'max');case 2:_context.next=4;return connection.getParsedConfirmedTransaction(txid);case 4:tx=_context.sent;errors=[];if(tx!==null&&tx!==void 0&&tx.meta&&tx.meta.logMessages){tx.meta.logMessages.forEach(function(log){var regex=/Error: (.*)/gm;var m;while((m=regex.exec(log))!==null){// This is necessary to avoid infinite loops with zero-width matches\nif(m.index===regex.lastIndex){regex.lastIndex++;}if(m.length>1){errors.push(m[1]);}}});}return _context.abrupt(\"return\",errors);case 8:case\"end\":return _context.stop();}}},_callee);}));return function getErrorForTransaction(_x,_x2){return _ref2.apply(this,arguments);};}();export var SequenceType;(function(SequenceType){SequenceType[SequenceType[\"Sequential\"]=0]=\"Sequential\";SequenceType[SequenceType[\"Parallel\"]=1]=\"Parallel\";SequenceType[SequenceType[\"StopOnFailure\"]=2]=\"StopOnFailure\";})(SequenceType||(SequenceType={}));export var sendTransactionWithRetry=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(connection,wallet,instructions,signers){var commitment,includesFeePayer,block,beforeSend,transaction,_transaction,_transaction2,_transaction3,_yield$sendSignedTran,txid,slot,_args2=arguments;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:commitment=_args2.length>4&&_args2[4]!==undefined?_args2[4]:'singleGossip';includesFeePayer=_args2.length>5&&_args2[5]!==undefined?_args2[5]:false;block=_args2.length>6?_args2[6]:undefined;beforeSend=_args2.length>7?_args2[7]:undefined;if(wallet.publicKey){_context2.next=6;break;}throw new WalletNotConnectedError();case 6:transaction=new Transaction();instructions.forEach(function(instruction){return transaction.add(instruction);});_context2.t0=block;if(_context2.t0){_context2.next=13;break;}_context2.next=12;return connection.getRecentBlockhash(commitment);case 12:_context2.t0=_context2.sent;case 13:transaction.recentBlockhash=_context2.t0.blockhash;if(includesFeePayer){(_transaction=transaction).setSigners.apply(_transaction,_toConsumableArray(signers.map(function(s){return s.publicKey;})));}else{(_transaction2=transaction).setSigners.apply(_transaction2,[// fee payed by the wallet owner\nwallet.publicKey].concat(_toConsumableArray(signers.map(function(s){return s.publicKey;}))));}if(signers.length>0){(_transaction3=transaction).partialSign.apply(_transaction3,_toConsumableArray(signers));}if(includesFeePayer){_context2.next=26;break;}_context2.prev=17;_context2.next=20;return wallet.signTransaction(transaction);case 20:transaction=_context2.sent;_context2.next=26;break;case 23:_context2.prev=23;_context2.t1=_context2[\"catch\"](17);return _context2.abrupt(\"return\",'Failed to sign transaction');case 26:if(beforeSend){beforeSend();}console.log('About to send');_context2.prev=28;_context2.next=31;return sendSignedTransaction({connection:connection,signedTransaction:transaction});case 31:_yield$sendSignedTran=_context2.sent;txid=_yield$sendSignedTran.txid;slot=_yield$sendSignedTran.slot;return _context2.abrupt(\"return\",{txid:txid,slot:slot});case 37:_context2.prev=37;_context2.t2=_context2[\"catch\"](28);console.error(_context2.t2);return _context2.abrupt(\"return\",'See console logs');case 41:case\"end\":return _context2.stop();}}},_callee2,null,[[17,23],[28,37]]);}));return function sendTransactionWithRetry(_x3,_x4,_x5,_x6){return _ref3.apply(this,arguments);};}();","map":{"version":3,"sources":["C:/Users/AHSAN PC/Desktop/digitsu/gamp/js/packages/gumdrop/src/contexts/ConnectionContext.tsx"],"names":["getTokenListContainerPromise","useLocalStorageState","Keypair","Connection","Transaction","React","useContext","useEffect","useMemo","useState","sendSignedTransaction","ENV","ChainId","WalletNotConnectedError","ENDPOINTS","name","endpoint","MainnetBeta","Devnet","DEFAULT","ConnectionContext","createContext","setEndpoint","connection","env","tokens","tokenMap","Map","ConnectionProvider","children","undefined","find","end","setTokens","setTokenMap","then","container","list","excludeByTag","filterByChainId","getList","knownMints","reduce","map","item","set","address","id","onAccountChange","generate","publicKey","removeAccountChangeListener","onSlotChange","removeSlotChangeListener","useConnection","useConnectionConfig","context","getErrorForTransaction","txid","confirmTransaction","getParsedConfirmedTransaction","tx","errors","meta","logMessages","forEach","log","regex","m","exec","index","lastIndex","length","push","SequenceType","sendTransactionWithRetry","wallet","instructions","signers","commitment","includesFeePayer","block","beforeSend","transaction","instruction","add","getRecentBlockhash","recentBlockhash","blockhash","setSigners","s","partialSign","signTransaction","console","signedTransaction","slot","error"],"mappings":"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","sourcesContent":["import {\r\n  getTokenListContainerPromise,\r\n  useLocalStorageState,\r\n} from '@oyster/common';\r\nimport {\r\n  Keypair,\r\n  Commitment,\r\n  Connection,\r\n  Transaction,\r\n  TransactionInstruction,\r\n  Blockhash,\r\n  FeeCalculator,\r\n} from '@solana/web3.js';\r\nimport React, { useContext, useEffect, useMemo, useState } from 'react';\r\nimport { sendSignedTransaction } from '../utils/transactions';\r\nimport { TokenInfo, ENV as ChainId } from '@solana/spl-token-registry';\r\nimport { WalletSigner } from './WalletContext/WalletContext';\r\nimport { WalletNotConnectedError } from '@solana/wallet-adapter-base';\r\n\r\ninterface BlockhashAndFeeCalculator {\r\n  blockhash: Blockhash;\r\n  feeCalculator: FeeCalculator;\r\n}\r\n\r\nexport type ENV = 'mainnet-beta' | 'testnet' | 'devnet' | 'localnet';\r\n\r\nexport const ENDPOINTS = [\r\n  {\r\n    name: 'mainnet-beta' as ENV,\r\n    endpoint: 'https://api.metaplex.solana.com',\r\n    ChainId: ChainId.MainnetBeta,\r\n  },\r\n  {\r\n    name: 'devnet' as ENV,\r\n    endpoint: 'https://metaplex.devnet.rpcpool.com/',\r\n    ChainId: ChainId.Devnet,\r\n  },\r\n];\r\n\r\nconst DEFAULT = ENDPOINTS[0].endpoint;\r\n\r\ninterface ConnectionConfig {\r\n  connection: Connection;\r\n  endpoint: string;\r\n  env: ENV;\r\n  setEndpoint: (val: string) => void;\r\n  tokens: TokenInfo[];\r\n  tokenMap: Map<string, TokenInfo>;\r\n}\r\n\r\nconst ConnectionContext = React.createContext<ConnectionConfig>({\r\n  endpoint: DEFAULT,\r\n  setEndpoint: () => {},\r\n  connection: new Connection(DEFAULT, 'recent'),\r\n  env: ENDPOINTS[0].name,\r\n  tokens: [],\r\n  tokenMap: new Map<string, TokenInfo>(),\r\n});\r\n\r\nexport function ConnectionProvider({\r\n  children = undefined,\r\n}: {\r\n  children: React.ReactNode;\r\n}) {\r\n  const [endpoint, setEndpoint] = useLocalStorageState(\r\n    'connectionEndpoint',\r\n    ENDPOINTS[0].endpoint,\r\n  );\r\n\r\n  const connection = useMemo(\r\n    () => new Connection(endpoint, 'recent'),\r\n    [endpoint],\r\n  );\r\n\r\n  const env =\r\n    ENDPOINTS.find(end => end.endpoint === endpoint)?.name || ENDPOINTS[0].name;\r\n\r\n  const [tokens, setTokens] = useState<TokenInfo[]>([]);\r\n  const [tokenMap, setTokenMap] = useState<Map<string, TokenInfo>>(new Map());\r\n  useEffect(() => {\r\n    // fetch token files\r\n    getTokenListContainerPromise().then(container => {\r\n      const list = container\r\n        .excludeByTag('nft')\r\n        .filterByChainId(\r\n          ENDPOINTS.find(end => end.endpoint === endpoint)?.ChainId ||\r\n            ChainId.MainnetBeta,\r\n        )\r\n        .getList();\r\n\r\n      const knownMints = [...list].reduce((map, item) => {\r\n        map.set(item.address, item);\r\n        return map;\r\n      }, new Map<string, TokenInfo>());\r\n\r\n      setTokenMap(knownMints);\r\n      setTokens(list);\r\n    });\r\n  }, [env, endpoint]);\r\n\r\n  // The websocket library solana/web3.js uses closes its websocket connection when the subscription list\r\n  // is empty after opening its first time, preventing subsequent subscriptions from receiving responses.\r\n  // This is a hack to prevent the list from every getting empty\r\n  useEffect(() => {\r\n    const id = connection.onAccountChange(\r\n      Keypair.generate().publicKey,\r\n      () => {},\r\n    );\r\n    return () => {\r\n      connection.removeAccountChangeListener(id);\r\n    };\r\n  }, [connection]);\r\n\r\n  useEffect(() => {\r\n    const id = connection.onSlotChange(() => null);\r\n    return () => {\r\n      connection.removeSlotChangeListener(id);\r\n    };\r\n  }, [connection]);\r\n\r\n  return (\r\n    <ConnectionContext.Provider\r\n      value={{\r\n        endpoint,\r\n        setEndpoint,\r\n        connection,\r\n        tokens,\r\n        tokenMap,\r\n        env,\r\n      }}\r\n    >\r\n      {children}\r\n    </ConnectionContext.Provider>\r\n  );\r\n}\r\n\r\nexport function useConnection() {\r\n  return useContext(ConnectionContext).connection as Connection;\r\n}\r\n\r\nexport function useConnectionConfig() {\r\n  const context = useContext(ConnectionContext);\r\n  return {\r\n    endpoint: context.endpoint,\r\n    setEndpoint: context.setEndpoint,\r\n    env: context.env,\r\n    tokens: context.tokens,\r\n    tokenMap: context.tokenMap,\r\n  };\r\n}\r\n\r\nexport const getErrorForTransaction = async (\r\n  connection: Connection,\r\n  txid: string,\r\n) => {\r\n  // wait for all confirmation before geting transaction\r\n  await connection.confirmTransaction(txid, 'max');\r\n\r\n  const tx = await connection.getParsedConfirmedTransaction(txid);\r\n\r\n  const errors: string[] = [];\r\n  if (tx?.meta && tx.meta.logMessages) {\r\n    tx.meta.logMessages.forEach(log => {\r\n      const regex = /Error: (.*)/gm;\r\n      let m;\r\n      while ((m = regex.exec(log)) !== null) {\r\n        // This is necessary to avoid infinite loops with zero-width matches\r\n        if (m.index === regex.lastIndex) {\r\n          regex.lastIndex++;\r\n        }\r\n\r\n        if (m.length > 1) {\r\n          errors.push(m[1]);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  return errors;\r\n};\r\n\r\nexport enum SequenceType {\r\n  Sequential,\r\n  Parallel,\r\n  StopOnFailure,\r\n}\r\n\r\nexport const sendTransactionWithRetry = async (\r\n  connection: Connection,\r\n  wallet: WalletSigner,\r\n  instructions: TransactionInstruction[],\r\n  signers: Keypair[],\r\n  commitment: Commitment = 'singleGossip',\r\n  includesFeePayer: boolean = false,\r\n  block?: BlockhashAndFeeCalculator,\r\n  beforeSend?: () => void,\r\n): Promise<string | { txid: string; slot: number }> => {\r\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\r\n\r\n  let transaction = new Transaction();\r\n  instructions.forEach(instruction => transaction.add(instruction));\r\n  transaction.recentBlockhash = (\r\n    block || (await connection.getRecentBlockhash(commitment))\r\n  ).blockhash;\r\n\r\n  if (includesFeePayer) {\r\n    transaction.setSigners(...signers.map(s => s.publicKey));\r\n  } else {\r\n    transaction.setSigners(\r\n      // fee payed by the wallet owner\r\n      wallet.publicKey,\r\n      ...signers.map(s => s.publicKey),\r\n    );\r\n  }\r\n\r\n  if (signers.length > 0) {\r\n    transaction.partialSign(...signers);\r\n  }\r\n  if (!includesFeePayer) {\r\n    try {\r\n      transaction = await wallet.signTransaction(transaction);\r\n    } catch {\r\n      return 'Failed to sign transaction';\r\n    }\r\n  }\r\n\r\n  if (beforeSend) {\r\n    beforeSend();\r\n  }\r\n  console.log('About to send');\r\n  try {\r\n    const { txid, slot } = await sendSignedTransaction({\r\n      connection,\r\n      signedTransaction: transaction,\r\n    });\r\n\r\n    return { txid, slot };\r\n  } catch (error) {\r\n    console.error(error);\r\n    return 'See console logs';\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}