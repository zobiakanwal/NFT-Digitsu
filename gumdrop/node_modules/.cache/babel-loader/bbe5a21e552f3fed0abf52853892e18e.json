{"ast":null,"code":"import { __values } from \"tslib\";\nimport { ALWAYS_UNSIGNABLE_HEADERS, PROXY_HEADER_PATTERN, SEC_HEADER_PATTERN } from \"./constants\";\nexport var getCanonicalHeaders = function getCanonicalHeaders(_a, unsignableHeaders, signableHeaders) {\n  var e_1, _b;\n\n  var headers = _a.headers;\n  var canonical = {};\n\n  try {\n    for (var _c = __values(Object.keys(headers).sort()), _d = _c.next(); !_d.done; _d = _c.next()) {\n      var headerName = _d.value;\n      var canonicalHeaderName = headerName.toLowerCase();\n\n      if (canonicalHeaderName in ALWAYS_UNSIGNABLE_HEADERS || (unsignableHeaders === null || unsignableHeaders === void 0 ? void 0 : unsignableHeaders.has(canonicalHeaderName)) || PROXY_HEADER_PATTERN.test(canonicalHeaderName) || SEC_HEADER_PATTERN.test(canonicalHeaderName)) {\n        if (!signableHeaders || signableHeaders && !signableHeaders.has(canonicalHeaderName)) {\n          continue;\n        }\n      }\n\n      canonical[canonicalHeaderName] = headers[headerName].trim().replace(/\\s+/g, \" \");\n    }\n  } catch (e_1_1) {\n    e_1 = {\n      error: e_1_1\n    };\n  } finally {\n    try {\n      if (_d && !_d.done && (_b = _c.return)) _b.call(_c);\n    } finally {\n      if (e_1) throw e_1.error;\n    }\n  }\n\n  return canonical;\n};","map":{"version":3,"sources":["C:/Users/AHSAN PC/Desktop/digitsu/gamp/js/node_modules/@aws-sdk/signature-v4/dist-es/getCanonicalHeaders.js"],"names":["__values","ALWAYS_UNSIGNABLE_HEADERS","PROXY_HEADER_PATTERN","SEC_HEADER_PATTERN","getCanonicalHeaders","_a","unsignableHeaders","signableHeaders","e_1","_b","headers","canonical","_c","Object","keys","sort","_d","next","done","headerName","value","canonicalHeaderName","toLowerCase","has","test","trim","replace","e_1_1","error","return","call"],"mappings":"AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,yBAAT,EAAoCC,oBAApC,EAA0DC,kBAA1D,QAAoF,aAApF;AACA,OAAO,IAAIC,mBAAmB,GAAG,SAAtBA,mBAAsB,CAAUC,EAAV,EAAcC,iBAAd,EAAiCC,eAAjC,EAAkD;AAC/E,MAAIC,GAAJ,EAASC,EAAT;;AACA,MAAIC,OAAO,GAAGL,EAAE,CAACK,OAAjB;AACA,MAAIC,SAAS,GAAG,EAAhB;;AACA,MAAI;AACA,SAAK,IAAIC,EAAE,GAAGZ,QAAQ,CAACa,MAAM,CAACC,IAAP,CAAYJ,OAAZ,EAAqBK,IAArB,EAAD,CAAjB,EAAgDC,EAAE,GAAGJ,EAAE,CAACK,IAAH,EAA1D,EAAqE,CAACD,EAAE,CAACE,IAAzE,EAA+EF,EAAE,GAAGJ,EAAE,CAACK,IAAH,EAApF,EAA+F;AAC3F,UAAIE,UAAU,GAAGH,EAAE,CAACI,KAApB;AACA,UAAIC,mBAAmB,GAAGF,UAAU,CAACG,WAAX,EAA1B;;AACA,UAAID,mBAAmB,IAAIpB,yBAAvB,KACCK,iBAAiB,KAAK,IAAtB,IAA8BA,iBAAiB,KAAK,KAAK,CAAzD,GAA6D,KAAK,CAAlE,GAAsEA,iBAAiB,CAACiB,GAAlB,CAAsBF,mBAAtB,CADvE,KAEAnB,oBAAoB,CAACsB,IAArB,CAA0BH,mBAA1B,CAFA,IAGAlB,kBAAkB,CAACqB,IAAnB,CAAwBH,mBAAxB,CAHJ,EAGkD;AAC9C,YAAI,CAACd,eAAD,IAAqBA,eAAe,IAAI,CAACA,eAAe,CAACgB,GAAhB,CAAoBF,mBAApB,CAA7C,EAAwF;AACpF;AACH;AACJ;;AACDV,MAAAA,SAAS,CAACU,mBAAD,CAAT,GAAiCX,OAAO,CAACS,UAAD,CAAP,CAAoBM,IAApB,GAA2BC,OAA3B,CAAmC,MAAnC,EAA2C,GAA3C,CAAjC;AACH;AACJ,GAdD,CAeA,OAAOC,KAAP,EAAc;AAAEnB,IAAAA,GAAG,GAAG;AAAEoB,MAAAA,KAAK,EAAED;AAAT,KAAN;AAAyB,GAfzC,SAgBQ;AACJ,QAAI;AACA,UAAIX,EAAE,IAAI,CAACA,EAAE,CAACE,IAAV,KAAmBT,EAAE,GAAGG,EAAE,CAACiB,MAA3B,CAAJ,EAAwCpB,EAAE,CAACqB,IAAH,CAAQlB,EAAR;AAC3C,KAFD,SAGQ;AAAE,UAAIJ,GAAJ,EAAS,MAAMA,GAAG,CAACoB,KAAV;AAAkB;AACxC;;AACD,SAAOjB,SAAP;AACH,CA3BM","sourcesContent":["import { __values } from \"tslib\";\nimport { ALWAYS_UNSIGNABLE_HEADERS, PROXY_HEADER_PATTERN, SEC_HEADER_PATTERN } from \"./constants\";\nexport var getCanonicalHeaders = function (_a, unsignableHeaders, signableHeaders) {\n    var e_1, _b;\n    var headers = _a.headers;\n    var canonical = {};\n    try {\n        for (var _c = __values(Object.keys(headers).sort()), _d = _c.next(); !_d.done; _d = _c.next()) {\n            var headerName = _d.value;\n            var canonicalHeaderName = headerName.toLowerCase();\n            if (canonicalHeaderName in ALWAYS_UNSIGNABLE_HEADERS ||\n                (unsignableHeaders === null || unsignableHeaders === void 0 ? void 0 : unsignableHeaders.has(canonicalHeaderName)) ||\n                PROXY_HEADER_PATTERN.test(canonicalHeaderName) ||\n                SEC_HEADER_PATTERN.test(canonicalHeaderName)) {\n                if (!signableHeaders || (signableHeaders && !signableHeaders.has(canonicalHeaderName))) {\n                    continue;\n                }\n            }\n            canonical[canonicalHeaderName] = headers[headerName].trim().replace(/\\s+/g, \" \");\n        }\n    }\n    catch (e_1_1) { e_1 = { error: e_1_1 }; }\n    finally {\n        try {\n            if (_d && !_d.done && (_b = _c.return)) _b.call(_c);\n        }\n        finally { if (e_1) throw e_1.error; }\n    }\n    return canonical;\n};\n"]},"metadata":{},"sourceType":"module"}