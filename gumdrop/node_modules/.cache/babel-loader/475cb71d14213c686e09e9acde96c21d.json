{"ast":null,"code":"import _createForOfIteratorHelper from\"C:\\\\Users\\\\AHSAN PC\\\\Desktop\\\\digitsu\\\\gamp\\\\js\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createForOfIteratorHelper.js\";import _asyncToGenerator from\"C:\\\\Users\\\\AHSAN PC\\\\Desktop\\\\digitsu\\\\gamp\\\\js\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";import _regeneratorRuntime from\"C:\\\\Users\\\\AHSAN PC\\\\Desktop\\\\digitsu\\\\gamp\\\\js\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\";import log from'loglevel';import{SESv2Client,SendEmailCommand}from'@aws-sdk/client-sesv2';import{SNSClient,PublishCommand}from'@aws-sdk/client-sns';export var formatDropMessage=function formatDropMessage(info,drop,html){var wrap=function wrap(url,text){if(html){return\"<a href=\\\"\".concat(url,\"\\\">\").concat(text,\"</a>\");}else{return\"\".concat(text,\" \").concat(url);}};if(drop.type==='Token'){return{subject:'Gumdrop Token Drop',message:\"You received \".concat(info.amount,\" token(s) \")+\"(click \".concat(wrap(drop.meta,'here'),\" to view more information about the token mint). \")+wrap(info.url,'Click here to claim them!')};}else if(drop.type==='Candy'){return{subject:'Gumdrop NFT Drop',message:\"You received \".concat(info.amount,\" Candy Machine pre-sale mint(s) \")+\"(click \".concat(wrap(drop.meta,'here'),\" to view the candy machine configuration on explorer). \")+wrap(info.url,'Click here to claim them!')};}else if(drop.type==='Edition'){return{subject:'Gumdrop NFT Drop',message:\"You received \".concat(info.amount,\" limited-edition print(s) \")+\"(click \".concat(wrap(drop.meta,'here'),\" to view the master edition mint on explorer). \")+wrap(info.url,'Click here to claim them!')};}else{throw new Error(\"Internal Error: Unknown drop type \".concat(drop.type));}};export var distributeAwsSns=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(auth,source,claimants,drop){var client,single,responses,_iterator,_step,c;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:if(!(!auth.accessKeyId||!auth.secretAccessKey)){_context2.next=2;break;}throw new Error('AWS SNS auth keys not supplied');case 2:if(!(claimants.length===0)){_context2.next=4;break;}return _context2.abrupt(\"return\",[]);case 4:log.debug('SNS auth',auth);client=new SNSClient({region:'us-east-1',credentials:{accessKeyId:auth.accessKeyId,secretAccessKey:auth.secretAccessKey}});single=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(info,drop){var formatted,message,response;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:formatted=formatDropMessage(info,drop,false);message={Message:formatted.message,PhoneNumber:info.handle};_context.prev=2;_context.next=5;return client.send(new PublishCommand(message));case 5:response=_context.sent;return _context.abrupt(\"return\",{status:'success',handle:info.handle,messageId:response.MessageId});case 9:_context.prev=9;_context.t0=_context[\"catch\"](2);return _context.abrupt(\"return\",{status:'error',handle:info.handle,error:_context.t0});case 12:case\"end\":return _context.stop();}}},_callee,null,[[2,9]]);}));return function single(_x5,_x6){return _ref2.apply(this,arguments);};}();responses=Array();_iterator=_createForOfIteratorHelper(claimants);_context2.prev=9;_iterator.s();case 11:if((_step=_iterator.n()).done){_context2.next=20;break;}c=_step.value;_context2.t0=responses;_context2.next=16;return single(c,drop);case 16:_context2.t1=_context2.sent;_context2.t0.push.call(_context2.t0,_context2.t1);case 18:_context2.next=11;break;case 20:_context2.next=25;break;case 22:_context2.prev=22;_context2.t2=_context2[\"catch\"](9);_iterator.e(_context2.t2);case 25:_context2.prev=25;_iterator.f();return _context2.finish(25);case 28:return _context2.abrupt(\"return\",responses);case 29:case\"end\":return _context2.stop();}}},_callee2,null,[[9,22,25,28]]);}));return function distributeAwsSns(_x,_x2,_x3,_x4){return _ref.apply(this,arguments);};}();export var distributeAwsSes=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(auth,source,claimants,drop){var client,single,responses,_iterator2,_step2,c;return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:if(!(!auth.accessKeyId||!auth.secretAccessKey)){_context4.next=2;break;}throw new Error('AWS SES auth keys not supplied');case 2:if(!(claimants.length===0)){_context4.next=4;break;}return _context4.abrupt(\"return\",[]);case 4:log.debug('SES auth',auth);client=new SESv2Client({region:'us-east-2',credentials:{accessKeyId:auth.accessKeyId,secretAccessKey:auth.secretAccessKey}});// TODO: move to template + bulk message?\nsingle=/*#__PURE__*/function(){var _ref4=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(info,drop){var formatted,message,response;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:formatted=formatDropMessage(info,drop,true);message={Destination:{ToAddresses:[info.handle]},Content:{Simple:{Subject:{Data:formatted.subject,Charset:'utf-8'},Body:{Html:{Data:formatted.message+'<br><br>'+'<div>'+'If you would like to unsubscribe from new Gumdrops, '+'change your subscription preferences here: '+\"<a href='{{amazonSESUnsubscribeUrl}}'>AWS subscription preferences</a>\"+'</div>',Charset:'utf-8'}}}},FromEmailAddress:source,ListManagementOptions:{ContactListName:'Gumdrop',TopicName:drop.type}};_context3.prev=2;_context3.next=5;return client.send(new SendEmailCommand(message));case 5:response=_context3.sent;return _context3.abrupt(\"return\",{status:'success',handle:info.handle,messageId:response.MessageId});case 9:_context3.prev=9;_context3.t0=_context3[\"catch\"](2);return _context3.abrupt(\"return\",{status:'error',handle:info.handle,error:_context3.t0});case 12:case\"end\":return _context3.stop();}}},_callee3,null,[[2,9]]);}));return function single(_x11,_x12){return _ref4.apply(this,arguments);};}();responses=Array();_iterator2=_createForOfIteratorHelper(claimants);_context4.prev=9;_iterator2.s();case 11:if((_step2=_iterator2.n()).done){_context4.next=20;break;}c=_step2.value;_context4.t0=responses;_context4.next=16;return single(c,drop);case 16:_context4.t1=_context4.sent;_context4.t0.push.call(_context4.t0,_context4.t1);case 18:_context4.next=11;break;case 20:_context4.next=25;break;case 22:_context4.prev=22;_context4.t2=_context4[\"catch\"](9);_iterator2.e(_context4.t2);case 25:_context4.prev=25;_iterator2.f();return _context4.finish(25);case 28:return _context4.abrupt(\"return\",responses);case 29:case\"end\":return _context4.stop();}}},_callee4,null,[[9,22,25,28]]);}));return function distributeAwsSes(_x7,_x8,_x9,_x10){return _ref3.apply(this,arguments);};}();/* eslint-disable @typescript-eslint/no-unused-vars */export var distributeManual=/*#__PURE__*/function(){var _ref5=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(auth,source,claimants,drop){return _regeneratorRuntime.wrap(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:return _context5.abrupt(\"return\",Array());case 1:case\"end\":return _context5.stop();}}},_callee5);}));return function distributeManual(_x13,_x14,_x15,_x16){return _ref5.apply(this,arguments);};}();export var distributeWallet=/*#__PURE__*/function(){var _ref6=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(auth,source,claimants,drop){return _regeneratorRuntime.wrap(function _callee6$(_context6){while(1){switch(_context6.prev=_context6.next){case 0:return _context6.abrupt(\"return\",Array());case 1:case\"end\":return _context6.stop();}}},_callee6);}));return function distributeWallet(_x17,_x18,_x19,_x20){return _ref6.apply(this,arguments);};}();/* eslint-enable @typescript-eslint/no-unused-vars */export var urlAndHandleFor=function urlAndHandleFor(claimants){return claimants.map(function(info){return{handle:info.handle,amount:info.amount,url:info.url};});};","map":{"version":3,"sources":["C:/Users/AHSAN PC/Desktop/digitsu/gamp/js/packages/gumdrop/src/utils/communication.ts"],"names":["log","SESv2Client","SendEmailCommand","SNSClient","PublishCommand","formatDropMessage","info","drop","html","wrap","url","text","type","subject","message","amount","meta","Error","distributeAwsSns","auth","source","claimants","accessKeyId","secretAccessKey","length","debug","client","region","credentials","single","formatted","Message","PhoneNumber","handle","send","response","status","messageId","MessageId","error","responses","Array","c","push","distributeAwsSes","Destination","ToAddresses","Content","Simple","Subject","Data","Charset","Body","Html","FromEmailAddress","ListManagementOptions","ContactListName","TopicName","distributeManual","distributeWallet","urlAndHandleFor","map"],"mappings":"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","sourcesContent":["import log from 'loglevel';\r\nimport { SESv2Client, SendEmailCommand } from '@aws-sdk/client-sesv2';\r\nimport { SNSClient, PublishCommand } from '@aws-sdk/client-sns';\r\n\r\nimport { ClaimantInfo, Claimants } from './claimant';\r\n\r\nexport type AuthKeys = { [key: string]: string };\r\nexport type Response = { [key: string]: any };\r\n\r\nexport type DropInfo = {\r\n  type: string;\r\n  meta: string;\r\n};\r\n\r\nexport const formatDropMessage = (\r\n  info: ClaimantInfo,\r\n  drop: DropInfo,\r\n  html: boolean,\r\n) => {\r\n  const wrap = (url, text) => {\r\n    if (html) {\r\n      return `<a href=\"${url}\">${text}</a>`;\r\n    } else {\r\n      return `${text} ${url}`;\r\n    }\r\n  };\r\n  if (drop.type === 'Token') {\r\n    return {\r\n      subject: 'Gumdrop Token Drop',\r\n      message:\r\n        `You received ${info.amount} token(s) ` +\r\n        `(click ${wrap(\r\n          drop.meta,\r\n          'here',\r\n        )} to view more information about the token mint). ` +\r\n        wrap(info.url, 'Click here to claim them!'),\r\n    };\r\n  } else if (drop.type === 'Candy') {\r\n    return {\r\n      subject: 'Gumdrop NFT Drop',\r\n      message:\r\n        `You received ${info.amount} Candy Machine pre-sale mint(s) ` +\r\n        `(click ${wrap(\r\n          drop.meta,\r\n          'here',\r\n        )} to view the candy machine configuration on explorer). ` +\r\n        wrap(info.url, 'Click here to claim them!'),\r\n    };\r\n  } else if (drop.type === 'Edition') {\r\n    return {\r\n      subject: 'Gumdrop NFT Drop',\r\n      message:\r\n        `You received ${info.amount} limited-edition print(s) ` +\r\n        `(click ${wrap(\r\n          drop.meta,\r\n          'here',\r\n        )} to view the master edition mint on explorer). ` +\r\n        wrap(info.url, 'Click here to claim them!'),\r\n    };\r\n  } else {\r\n    throw new Error(`Internal Error: Unknown drop type ${drop.type}`);\r\n  }\r\n};\r\n\r\nexport const distributeAwsSns = async (\r\n  auth: AuthKeys,\r\n  source: string,\r\n  claimants: Claimants,\r\n  drop: DropInfo,\r\n) => {\r\n  if (!auth.accessKeyId || !auth.secretAccessKey) {\r\n    throw new Error('AWS SNS auth keys not supplied');\r\n  }\r\n  if (claimants.length === 0) return [];\r\n\r\n  log.debug('SNS auth', auth);\r\n  const client = new SNSClient({\r\n    region: 'us-east-1',\r\n    credentials: {\r\n      accessKeyId: auth.accessKeyId,\r\n      secretAccessKey: auth.secretAccessKey,\r\n    },\r\n  });\r\n\r\n  const single = async (info: ClaimantInfo, drop: DropInfo) => {\r\n    const formatted = formatDropMessage(info, drop, false);\r\n    const message = {\r\n      Message: formatted.message,\r\n      PhoneNumber: info.handle,\r\n    };\r\n\r\n    try {\r\n      const response = await client.send(new PublishCommand(message));\r\n      return {\r\n        status: 'success',\r\n        handle: info.handle,\r\n        messageId: response.MessageId,\r\n      };\r\n    } catch (err) {\r\n      return {\r\n        status: 'error',\r\n        handle: info.handle,\r\n        error: err,\r\n      };\r\n    }\r\n  };\r\n\r\n  const responses = Array<Response>();\r\n  for (const c of claimants) {\r\n    responses.push(await single(c, drop));\r\n  }\r\n  return responses;\r\n};\r\n\r\nexport const distributeAwsSes = async (\r\n  auth: AuthKeys,\r\n  source: string,\r\n  claimants: Claimants,\r\n  drop: DropInfo,\r\n) => {\r\n  if (!auth.accessKeyId || !auth.secretAccessKey) {\r\n    throw new Error('AWS SES auth keys not supplied');\r\n  }\r\n  if (claimants.length === 0) return [];\r\n\r\n  log.debug('SES auth', auth);\r\n  const client = new SESv2Client({\r\n    region: 'us-east-2',\r\n    credentials: {\r\n      accessKeyId: auth.accessKeyId,\r\n      secretAccessKey: auth.secretAccessKey,\r\n    },\r\n  });\r\n\r\n  // TODO: move to template + bulk message?\r\n  const single = async (info: ClaimantInfo, drop: DropInfo) => {\r\n    const formatted = formatDropMessage(info, drop, true);\r\n    const message = {\r\n      Destination: {\r\n        ToAddresses: [info.handle],\r\n      },\r\n      Content: {\r\n        Simple: {\r\n          Subject: {\r\n            Data: formatted.subject,\r\n            Charset: 'utf-8',\r\n          },\r\n          Body: {\r\n            Html: {\r\n              Data:\r\n                formatted.message +\r\n                '<br><br>' +\r\n                '<div>' +\r\n                'If you would like to unsubscribe from new Gumdrops, ' +\r\n                'change your subscription preferences here: ' +\r\n                \"<a href='{{amazonSESUnsubscribeUrl}}'>AWS subscription preferences</a>\" +\r\n                '</div>',\r\n              Charset: 'utf-8',\r\n            },\r\n          },\r\n        },\r\n      },\r\n      FromEmailAddress: source,\r\n      ListManagementOptions: {\r\n        ContactListName: 'Gumdrop',\r\n        TopicName: drop.type,\r\n      },\r\n    };\r\n\r\n    try {\r\n      const response = await client.send(new SendEmailCommand(message));\r\n      return {\r\n        status: 'success',\r\n        handle: info.handle,\r\n        messageId: response.MessageId,\r\n      };\r\n    } catch (err) {\r\n      return {\r\n        status: 'error',\r\n        handle: info.handle,\r\n        error: err,\r\n      };\r\n    }\r\n  };\r\n\r\n  const responses = Array<Response>();\r\n  for (const c of claimants) {\r\n    responses.push(await single(c, drop));\r\n  }\r\n  return responses;\r\n};\r\n\r\n/* eslint-disable @typescript-eslint/no-unused-vars */\r\nexport const distributeManual = async (\r\n  auth: AuthKeys,\r\n  source: string,\r\n  claimants: Claimants,\r\n  drop: DropInfo,\r\n) => {\r\n  return Array<Response>();\r\n};\r\n\r\nexport const distributeWallet = async (\r\n  auth: AuthKeys,\r\n  source: string,\r\n  claimants: Claimants,\r\n  drop: DropInfo,\r\n) => {\r\n  return Array<Response>();\r\n};\r\n/* eslint-enable @typescript-eslint/no-unused-vars */\r\n\r\nexport const urlAndHandleFor = (claimants: Array<ClaimantInfo>) => {\r\n  return claimants.map(info => {\r\n    return {\r\n      handle: info.handle,\r\n      amount: info.amount,\r\n      url: info.url,\r\n    };\r\n  });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}