{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.processAuctions = void 0;\n\nvar actions_1 = require(\"../../actions\");\n\nvar utils_1 = require(\"../../utils\");\n\nvar accounts_1 = require(\"../accounts\");\n\nvar processAuctions = function processAuctions(_ref, setter) {\n  var account = _ref.account,\n      pubkey = _ref.pubkey;\n  if (!isAuctionAccount(account)) return;\n\n  try {\n    var parsedAccount = accounts_1.cache.add(pubkey, account, actions_1.AuctionParser, false);\n    setter('auctions', pubkey, parsedAccount);\n  } catch (e) {// ignore errors\n    // add type as first byte for easier deserialization\n  }\n\n  try {\n    if (isExtendedAuctionAccount(account)) {\n      var _parsedAccount = accounts_1.cache.add(pubkey, account, actions_1.AuctionDataExtendedParser, false);\n\n      setter('auctionDataExtended', pubkey, _parsedAccount);\n    }\n  } catch (_unused) {// ignore errors\n    // add type as first byte for easier deserialization\n  }\n\n  try {\n    if (isBidderMetadataAccount(account)) {\n      var _parsedAccount2 = accounts_1.cache.add(pubkey, account, actions_1.BidderMetadataParser, false);\n\n      setter('bidderMetadataByAuctionAndBidder', _parsedAccount2.info.auctionPubkey + '-' + _parsedAccount2.info.bidderPubkey, _parsedAccount2);\n    }\n  } catch (_unused2) {// ignore errors\n    // add type as first byte for easier deserialization\n  }\n\n  try {\n    if (isBidderPotAccount(account)) {\n      var _parsedAccount3 = accounts_1.cache.add(pubkey, account, actions_1.BidderPotParser, false);\n\n      setter('bidderPotsByAuctionAndBidder', _parsedAccount3.info.auctionAct + '-' + _parsedAccount3.info.bidderAct, _parsedAccount3);\n    }\n  } catch (_unused3) {// ignore errors\n    // add type as first byte for easier deserialization\n  }\n};\n\nexports.processAuctions = processAuctions;\n\nvar isAuctionAccount = function isAuctionAccount(account) {\n  return account && (0, utils_1.pubkeyToString)(account.owner) === utils_1.AUCTION_ID;\n};\n\nvar isExtendedAuctionAccount = function isExtendedAuctionAccount(account) {\n  return account.data.length === actions_1.MAX_AUCTION_DATA_EXTENDED_SIZE;\n};\n\nvar isBidderMetadataAccount = function isBidderMetadataAccount(account) {\n  return account.data.length === actions_1.BIDDER_METADATA_LEN;\n};\n\nvar isBidderPotAccount = function isBidderPotAccount(account) {\n  return account.data.length === actions_1.BIDDER_POT_LEN;\n};","map":{"version":3,"sources":["../../../../src/contexts/meta/processAuctions.ts"],"names":[],"mappings":";;;;;;;AAAA,IAAA,SAAA,GAAA,OAAA,CAAA,eAAA,CAAA;;AAaA,IAAA,OAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;AAEA,IAAA,UAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;AAGO,IAAM,eAAe,GAAwB,SAAvC,eAAuC,OAElD,MAFkD,EAGhD;AAAA,MAFA,OAEA,QAFA,OAEA;AAAA,MAFS,MAET,QAFS,MAET;AACF,MAAI,CAAC,gBAAgB,CAAC,OAAD,CAArB,EAAgC;;AAEhC,MAAI;AACF,QAAM,aAAa,GAAG,UAAA,CAAA,KAAA,CAAM,GAAN,CACpB,MADoB,EAEpB,OAFoB,EAGpB,SAAA,CAAA,aAHoB,EAIpB,KAJoB,CAAtB;AAMA,IAAA,MAAM,CAAC,UAAD,EAAa,MAAb,EAAqB,aAArB,CAAN;AACD,GARD,CAQE,OAAO,CAAP,EAAU,CACV;AACA;AACD;;AAED,MAAI;AACF,QAAI,wBAAwB,CAAC,OAAD,CAA5B,EAAuC;AACrC,UAAM,cAAa,GAAG,UAAA,CAAA,KAAA,CAAM,GAAN,CACpB,MADoB,EAEpB,OAFoB,EAGpB,SAAA,CAAA,yBAHoB,EAIpB,KAJoB,CAAtB;;AAMA,MAAA,MAAM,CAAC,qBAAD,EAAwB,MAAxB,EAAgC,cAAhC,CAAN;AACD;AACF,GAVD,CAUE,gBAAM,CACN;AACA;AACD;;AAED,MAAI;AACF,QAAI,uBAAuB,CAAC,OAAD,CAA3B,EAAsC;AACpC,UAAM,eAAa,GAAG,UAAA,CAAA,KAAA,CAAM,GAAN,CACpB,MADoB,EAEpB,OAFoB,EAGpB,SAAA,CAAA,oBAHoB,EAIpB,KAJoB,CAAtB;;AAMA,MAAA,MAAM,CACJ,kCADI,EAEJ,eAAa,CAAC,IAAd,CAAmB,aAAnB,GACE,GADF,GAEE,eAAa,CAAC,IAAd,CAAmB,YAJjB,EAKJ,eALI,CAAN;AAOD;AACF,GAhBD,CAgBE,iBAAM,CACN;AACA;AACD;;AAED,MAAI;AACF,QAAI,kBAAkB,CAAC,OAAD,CAAtB,EAAiC;AAC/B,UAAM,eAAa,GAAG,UAAA,CAAA,KAAA,CAAM,GAAN,CACpB,MADoB,EAEpB,OAFoB,EAGpB,SAAA,CAAA,eAHoB,EAIpB,KAJoB,CAAtB;;AAMA,MAAA,MAAM,CACJ,8BADI,EAEJ,eAAa,CAAC,IAAd,CAAmB,UAAnB,GAAgC,GAAhC,GAAsC,eAAa,CAAC,IAAd,CAAmB,SAFrD,EAGJ,eAHI,CAAN;AAKD;AACF,GAdD,CAcE,iBAAM,CACN;AACA;AACD;AACF,CAzEM;;AAAM,OAAA,CAAA,eAAA,GAAe,eAAf;;AA2Eb,IAAM,gBAAgB,GAAqB,SAArC,gBAAqC,CAAA,OAAO;AAAA,SAChD,OAAO,IAAI,CAAA,GAAA,OAAA,CAAA,cAAA,EAAe,OAAO,CAAC,KAAvB,MAAkC,OAAA,CAAA,UADG;AAAA,CAAlD;;AAGA,IAAM,wBAAwB,GAAqB,SAA7C,wBAA6C,CAAA,OAAO;AAAA,SACxD,OAAO,CAAC,IAAR,CAAa,MAAb,KAAwB,SAAA,CAAA,8BADgC;AAAA,CAA1D;;AAGA,IAAM,uBAAuB,GAAqB,SAA5C,uBAA4C,CAAA,OAAO;AAAA,SACvD,OAAO,CAAC,IAAR,CAAa,MAAb,KAAwB,SAAA,CAAA,mBAD+B;AAAA,CAAzD;;AAGA,IAAM,kBAAkB,GAAqB,SAAvC,kBAAuC,CAAA,OAAO;AAAA,SAClD,OAAO,CAAC,IAAR,CAAa,MAAb,KAAwB,SAAA,CAAA,cAD0B;AAAA,CAApD","sourceRoot":"","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.processAuctions = void 0;\r\nconst actions_1 = require(\"../../actions\");\r\nconst utils_1 = require(\"../../utils\");\r\nconst accounts_1 = require(\"../accounts\");\r\nconst processAuctions = ({ account, pubkey }, setter) => {\r\n    if (!isAuctionAccount(account))\r\n        return;\r\n    try {\r\n        const parsedAccount = accounts_1.cache.add(pubkey, account, actions_1.AuctionParser, false);\r\n        setter('auctions', pubkey, parsedAccount);\r\n    }\r\n    catch (e) {\r\n        // ignore errors\r\n        // add type as first byte for easier deserialization\r\n    }\r\n    try {\r\n        if (isExtendedAuctionAccount(account)) {\r\n            const parsedAccount = accounts_1.cache.add(pubkey, account, actions_1.AuctionDataExtendedParser, false);\r\n            setter('auctionDataExtended', pubkey, parsedAccount);\r\n        }\r\n    }\r\n    catch {\r\n        // ignore errors\r\n        // add type as first byte for easier deserialization\r\n    }\r\n    try {\r\n        if (isBidderMetadataAccount(account)) {\r\n            const parsedAccount = accounts_1.cache.add(pubkey, account, actions_1.BidderMetadataParser, false);\r\n            setter('bidderMetadataByAuctionAndBidder', parsedAccount.info.auctionPubkey +\r\n                '-' +\r\n                parsedAccount.info.bidderPubkey, parsedAccount);\r\n        }\r\n    }\r\n    catch {\r\n        // ignore errors\r\n        // add type as first byte for easier deserialization\r\n    }\r\n    try {\r\n        if (isBidderPotAccount(account)) {\r\n            const parsedAccount = accounts_1.cache.add(pubkey, account, actions_1.BidderPotParser, false);\r\n            setter('bidderPotsByAuctionAndBidder', parsedAccount.info.auctionAct + '-' + parsedAccount.info.bidderAct, parsedAccount);\r\n        }\r\n    }\r\n    catch {\r\n        // ignore errors\r\n        // add type as first byte for easier deserialization\r\n    }\r\n};\r\nexports.processAuctions = processAuctions;\r\nconst isAuctionAccount = account => account && (0, utils_1.pubkeyToString)(account.owner) === utils_1.AUCTION_ID;\r\nconst isExtendedAuctionAccount = account => account.data.length === actions_1.MAX_AUCTION_DATA_EXTENDED_SIZE;\r\nconst isBidderMetadataAccount = account => account.data.length === actions_1.BIDDER_METADATA_LEN;\r\nconst isBidderPotAccount = account => account.data.length === actions_1.BIDDER_POT_LEN;\r\n//# sourceMappingURL=processAuctions.js.map"]},"metadata":{},"sourceType":"script"}