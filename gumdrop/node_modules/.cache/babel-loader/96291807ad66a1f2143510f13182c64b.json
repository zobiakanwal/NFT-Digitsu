{"ast":null,"code":"import _objectWithoutProperties from\"C:\\\\Users\\\\AHSAN PC\\\\Desktop\\\\digitsu\\\\gamp\\\\js\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\objectWithoutProperties.js\";import _slicedToArray from\"C:\\\\Users\\\\AHSAN PC\\\\Desktop\\\\digitsu\\\\gamp\\\\js\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\slicedToArray.js\";import _createForOfIteratorHelper from\"C:\\\\Users\\\\AHSAN PC\\\\Desktop\\\\digitsu\\\\gamp\\\\js\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createForOfIteratorHelper.js\";import _objectSpread from\"C:\\\\Users\\\\AHSAN PC\\\\Desktop\\\\digitsu\\\\gamp\\\\js\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\objectSpread2.js\";import _asyncToGenerator from\"C:\\\\Users\\\\AHSAN PC\\\\Desktop\\\\digitsu\\\\gamp\\\\js\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";var _excluded=[\"data\"];import _regeneratorRuntime from\"C:\\\\Users\\\\AHSAN PC\\\\Desktop\\\\digitsu\\\\gamp\\\\js\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\";import React,{useCallback,useContext,useEffect,useState}from'react';import{useConnection}from'./ConnectionContext';import{useWallet}from'@solana/wallet-adapter-react';import{PublicKey}from'@solana/web3.js';import{AccountLayout,MintLayout,u64}from'@solana/spl-token';import{EventEmitter,programIds,chunks,WRAPPED_SOL_MINT}from'@oyster/common';import{jsx as _jsx}from\"react/jsx-runtime\";var AccountsContext=/*#__PURE__*/React.createContext(null);var pendingCalls=new Map();var genericCache=new Map();var pendingMintCalls=new Map();var mintCache=new Map();var getMintInfo=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(connection,pubKey){var info,data;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return connection.getAccountInfo(pubKey);case 2:info=_context.sent;if(!(info===null)){_context.next=5;break;}throw new Error('Failed to find mint account');case 5:data=Buffer.from(info.data);return _context.abrupt(\"return\",deserializeMint(data));case 7:case\"end\":return _context.stop();}}},_callee);}));return function getMintInfo(_x,_x2){return _ref.apply(this,arguments);};}();export var MintParser=function MintParser(pubKey,info){var buffer=Buffer.from(info.data);var data=deserializeMint(buffer);var details={pubkey:pubKey,account:_objectSpread({},info),info:data};return details;};export var TokenAccountParser=function TokenAccountParser(pubKey,info){// Sometimes a wrapped sol account gets closed, goes to 0 length,\n// triggers an update over wss which triggers this guy to get called\n// since your UI already logged that pubkey as a token account. Check for length.\nif(info.data.length>0){var buffer=Buffer.from(info.data);var _data=deserializeAccount(buffer);var details={pubkey:pubKey,account:_objectSpread({},info),info:_data};return details;}};export var GenericAccountParser=function GenericAccountParser(pubKey,info){var buffer=Buffer.from(info.data);var details={pubkey:pubKey,account:_objectSpread({},info),info:buffer};return details;};export var keyToAccountParser=new Map();export var cache={emitter:new EventEmitter(),query:function(){var _query=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(connection,pubKey,parser){var id,address,account,query;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:if(typeof pubKey==='string'){id=new PublicKey(pubKey);}else{id=pubKey;}address=id.toBase58();account=genericCache.get(address);if(!account){_context2.next=5;break;}return _context2.abrupt(\"return\",account);case 5:query=pendingCalls.get(address);if(!query){_context2.next=8;break;}return _context2.abrupt(\"return\",query);case 8:// TODO: refactor to use multiple accounts query with flush like behavior\nquery=connection.getAccountInfo(id).then(function(data){if(!data){throw new Error('Account not found');}return cache.add(id,data,parser);});pendingCalls.set(address,query);return _context2.abrupt(\"return\",query);case 11:case\"end\":return _context2.stop();}}},_callee2);}));function query(_x3,_x4,_x5){return _query.apply(this,arguments);}return query;}(),add:function add(id,obj,parser,isActive){var address=typeof id==='string'?id:id===null||id===void 0?void 0:id.toBase58();var deserialize=parser?parser:keyToAccountParser.get(address);if(!deserialize){throw new Error('Deserializer needs to be registered or passed as a parameter');}cache.registerParser(id,deserialize);pendingCalls.delete(address);var account=deserialize(address,obj);if(!account){return;}if(isActive===undefined)isActive=true;else if(isActive instanceof Function)isActive=isActive(account);var isNew=!genericCache.has(address);genericCache.set(address,account);cache.emitter.raiseCacheUpdated(address,isNew,deserialize,isActive);return account;},get:function get(pubKey){var key;if(typeof pubKey!=='string'){key=pubKey.toBase58();}else{key=pubKey;}return genericCache.get(key);},delete:function _delete(pubKey){var key;if(typeof pubKey!=='string'){key=pubKey.toBase58();}else{key=pubKey;}if(genericCache.get(key)){genericCache.delete(key);cache.emitter.raiseCacheDeleted(key);return true;}return false;},byParser:function byParser(parser){var result=[];var _iterator=_createForOfIteratorHelper(keyToAccountParser.keys()),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var id=_step.value;if(keyToAccountParser.get(id)===parser){result.push(id);}}}catch(err){_iterator.e(err);}finally{_iterator.f();}return result;},registerParser:function registerParser(pubkey,parser){if(pubkey){var address=typeof pubkey==='string'?pubkey:pubkey===null||pubkey===void 0?void 0:pubkey.toBase58();keyToAccountParser.set(address,parser);}return pubkey;},queryMint:function(){var _queryMint=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(connection,pubKey){var id,address,mint,query;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:if(typeof pubKey==='string'){id=new PublicKey(pubKey);}else{id=pubKey;}address=id.toBase58();mint=mintCache.get(address);if(!mint){_context3.next=5;break;}return _context3.abrupt(\"return\",mint);case 5:query=pendingMintCalls.get(address);if(!query){_context3.next=8;break;}return _context3.abrupt(\"return\",query);case 8:query=getMintInfo(connection,id).then(function(data){pendingMintCalls.delete(address);mintCache.set(address,data);return data;});pendingMintCalls.set(address,query);return _context3.abrupt(\"return\",query);case 11:case\"end\":return _context3.stop();}}},_callee3);}));function queryMint(_x6,_x7){return _queryMint.apply(this,arguments);}return queryMint;}(),getMint:function getMint(pubKey){var key;if(typeof pubKey!=='string'){key=pubKey.toBase58();}else{key=pubKey;}return mintCache.get(key);},addMint:function addMint(pubKey,obj){var mint=deserializeMint(obj.data);var id=pubKey.toBase58();mintCache.set(id,mint);return mint;}};export var useAccountsContext=function useAccountsContext(){var context=useContext(AccountsContext);return context;};function wrapNativeAccount(pubkey,account){if(!account){return undefined;}var key=new PublicKey(pubkey);return{pubkey:pubkey,account:account,info:{address:key,mint:WRAPPED_SOL_MINT,owner:key,amount:new u64(account.lamports),delegate:null,delegatedAmount:new u64(0),isInitialized:true,isFrozen:false,isNative:true,rentExemptReserve:null,closeAuthority:null}};}export var getCachedAccount=function getCachedAccount(predicate){var _iterator2=_createForOfIteratorHelper(genericCache.values()),_step2;try{for(_iterator2.s();!(_step2=_iterator2.n()).done;){var _account=_step2.value;if(predicate(_account)){return _account;}}}catch(err){_iterator2.e(err);}finally{_iterator2.f();}};var UseNativeAccount=function UseNativeAccount(){var connection=useConnection();var _useWallet=useWallet(),publicKey=_useWallet.publicKey;var _useState=useState(),_useState2=_slicedToArray(_useState,2),nativeAccount=_useState2[0],setNativeAccount=_useState2[1];var updateCache=useCallback(function(account){if(publicKey){var wrapped=wrapNativeAccount(publicKey.toBase58(),account);if(wrapped!==undefined){var id=publicKey.toBase58();cache.registerParser(id,TokenAccountParser);genericCache.set(id,wrapped);cache.emitter.raiseCacheUpdated(id,false,TokenAccountParser,true);}}},[publicKey]);useEffect(function(){var subId=0;var updateAccount=function updateAccount(account){if(account){updateCache(account);setNativeAccount(account);}};_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(){var _account2;return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:if(!(!connection||!publicKey)){_context4.next=2;break;}return _context4.abrupt(\"return\");case 2:_context4.prev=2;_context4.next=5;return connection.getAccountInfo(publicKey);case 5:_account2=_context4.sent;updateAccount(_account2);_context4.next=12;break;case 9:_context4.prev=9;_context4.t0=_context4[\"catch\"](2);return _context4.abrupt(\"return\");case 12:subId=connection.onAccountChange(publicKey,updateAccount);case 13:case\"end\":return _context4.stop();}}},_callee4,null,[[2,9]]);}))();return function(){if(subId){connection.removeAccountChangeListener(subId);}};},[setNativeAccount,publicKey,connection,updateCache]);return{nativeAccount:nativeAccount};};var PRECACHED_OWNERS=new Set();var precacheUserTokenAccounts=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(connection,owner){var accounts;return _regeneratorRuntime.wrap(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:if(owner){_context5.next=2;break;}return _context5.abrupt(\"return\");case 2:// used for filtering account updates over websocket\nPRECACHED_OWNERS.add(owner.toBase58());// user accounts are updated via ws subscription\n_context5.next=5;return connection.getTokenAccountsByOwner(owner,{programId:programIds().token});case 5:accounts=_context5.sent;accounts.value.forEach(function(info){cache.add(info.pubkey.toBase58(),info.account,TokenAccountParser);});case 7:case\"end\":return _context5.stop();}}},_callee5);}));return function precacheUserTokenAccounts(_x8,_x9){return _ref3.apply(this,arguments);};}();export function AccountsProvider(_ref4){var _ref4$children=_ref4.children,children=_ref4$children===void 0?undefined:_ref4$children;var connection=useConnection();var _useWallet2=useWallet(),publicKey=_useWallet2.publicKey;var _useState3=useState([]),_useState4=_slicedToArray(_useState3,2),tokenAccounts=_useState4[0],setTokenAccounts=_useState4[1];var _useState5=useState([]),_useState6=_slicedToArray(_useState5,2),userAccounts=_useState6[0],setUserAccounts=_useState6[1];var _UseNativeAccount=UseNativeAccount(),nativeAccount=_UseNativeAccount.nativeAccount;var walletKey=publicKey===null||publicKey===void 0?void 0:publicKey.toBase58();var selectUserAccounts=useCallback(function(){return cache.byParser(TokenAccountParser).map(function(id){return cache.get(id);}).filter(function(a){return a&&a.info.owner.toBase58()===walletKey;}).map(function(a){return a;});},[walletKey]);useEffect(function(){var accounts=selectUserAccounts().filter(function(a){return a!==undefined;});setUserAccounts(accounts);},[nativeAccount,tokenAccounts,selectUserAccounts]);useEffect(function(){var subs=[];cache.emitter.onCache(function(args){if(args.isNew&&args.isActive){var id=args.id;var deserialize=args.parser;connection.onAccountChange(new PublicKey(id),function(info){cache.add(id,info,deserialize);});}});return function(){subs.forEach(function(id){return connection.removeAccountChangeListener(id);});};},[connection]);useEffect(function(){if(!connection||!publicKey){setTokenAccounts([]);}else{precacheUserTokenAccounts(connection,publicKey).then(function(){setTokenAccounts(selectUserAccounts());});// This can return different types of accounts: token-account, mint, multisig\n// TODO: web3.js expose ability to filter.\n// this should use only filter syntax to only get accounts that are owned by user\nvar tokenSubID=connection.onProgramAccountChange(programIds().token,function(info){// TODO: fix type in web3.js\nvar id=info.accountId;// TODO: do we need a better way to identify layout (maybe a enum identifing type?)\nif(info.accountInfo.data.length===AccountLayout.span){var _data2=deserializeAccount(info.accountInfo.data);if(PRECACHED_OWNERS.has(_data2.owner.toBase58())){cache.add(id,info.accountInfo,TokenAccountParser);setTokenAccounts(selectUserAccounts());}}},'singleGossip');return function(){connection.removeProgramAccountChangeListener(tokenSubID);};}},[connection,publicKey,selectUserAccounts]);return/*#__PURE__*/_jsx(AccountsContext.Provider,{value:{userAccounts:userAccounts,nativeAccount:nativeAccount},children:children});}export function useNativeAccount(){var context=useContext(AccountsContext);return{account:context.nativeAccount};}export var getMultipleAccounts=/*#__PURE__*/function(){var _ref5=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(connection,keys,commitment){var result,array;return _regeneratorRuntime.wrap(function _callee6$(_context6){while(1){switch(_context6.prev=_context6.next){case 0:_context6.next=2;return Promise.all(chunks(keys,99).map(function(chunk){return getMultipleAccountsCore(connection,chunk,commitment);}));case 2:result=_context6.sent;array=result.map(function(a){return a.array.map(function(acc){if(!acc){return undefined;}var data=acc.data,rest=_objectWithoutProperties(acc,_excluded);var obj=_objectSpread(_objectSpread({},rest),{},{data:Buffer.from(data[0],'base64')});return obj;});}).flat();return _context6.abrupt(\"return\",{keys:keys,array:array});case 5:case\"end\":return _context6.stop();}}},_callee6);}));return function getMultipleAccounts(_x10,_x11,_x12){return _ref5.apply(this,arguments);};}();var getMultipleAccountsCore=/*#__PURE__*/function(){var _ref6=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7(connection,keys,commitment){var args,unsafeRes,array;return _regeneratorRuntime.wrap(function _callee7$(_context7){while(1){switch(_context7.prev=_context7.next){case 0:args=connection._buildArgs([keys],commitment,'base64');_context7.next=3;return connection._rpcRequest('getMultipleAccounts',args);case 3:unsafeRes=_context7.sent;if(!unsafeRes.error){_context7.next=6;break;}throw new Error('failed to get info about account '+unsafeRes.error.message);case 6:if(!unsafeRes.result.value){_context7.next=9;break;}array=unsafeRes.result.value;return _context7.abrupt(\"return\",{keys:keys,array:array});case 9:throw new Error();case 10:case\"end\":return _context7.stop();}}},_callee7);}));return function getMultipleAccountsCore(_x13,_x14,_x15){return _ref6.apply(this,arguments);};}();export function useMint(key){var connection=useConnection();var _useState7=useState(),_useState8=_slicedToArray(_useState7,2),mint=_useState8[0],setMint=_useState8[1];var id=typeof key==='string'?key:key===null||key===void 0?void 0:key.toBase58();useEffect(function(){if(!id){return;}cache.query(connection,id,MintParser).then(function(acc){return setMint(acc.info);}).catch(function(err){return console.log(err);});var dispose=cache.emitter.onCache(function(e){var event=e;if(event.id===id){cache.query(connection,id,MintParser).then(function(mint){return setMint(mint.info);});}});return function(){dispose();};},[connection,id]);return mint;}export function useAccount(pubKey){var connection=useConnection();var _useState9=useState(),_useState10=_slicedToArray(_useState9,2),account=_useState10[0],setAccount=_useState10[1];var key=pubKey===null||pubKey===void 0?void 0:pubKey.toBase58();useEffect(function(){var query=/*#__PURE__*/function(){var _ref7=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee8(){var acc;return _regeneratorRuntime.wrap(function _callee8$(_context8){while(1){switch(_context8.prev=_context8.next){case 0:_context8.prev=0;if(key){_context8.next=3;break;}return _context8.abrupt(\"return\");case 3:_context8.next=5;return cache.query(connection,key,TokenAccountParser).catch(function(err){return console.log(err);});case 5:acc=_context8.sent;if(acc){setAccount(acc);}_context8.next=12;break;case 9:_context8.prev=9;_context8.t0=_context8[\"catch\"](0);console.error(_context8.t0);case 12:case\"end\":return _context8.stop();}}},_callee8,null,[[0,9]]);}));return function query(){return _ref7.apply(this,arguments);};}();query();var dispose=cache.emitter.onCache(function(e){var event=e;if(event.id===key){query();}});return function(){dispose();};},[connection,key]);return account;}// TODO: expose in spl package\nexport var deserializeAccount=function deserializeAccount(data){var accountInfo=AccountLayout.decode(data);accountInfo.mint=new PublicKey(accountInfo.mint);accountInfo.owner=new PublicKey(accountInfo.owner);accountInfo.amount=u64.fromBuffer(accountInfo.amount);if(accountInfo.delegateOption===0){accountInfo.delegate=null;accountInfo.delegatedAmount=new u64(0);}else{accountInfo.delegate=new PublicKey(accountInfo.delegate);accountInfo.delegatedAmount=u64.fromBuffer(accountInfo.delegatedAmount);}accountInfo.isInitialized=accountInfo.state!==0;accountInfo.isFrozen=accountInfo.state===2;if(accountInfo.isNativeOption===1){accountInfo.rentExemptReserve=u64.fromBuffer(accountInfo.isNative);accountInfo.isNative=true;}else{accountInfo.rentExemptReserve=null;accountInfo.isNative=false;}if(accountInfo.closeAuthorityOption===0){accountInfo.closeAuthority=null;}else{accountInfo.closeAuthority=new PublicKey(accountInfo.closeAuthority);}return accountInfo;};// TODO: expose in spl package\nexport var deserializeMint=function deserializeMint(data){if(data.length!==MintLayout.span){throw new Error('Not a valid Mint');}var mintInfo=MintLayout.decode(data);if(mintInfo.mintAuthorityOption===0){mintInfo.mintAuthority=null;}else{mintInfo.mintAuthority=new PublicKey(mintInfo.mintAuthority);}mintInfo.supply=u64.fromBuffer(mintInfo.supply);mintInfo.isInitialized=mintInfo.isInitialized!==0;if(mintInfo.freezeAuthorityOption===0){mintInfo.freezeAuthority=null;}else{mintInfo.freezeAuthority=new PublicKey(mintInfo.freezeAuthority);}return mintInfo;};","map":{"version":3,"sources":["C:/Users/AHSAN PC/Desktop/digitsu/gamp/js/packages/gumdrop/src/contexts/AccountContext.tsx"],"names":["React","useCallback","useContext","useEffect","useState","useConnection","useWallet","PublicKey","AccountLayout","MintLayout","u64","EventEmitter","programIds","chunks","WRAPPED_SOL_MINT","AccountsContext","createContext","pendingCalls","Map","genericCache","pendingMintCalls","mintCache","getMintInfo","connection","pubKey","getAccountInfo","info","Error","data","Buffer","from","deserializeMint","MintParser","buffer","details","pubkey","account","TokenAccountParser","length","deserializeAccount","GenericAccountParser","keyToAccountParser","cache","emitter","query","parser","id","address","toBase58","get","then","add","set","obj","isActive","deserialize","registerParser","delete","undefined","Function","isNew","has","raiseCacheUpdated","key","raiseCacheDeleted","byParser","result","keys","push","queryMint","mint","getMint","addMint","useAccountsContext","context","wrapNativeAccount","owner","amount","lamports","delegate","delegatedAmount","isInitialized","isFrozen","isNative","rentExemptReserve","closeAuthority","getCachedAccount","predicate","values","UseNativeAccount","publicKey","nativeAccount","setNativeAccount","updateCache","wrapped","subId","updateAccount","onAccountChange","removeAccountChangeListener","PRECACHED_OWNERS","Set","precacheUserTokenAccounts","getTokenAccountsByOwner","programId","token","accounts","value","forEach","AccountsProvider","children","tokenAccounts","setTokenAccounts","userAccounts","setUserAccounts","walletKey","selectUserAccounts","map","filter","a","subs","onCache","args","tokenSubID","onProgramAccountChange","accountId","accountInfo","span","removeProgramAccountChangeListener","useNativeAccount","getMultipleAccounts","commitment","Promise","all","chunk","getMultipleAccountsCore","array","acc","rest","flat","_buildArgs","_rpcRequest","unsafeRes","error","message","useMint","setMint","catch","err","console","log","dispose","e","event","useAccount","setAccount","decode","fromBuffer","delegateOption","state","isNativeOption","closeAuthorityOption","mintInfo","mintAuthorityOption","mintAuthority","supply","freezeAuthorityOption","freezeAuthority"],"mappings":"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","sourcesContent":["import React, { useCallback, useContext, useEffect, useState } from 'react';\r\nimport { useConnection } from './ConnectionContext';\r\nimport { useWallet } from '@solana/wallet-adapter-react';\r\nimport { AccountInfo, Connection, PublicKey } from '@solana/web3.js';\r\nimport { AccountLayout, MintInfo, MintLayout, u64 } from '@solana/spl-token';\r\nimport {\r\n  EventEmitter,\r\n  programIds,\r\n  chunks,\r\n  StringPublicKey,\r\n  WRAPPED_SOL_MINT,\r\n} from '@oyster/common';\r\n\r\nimport { TokenAccount } from '../models';\r\n\r\nconst AccountsContext = React.createContext<any>(null);\r\n\r\nconst pendingCalls = new Map<string, Promise<ParsedAccountBase>>();\r\nconst genericCache = new Map<string, ParsedAccountBase>();\r\nconst pendingMintCalls = new Map<string, Promise<MintInfo>>();\r\nconst mintCache = new Map<string, MintInfo>();\r\n\r\nexport interface ParsedAccountBase {\r\n  pubkey: StringPublicKey;\r\n  account: AccountInfo<Buffer>;\r\n  info: any; // TODO: change to unknown\r\n}\r\n\r\nexport type AccountParser = (\r\n  pubkey: StringPublicKey,\r\n  data: AccountInfo<Buffer>,\r\n) => ParsedAccountBase | undefined;\r\n\r\nexport interface ParsedAccount<T> extends ParsedAccountBase {\r\n  info: T;\r\n}\r\n\r\nconst getMintInfo = async (connection: Connection, pubKey: PublicKey) => {\r\n  const info = await connection.getAccountInfo(pubKey);\r\n  if (info === null) {\r\n    throw new Error('Failed to find mint account');\r\n  }\r\n\r\n  const data = Buffer.from(info.data);\r\n\r\n  return deserializeMint(data);\r\n};\r\n\r\nexport const MintParser = (pubKey: string, info: AccountInfo<Buffer>) => {\r\n  const buffer = Buffer.from(info.data);\r\n\r\n  const data = deserializeMint(buffer);\r\n\r\n  const details = {\r\n    pubkey: pubKey,\r\n    account: {\r\n      ...info,\r\n    },\r\n    info: data,\r\n  } as ParsedAccountBase;\r\n\r\n  return details;\r\n};\r\n\r\nexport const TokenAccountParser = (\r\n  pubKey: string,\r\n  info: AccountInfo<Buffer>,\r\n) => {\r\n  // Sometimes a wrapped sol account gets closed, goes to 0 length,\r\n  // triggers an update over wss which triggers this guy to get called\r\n  // since your UI already logged that pubkey as a token account. Check for length.\r\n  if (info.data.length > 0) {\r\n    const buffer = Buffer.from(info.data);\r\n    const data = deserializeAccount(buffer);\r\n\r\n    const details = {\r\n      pubkey: pubKey,\r\n      account: {\r\n        ...info,\r\n      },\r\n      info: data,\r\n    } as TokenAccount;\r\n\r\n    return details;\r\n  }\r\n};\r\n\r\nexport const GenericAccountParser = (\r\n  pubKey: string,\r\n  info: AccountInfo<Buffer>,\r\n) => {\r\n  const buffer = Buffer.from(info.data);\r\n\r\n  const details = {\r\n    pubkey: pubKey,\r\n    account: {\r\n      ...info,\r\n    },\r\n    info: buffer,\r\n  } as ParsedAccountBase;\r\n\r\n  return details;\r\n};\r\n\r\nexport const keyToAccountParser = new Map<string, AccountParser>();\r\n\r\nexport const cache = {\r\n  emitter: new EventEmitter(),\r\n  query: async (\r\n    connection: Connection,\r\n    pubKey: string | PublicKey,\r\n    parser?: AccountParser,\r\n  ) => {\r\n    let id: PublicKey;\r\n    if (typeof pubKey === 'string') {\r\n      id = new PublicKey(pubKey);\r\n    } else {\r\n      id = pubKey;\r\n    }\r\n\r\n    const address = id.toBase58();\r\n\r\n    const account = genericCache.get(address);\r\n    if (account) {\r\n      return account;\r\n    }\r\n\r\n    let query = pendingCalls.get(address);\r\n    if (query) {\r\n      return query;\r\n    }\r\n\r\n    // TODO: refactor to use multiple accounts query with flush like behavior\r\n    query = connection.getAccountInfo(id).then(data => {\r\n      if (!data) {\r\n        throw new Error('Account not found');\r\n      }\r\n\r\n      return cache.add(id, data, parser);\r\n    }) as Promise<TokenAccount>;\r\n    pendingCalls.set(address, query as any);\r\n\r\n    return query;\r\n  },\r\n  add: (\r\n    id: PublicKey | string,\r\n    obj: AccountInfo<Buffer>,\r\n    parser?: AccountParser,\r\n    isActive?: boolean | undefined | ((parsed: any) => boolean),\r\n  ) => {\r\n    const address = typeof id === 'string' ? id : id?.toBase58();\r\n    const deserialize = parser ? parser : keyToAccountParser.get(address);\r\n    if (!deserialize) {\r\n      throw new Error(\r\n        'Deserializer needs to be registered or passed as a parameter',\r\n      );\r\n    }\r\n\r\n    cache.registerParser(id, deserialize);\r\n    pendingCalls.delete(address);\r\n    const account = deserialize(address, obj);\r\n    if (!account) {\r\n      return;\r\n    }\r\n\r\n    if (isActive === undefined) isActive = true;\r\n    else if (isActive instanceof Function) isActive = isActive(account);\r\n\r\n    const isNew = !genericCache.has(address);\r\n\r\n    genericCache.set(address, account);\r\n    cache.emitter.raiseCacheUpdated(address, isNew, deserialize, isActive);\r\n    return account;\r\n  },\r\n  get: (pubKey: string | PublicKey) => {\r\n    let key: string;\r\n    if (typeof pubKey !== 'string') {\r\n      key = pubKey.toBase58();\r\n    } else {\r\n      key = pubKey;\r\n    }\r\n\r\n    return genericCache.get(key);\r\n  },\r\n  delete: (pubKey: string | PublicKey) => {\r\n    let key: string;\r\n    if (typeof pubKey !== 'string') {\r\n      key = pubKey.toBase58();\r\n    } else {\r\n      key = pubKey;\r\n    }\r\n\r\n    if (genericCache.get(key)) {\r\n      genericCache.delete(key);\r\n      cache.emitter.raiseCacheDeleted(key);\r\n      return true;\r\n    }\r\n    return false;\r\n  },\r\n\r\n  byParser: (parser: AccountParser) => {\r\n    const result: string[] = [];\r\n    for (const id of keyToAccountParser.keys()) {\r\n      if (keyToAccountParser.get(id) === parser) {\r\n        result.push(id);\r\n      }\r\n    }\r\n\r\n    return result;\r\n  },\r\n  registerParser: (pubkey: PublicKey | string, parser: AccountParser) => {\r\n    if (pubkey) {\r\n      const address = typeof pubkey === 'string' ? pubkey : pubkey?.toBase58();\r\n      keyToAccountParser.set(address, parser);\r\n    }\r\n\r\n    return pubkey;\r\n  },\r\n  queryMint: async (connection: Connection, pubKey: string | PublicKey) => {\r\n    let id: PublicKey;\r\n    if (typeof pubKey === 'string') {\r\n      id = new PublicKey(pubKey);\r\n    } else {\r\n      id = pubKey;\r\n    }\r\n\r\n    const address = id.toBase58();\r\n    const mint = mintCache.get(address);\r\n    if (mint) {\r\n      return mint;\r\n    }\r\n\r\n    let query = pendingMintCalls.get(address);\r\n    if (query) {\r\n      return query;\r\n    }\r\n\r\n    query = getMintInfo(connection, id).then(data => {\r\n      pendingMintCalls.delete(address);\r\n\r\n      mintCache.set(address, data);\r\n      return data;\r\n    }) as Promise<MintInfo>;\r\n    pendingMintCalls.set(address, query as any);\r\n\r\n    return query;\r\n  },\r\n  getMint: (pubKey: string | PublicKey) => {\r\n    let key: string;\r\n    if (typeof pubKey !== 'string') {\r\n      key = pubKey.toBase58();\r\n    } else {\r\n      key = pubKey;\r\n    }\r\n\r\n    return mintCache.get(key);\r\n  },\r\n  addMint: (pubKey: PublicKey, obj: AccountInfo<Buffer>) => {\r\n    const mint = deserializeMint(obj.data);\r\n    const id = pubKey.toBase58();\r\n    mintCache.set(id, mint);\r\n    return mint;\r\n  },\r\n};\r\n\r\nexport const useAccountsContext = () => {\r\n  const context = useContext(AccountsContext);\r\n\r\n  return context;\r\n};\r\n\r\nfunction wrapNativeAccount(\r\n  pubkey: string,\r\n  account?: AccountInfo<Buffer>,\r\n): TokenAccount | undefined {\r\n  if (!account) {\r\n    return undefined;\r\n  }\r\n\r\n  const key = new PublicKey(pubkey);\r\n\r\n  return {\r\n    pubkey: pubkey,\r\n    account,\r\n    info: {\r\n      address: key,\r\n      mint: WRAPPED_SOL_MINT,\r\n      owner: key,\r\n      amount: new u64(account.lamports),\r\n      delegate: null,\r\n      delegatedAmount: new u64(0),\r\n      isInitialized: true,\r\n      isFrozen: false,\r\n      isNative: true,\r\n      rentExemptReserve: null,\r\n      closeAuthority: null,\r\n    },\r\n  };\r\n}\r\n\r\nexport const getCachedAccount = (\r\n  predicate: (account: TokenAccount) => boolean,\r\n) => {\r\n  for (const account of genericCache.values()) {\r\n    if (predicate(account)) {\r\n      return account as TokenAccount;\r\n    }\r\n  }\r\n};\r\n\r\nconst UseNativeAccount = () => {\r\n  const connection = useConnection();\r\n  const { publicKey } = useWallet();\r\n\r\n  const [nativeAccount, setNativeAccount] = useState<AccountInfo<Buffer>>();\r\n\r\n  const updateCache = useCallback(\r\n    account => {\r\n      if (publicKey) {\r\n        const wrapped = wrapNativeAccount(publicKey.toBase58(), account);\r\n        if (wrapped !== undefined) {\r\n          const id = publicKey.toBase58();\r\n          cache.registerParser(id, TokenAccountParser);\r\n          genericCache.set(id, wrapped as TokenAccount);\r\n          cache.emitter.raiseCacheUpdated(id, false, TokenAccountParser, true);\r\n        }\r\n      }\r\n    },\r\n    [publicKey],\r\n  );\r\n\r\n  useEffect(() => {\r\n    let subId = 0;\r\n    const updateAccount = (account: AccountInfo<Buffer> | null) => {\r\n      if (account) {\r\n        updateCache(account);\r\n        setNativeAccount(account);\r\n      }\r\n    };\r\n\r\n    (async () => {\r\n      if (!connection || !publicKey) {\r\n        return;\r\n      }\r\n\r\n      try {\r\n        const account = await connection.getAccountInfo(publicKey);\r\n        updateAccount(account);\r\n      } catch {\r\n        return;\r\n      }\r\n\r\n      subId = connection.onAccountChange(publicKey, updateAccount);\r\n    })();\r\n\r\n    return () => {\r\n      if (subId) {\r\n        connection.removeAccountChangeListener(subId);\r\n      }\r\n    };\r\n  }, [setNativeAccount, publicKey, connection, updateCache]);\r\n\r\n  return { nativeAccount };\r\n};\r\n\r\nconst PRECACHED_OWNERS = new Set<string>();\r\nconst precacheUserTokenAccounts = async (\r\n  connection: Connection,\r\n  owner?: PublicKey,\r\n) => {\r\n  if (!owner) {\r\n    return;\r\n  }\r\n\r\n  // used for filtering account updates over websocket\r\n  PRECACHED_OWNERS.add(owner.toBase58());\r\n\r\n  // user accounts are updated via ws subscription\r\n  const accounts = await connection.getTokenAccountsByOwner(owner, {\r\n    programId: programIds().token,\r\n  });\r\n\r\n  accounts.value.forEach(info => {\r\n    cache.add(info.pubkey.toBase58(), info.account, TokenAccountParser);\r\n  });\r\n};\r\n\r\nexport function AccountsProvider({\r\n  children = undefined,\r\n}: {\r\n  children: React.ReactNode;\r\n}) {\r\n  const connection = useConnection();\r\n  const { publicKey } = useWallet();\r\n  const [tokenAccounts, setTokenAccounts] = useState<TokenAccount[]>([]);\r\n  const [userAccounts, setUserAccounts] = useState<TokenAccount[]>([]);\r\n  const { nativeAccount } = UseNativeAccount();\r\n  const walletKey = publicKey?.toBase58();\r\n\r\n  const selectUserAccounts = useCallback(() => {\r\n    return cache\r\n      .byParser(TokenAccountParser)\r\n      .map(id => cache.get(id))\r\n      .filter(a => a && a.info.owner.toBase58() === walletKey)\r\n      .map(a => a as TokenAccount);\r\n  }, [walletKey]);\r\n\r\n  useEffect(() => {\r\n    const accounts = selectUserAccounts().filter(\r\n      a => a !== undefined,\r\n    ) as TokenAccount[];\r\n    setUserAccounts(accounts);\r\n  }, [nativeAccount, tokenAccounts, selectUserAccounts]);\r\n\r\n  useEffect(() => {\r\n    const subs: number[] = [];\r\n    cache.emitter.onCache(args => {\r\n      if (args.isNew && args.isActive) {\r\n        const id = args.id;\r\n        const deserialize = args.parser;\r\n        connection.onAccountChange(new PublicKey(id), info => {\r\n          cache.add(id, info, deserialize);\r\n        });\r\n      }\r\n    });\r\n\r\n    return () => {\r\n      subs.forEach(id => connection.removeAccountChangeListener(id));\r\n    };\r\n  }, [connection]);\r\n\r\n  useEffect(() => {\r\n    if (!connection || !publicKey) {\r\n      setTokenAccounts([]);\r\n    } else {\r\n      precacheUserTokenAccounts(connection, publicKey).then(() => {\r\n        setTokenAccounts(selectUserAccounts());\r\n      });\r\n\r\n      // This can return different types of accounts: token-account, mint, multisig\r\n      // TODO: web3.js expose ability to filter.\r\n      // this should use only filter syntax to only get accounts that are owned by user\r\n      const tokenSubID = connection.onProgramAccountChange(\r\n        programIds().token,\r\n        info => {\r\n          // TODO: fix type in web3.js\r\n          const id = info.accountId as unknown as string;\r\n          // TODO: do we need a better way to identify layout (maybe a enum identifing type?)\r\n          if (info.accountInfo.data.length === AccountLayout.span) {\r\n            const data = deserializeAccount(info.accountInfo.data);\r\n\r\n            if (PRECACHED_OWNERS.has(data.owner.toBase58())) {\r\n              cache.add(id, info.accountInfo, TokenAccountParser);\r\n              setTokenAccounts(selectUserAccounts());\r\n            }\r\n          }\r\n        },\r\n        'singleGossip',\r\n      );\r\n\r\n      return () => {\r\n        connection.removeProgramAccountChangeListener(tokenSubID);\r\n      };\r\n    }\r\n  }, [connection, publicKey, selectUserAccounts]);\r\n\r\n  return (\r\n    <AccountsContext.Provider\r\n      value={{\r\n        userAccounts,\r\n        nativeAccount,\r\n      }}\r\n    >\r\n      {children}\r\n    </AccountsContext.Provider>\r\n  );\r\n}\r\n\r\nexport function useNativeAccount() {\r\n  const context = useContext(AccountsContext);\r\n  return {\r\n    account: context.nativeAccount as AccountInfo<Buffer>,\r\n  };\r\n}\r\n\r\nexport const getMultipleAccounts = async (\r\n  connection: any,\r\n  keys: string[],\r\n  commitment: string,\r\n) => {\r\n  const result = await Promise.all(\r\n    chunks(keys, 99).map(chunk =>\r\n      getMultipleAccountsCore(connection, chunk, commitment),\r\n    ),\r\n  );\r\n\r\n  const array = result\r\n    .map(\r\n      a =>\r\n        a.array.map(acc => {\r\n          if (!acc) {\r\n            return undefined;\r\n          }\r\n\r\n          const { data, ...rest } = acc;\r\n          const obj = {\r\n            ...rest,\r\n            data: Buffer.from(data[0], 'base64'),\r\n          } as AccountInfo<Buffer>;\r\n          return obj;\r\n        }) as AccountInfo<Buffer>[],\r\n    )\r\n    .flat();\r\n  return { keys, array };\r\n};\r\n\r\nconst getMultipleAccountsCore = async (\r\n  connection: any,\r\n  keys: string[],\r\n  commitment: string,\r\n) => {\r\n  const args = connection._buildArgs([keys], commitment, 'base64');\r\n\r\n  const unsafeRes = await connection._rpcRequest('getMultipleAccounts', args);\r\n  if (unsafeRes.error) {\r\n    throw new Error(\r\n      'failed to get info about account ' + unsafeRes.error.message,\r\n    );\r\n  }\r\n\r\n  if (unsafeRes.result.value) {\r\n    const array = unsafeRes.result.value as AccountInfo<string[]>[];\r\n    return { keys, array };\r\n  }\r\n\r\n  // TODO: fix\r\n  throw new Error();\r\n};\r\n\r\nexport function useMint(key?: string | PublicKey) {\r\n  const connection = useConnection();\r\n  const [mint, setMint] = useState<MintInfo>();\r\n\r\n  const id = typeof key === 'string' ? key : key?.toBase58();\r\n\r\n  useEffect(() => {\r\n    if (!id) {\r\n      return;\r\n    }\r\n\r\n    cache\r\n      .query(connection, id, MintParser)\r\n      .then(acc => setMint(acc.info as any))\r\n      .catch(err => console.log(err));\r\n\r\n    const dispose = cache.emitter.onCache(e => {\r\n      const event = e;\r\n      if (event.id === id) {\r\n        cache\r\n          .query(connection, id, MintParser)\r\n          .then(mint => setMint(mint.info as any));\r\n      }\r\n    });\r\n    return () => {\r\n      dispose();\r\n    };\r\n  }, [connection, id]);\r\n\r\n  return mint;\r\n}\r\n\r\nexport function useAccount(pubKey?: PublicKey) {\r\n  const connection = useConnection();\r\n  const [account, setAccount] = useState<TokenAccount>();\r\n\r\n  const key = pubKey?.toBase58();\r\n  useEffect(() => {\r\n    const query = async () => {\r\n      try {\r\n        if (!key) {\r\n          return;\r\n        }\r\n\r\n        const acc = await cache\r\n          .query(connection, key, TokenAccountParser)\r\n          .catch(err => console.log(err));\r\n        if (acc) {\r\n          setAccount(acc);\r\n        }\r\n      } catch (err) {\r\n        console.error(err);\r\n      }\r\n    };\r\n\r\n    query();\r\n\r\n    const dispose = cache.emitter.onCache(e => {\r\n      const event = e;\r\n      if (event.id === key) {\r\n        query();\r\n      }\r\n    });\r\n    return () => {\r\n      dispose();\r\n    };\r\n  }, [connection, key]);\r\n\r\n  return account;\r\n}\r\n\r\n// TODO: expose in spl package\r\nexport const deserializeAccount = (data: Buffer) => {\r\n  const accountInfo = AccountLayout.decode(data);\r\n  accountInfo.mint = new PublicKey(accountInfo.mint);\r\n  accountInfo.owner = new PublicKey(accountInfo.owner);\r\n  accountInfo.amount = u64.fromBuffer(accountInfo.amount);\r\n\r\n  if (accountInfo.delegateOption === 0) {\r\n    accountInfo.delegate = null;\r\n    accountInfo.delegatedAmount = new u64(0);\r\n  } else {\r\n    accountInfo.delegate = new PublicKey(accountInfo.delegate);\r\n    accountInfo.delegatedAmount = u64.fromBuffer(accountInfo.delegatedAmount);\r\n  }\r\n\r\n  accountInfo.isInitialized = accountInfo.state !== 0;\r\n  accountInfo.isFrozen = accountInfo.state === 2;\r\n\r\n  if (accountInfo.isNativeOption === 1) {\r\n    accountInfo.rentExemptReserve = u64.fromBuffer(accountInfo.isNative);\r\n    accountInfo.isNative = true;\r\n  } else {\r\n    accountInfo.rentExemptReserve = null;\r\n    accountInfo.isNative = false;\r\n  }\r\n\r\n  if (accountInfo.closeAuthorityOption === 0) {\r\n    accountInfo.closeAuthority = null;\r\n  } else {\r\n    accountInfo.closeAuthority = new PublicKey(accountInfo.closeAuthority);\r\n  }\r\n\r\n  return accountInfo;\r\n};\r\n\r\n// TODO: expose in spl package\r\nexport const deserializeMint = (data: Buffer) => {\r\n  if (data.length !== MintLayout.span) {\r\n    throw new Error('Not a valid Mint');\r\n  }\r\n\r\n  const mintInfo = MintLayout.decode(data);\r\n\r\n  if (mintInfo.mintAuthorityOption === 0) {\r\n    mintInfo.mintAuthority = null;\r\n  } else {\r\n    mintInfo.mintAuthority = new PublicKey(mintInfo.mintAuthority);\r\n  }\r\n\r\n  mintInfo.supply = u64.fromBuffer(mintInfo.supply);\r\n  mintInfo.isInitialized = mintInfo.isInitialized !== 0;\r\n\r\n  if (mintInfo.freezeAuthorityOption === 0) {\r\n    mintInfo.freezeAuthority = null;\r\n  } else {\r\n    mintInfo.freezeAuthority = new PublicKey(mintInfo.freezeAuthority);\r\n  }\r\n\r\n  return mintInfo as MintInfo;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}