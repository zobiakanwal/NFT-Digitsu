{"ast":null,"code":"import { __assign, __awaiter, __generator } from \"tslib\";\nimport { AdaptiveRetryStrategy } from \"./AdaptiveRetryStrategy\";\nimport { DEFAULT_MAX_ATTEMPTS, DEFAULT_RETRY_MODE, RETRY_MODES } from \"./config\";\nimport { StandardRetryStrategy } from \"./StandardRetryStrategy\";\nexport var ENV_MAX_ATTEMPTS = \"AWS_MAX_ATTEMPTS\";\nexport var CONFIG_MAX_ATTEMPTS = \"max_attempts\";\nexport var NODE_MAX_ATTEMPT_CONFIG_OPTIONS = {\n  environmentVariableSelector: function environmentVariableSelector(env) {\n    var value = env[ENV_MAX_ATTEMPTS];\n    if (!value) return undefined;\n    var maxAttempt = parseInt(value);\n\n    if (Number.isNaN(maxAttempt)) {\n      throw new Error(\"Environment variable \" + ENV_MAX_ATTEMPTS + \" mast be a number, got \\\"\" + value + \"\\\"\");\n    }\n\n    return maxAttempt;\n  },\n  configFileSelector: function configFileSelector(profile) {\n    var value = profile[CONFIG_MAX_ATTEMPTS];\n    if (!value) return undefined;\n    var maxAttempt = parseInt(value);\n\n    if (Number.isNaN(maxAttempt)) {\n      throw new Error(\"Shared config file entry \" + CONFIG_MAX_ATTEMPTS + \" mast be a number, got \\\"\" + value + \"\\\"\");\n    }\n\n    return maxAttempt;\n  },\n  default: DEFAULT_MAX_ATTEMPTS\n};\nexport var resolveRetryConfig = function resolveRetryConfig(input) {\n  var maxAttempts = normalizeMaxAttempts(input.maxAttempts);\n  return __assign(__assign({}, input), {\n    maxAttempts: maxAttempts,\n    retryStrategy: function retryStrategy() {\n      return __awaiter(void 0, void 0, void 0, function () {\n        var retryMode;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              if (input.retryStrategy) {\n                return [2, input.retryStrategy];\n              }\n\n              return [4, getRetryMode(input.retryMode)];\n\n            case 1:\n              retryMode = _a.sent();\n\n              if (retryMode === RETRY_MODES.ADAPTIVE) {\n                return [2, new AdaptiveRetryStrategy(maxAttempts)];\n              }\n\n              return [2, new StandardRetryStrategy(maxAttempts)];\n          }\n        });\n      });\n    }\n  });\n};\n\nvar getRetryMode = function getRetryMode(retryMode) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (typeof retryMode === \"string\") {\n            return [2, retryMode];\n          }\n\n          return [4, retryMode()];\n\n        case 1:\n          return [2, _a.sent()];\n      }\n    });\n  });\n};\n\nvar normalizeMaxAttempts = function normalizeMaxAttempts(maxAttempts) {\n  if (maxAttempts === void 0) {\n    maxAttempts = DEFAULT_MAX_ATTEMPTS;\n  }\n\n  if (typeof maxAttempts === \"number\") {\n    var promisified_1 = Promise.resolve(maxAttempts);\n    return function () {\n      return promisified_1;\n    };\n  }\n\n  return maxAttempts;\n};\n\nexport var ENV_RETRY_MODE = \"AWS_RETRY_MODE\";\nexport var CONFIG_RETRY_MODE = \"retry_mode\";\nexport var NODE_RETRY_MODE_CONFIG_OPTIONS = {\n  environmentVariableSelector: function environmentVariableSelector(env) {\n    return env[ENV_RETRY_MODE];\n  },\n  configFileSelector: function configFileSelector(profile) {\n    return profile[CONFIG_RETRY_MODE];\n  },\n  default: DEFAULT_RETRY_MODE\n};","map":{"version":3,"sources":["C:/Users/AHSAN PC/Desktop/digitsu/gamp/js/node_modules/@aws-sdk/middleware-retry/dist-es/configurations.js"],"names":["__assign","__awaiter","__generator","AdaptiveRetryStrategy","DEFAULT_MAX_ATTEMPTS","DEFAULT_RETRY_MODE","RETRY_MODES","StandardRetryStrategy","ENV_MAX_ATTEMPTS","CONFIG_MAX_ATTEMPTS","NODE_MAX_ATTEMPT_CONFIG_OPTIONS","environmentVariableSelector","env","value","undefined","maxAttempt","parseInt","Number","isNaN","Error","configFileSelector","profile","default","resolveRetryConfig","input","maxAttempts","normalizeMaxAttempts","retryStrategy","retryMode","_a","label","getRetryMode","sent","ADAPTIVE","promisified_1","Promise","resolve","ENV_RETRY_MODE","CONFIG_RETRY_MODE","NODE_RETRY_MODE_CONFIG_OPTIONS"],"mappings":"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","sourcesContent":["import { __assign, __awaiter, __generator } from \"tslib\";\nimport { AdaptiveRetryStrategy } from \"./AdaptiveRetryStrategy\";\nimport { DEFAULT_MAX_ATTEMPTS, DEFAULT_RETRY_MODE, RETRY_MODES } from \"./config\";\nimport { StandardRetryStrategy } from \"./StandardRetryStrategy\";\nexport var ENV_MAX_ATTEMPTS = \"AWS_MAX_ATTEMPTS\";\nexport var CONFIG_MAX_ATTEMPTS = \"max_attempts\";\nexport var NODE_MAX_ATTEMPT_CONFIG_OPTIONS = {\n    environmentVariableSelector: function (env) {\n        var value = env[ENV_MAX_ATTEMPTS];\n        if (!value)\n            return undefined;\n        var maxAttempt = parseInt(value);\n        if (Number.isNaN(maxAttempt)) {\n            throw new Error(\"Environment variable \" + ENV_MAX_ATTEMPTS + \" mast be a number, got \\\"\" + value + \"\\\"\");\n        }\n        return maxAttempt;\n    },\n    configFileSelector: function (profile) {\n        var value = profile[CONFIG_MAX_ATTEMPTS];\n        if (!value)\n            return undefined;\n        var maxAttempt = parseInt(value);\n        if (Number.isNaN(maxAttempt)) {\n            throw new Error(\"Shared config file entry \" + CONFIG_MAX_ATTEMPTS + \" mast be a number, got \\\"\" + value + \"\\\"\");\n        }\n        return maxAttempt;\n    },\n    default: DEFAULT_MAX_ATTEMPTS,\n};\nexport var resolveRetryConfig = function (input) {\n    var maxAttempts = normalizeMaxAttempts(input.maxAttempts);\n    return __assign(__assign({}, input), { maxAttempts: maxAttempts, retryStrategy: function () { return __awaiter(void 0, void 0, void 0, function () {\n            var retryMode;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (input.retryStrategy) {\n                            return [2, input.retryStrategy];\n                        }\n                        return [4, getRetryMode(input.retryMode)];\n                    case 1:\n                        retryMode = _a.sent();\n                        if (retryMode === RETRY_MODES.ADAPTIVE) {\n                            return [2, new AdaptiveRetryStrategy(maxAttempts)];\n                        }\n                        return [2, new StandardRetryStrategy(maxAttempts)];\n                }\n            });\n        }); } });\n};\nvar getRetryMode = function (retryMode) { return __awaiter(void 0, void 0, void 0, function () {\n    return __generator(this, function (_a) {\n        switch (_a.label) {\n            case 0:\n                if (typeof retryMode === \"string\") {\n                    return [2, retryMode];\n                }\n                return [4, retryMode()];\n            case 1: return [2, _a.sent()];\n        }\n    });\n}); };\nvar normalizeMaxAttempts = function (maxAttempts) {\n    if (maxAttempts === void 0) { maxAttempts = DEFAULT_MAX_ATTEMPTS; }\n    if (typeof maxAttempts === \"number\") {\n        var promisified_1 = Promise.resolve(maxAttempts);\n        return function () { return promisified_1; };\n    }\n    return maxAttempts;\n};\nexport var ENV_RETRY_MODE = \"AWS_RETRY_MODE\";\nexport var CONFIG_RETRY_MODE = \"retry_mode\";\nexport var NODE_RETRY_MODE_CONFIG_OPTIONS = {\n    environmentVariableSelector: function (env) { return env[ENV_RETRY_MODE]; },\n    configFileSelector: function (profile) { return profile[CONFIG_RETRY_MODE]; },\n    default: DEFAULT_RETRY_MODE,\n};\n"]},"metadata":{},"sourceType":"module"}