{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"C:\\\\Users\\\\AHSAN PC\\\\Desktop\\\\digitsu\\\\gamp\\\\js\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\");\n\nvar _objectSpread = require(\"C:\\\\Users\\\\AHSAN PC\\\\Desktop\\\\digitsu\\\\gamp\\\\js\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\objectSpread2.js\").default;\n\nvar _asyncToGenerator = require(\"C:\\\\Users\\\\AHSAN PC\\\\Desktop\\\\digitsu\\\\gamp\\\\js\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\asyncToGenerator.js\").default;\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.processMetaplexAccounts = void 0;\n\nvar web3_js_1 = require(\"@solana/web3.js\");\n\nvar models_1 = require(\"../../models\");\n\nvar utils_1 = require(\"../../utils\");\n\nvar accounts_1 = require(\"../accounts\");\n\nvar userNames_json_1 = __importDefault(require(\"../../config/userNames.json\"));\n\nvar processMetaplexAccounts = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref, setter) {\n    var account, pubkey, STORE_ID, storeKey, auctionManager, parsedAccount, ticket, _parsedAccount, asV2, _ticket, _parsedAccount2, cache, _parsedAccount3, indexer, _parsedAccount4, _ticket2, _parsedAccount5, store, _parsedAccount6, config, _parsedAccount7, _parsedAccount8, isWhitelistedCreator, nameInfo;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            account = _ref.account, pubkey = _ref.pubkey;\n\n            if (isMetaplexAccount(account)) {\n              _context.next = 3;\n              break;\n            }\n\n            return _context.abrupt(\"return\");\n\n          case 3:\n            _context.prev = 3;\n            STORE_ID = (0, utils_1.programIds)().store;\n\n            if (isAuctionManagerV1Account(account) || isAuctionManagerV2Account(account)) {\n              storeKey = new web3_js_1.PublicKey(account.data.slice(1, 33));\n\n              if (STORE_ID && storeKey.equals(STORE_ID)) {\n                auctionManager = (0, models_1.decodeAuctionManager)(account.data);\n                parsedAccount = {\n                  pubkey: pubkey,\n                  account: account,\n                  info: auctionManager\n                };\n                setter('auctionManagersByAuction', auctionManager.auction, parsedAccount);\n              }\n            }\n\n            if (isBidRedemptionTicketV1Account(account) || isBidRedemptionTicketV2Account(account)) {\n              ticket = (0, models_1.decodeBidRedemptionTicket)(account.data);\n              _parsedAccount = {\n                pubkey: pubkey,\n                account: account,\n                info: ticket\n              };\n              setter('bidRedemptions', pubkey, _parsedAccount);\n\n              if (ticket.key == models_1.MetaplexKey.BidRedemptionTicketV2) {\n                asV2 = ticket;\n\n                if (asV2.winnerIndex) {\n                  setter('bidRedemptionV2sByAuctionManagerAndWinningIndex', asV2.auctionManager + '-' + asV2.winnerIndex.toNumber(), _parsedAccount);\n                }\n              }\n            }\n\n            if (isPayoutTicketV1Account(account)) {\n              _ticket = (0, models_1.decodePayoutTicket)(account.data);\n              _parsedAccount2 = {\n                pubkey: pubkey,\n                account: account,\n                info: _ticket\n              };\n              setter('payoutTickets', pubkey, _parsedAccount2);\n            }\n\n            if (isAuctionCacheV1Account(account)) {\n              cache = (0, models_1.decodeAuctionCache)(account.data);\n              _parsedAccount3 = {\n                pubkey: pubkey,\n                account: account,\n                info: cache\n              };\n              setter('auctionCaches', pubkey, _parsedAccount3);\n            }\n\n            if (isStoreIndexerV1Account(account)) {\n              indexer = (0, models_1.decodeStoreIndexer)(account.data);\n              _parsedAccount4 = {\n                pubkey: pubkey,\n                account: account,\n                info: indexer\n              };\n\n              if (_parsedAccount4.info.store == (STORE_ID === null || STORE_ID === void 0 ? void 0 : STORE_ID.toBase58())) {\n                setter('storeIndexer', pubkey, _parsedAccount4);\n              }\n            }\n\n            if (isPrizeTrackingTicketV1Account(account)) {\n              _ticket2 = (0, models_1.decodePrizeTrackingTicket)(account.data);\n              _parsedAccount5 = {\n                pubkey: pubkey,\n                account: account,\n                info: _ticket2\n              };\n              setter('prizeTrackingTickets', pubkey, _parsedAccount5);\n            }\n\n            if (isStoreV1Account(account)) {\n              store = (0, models_1.decodeStore)(account.data);\n              _parsedAccount6 = {\n                pubkey: pubkey,\n                account: account,\n                info: store\n              };\n\n              if (STORE_ID && pubkey === STORE_ID.toBase58()) {\n                setter('store', pubkey, _parsedAccount6);\n              }\n            }\n\n            if (isSafetyDepositConfigV1Account(account)) {\n              config = (0, models_1.decodeSafetyDepositConfig)(account.data);\n              _parsedAccount7 = {\n                pubkey: pubkey,\n                account: account,\n                info: config\n              };\n              setter('safetyDepositConfigsByAuctionManagerAndIndex', config.auctionManager + '-' + config.order.toNumber(), _parsedAccount7);\n            }\n\n            if (!isWhitelistedCreatorV1Account(account)) {\n              _context.next = 22;\n              break;\n            }\n\n            _parsedAccount8 = accounts_1.cache.add(pubkey, account, models_1.WhitelistedCreatorParser, false); // TODO: figure out a way to avoid generating creator addresses during parsing\n            // should we store store id inside creator?\n\n            if (!STORE_ID) {\n              _context.next = 22;\n              break;\n            }\n\n            _context.next = 18;\n            return (0, models_1.isCreatorPartOfTheStore)(_parsedAccount8.info.address, pubkey);\n\n          case 18:\n            isWhitelistedCreator = _context.sent;\n            nameInfo = userNames_json_1.default[_parsedAccount8.info.address];\n\n            if (nameInfo) {\n              _parsedAccount8.info = _objectSpread(_objectSpread({}, _parsedAccount8.info), nameInfo);\n            }\n\n            if (isWhitelistedCreator) {\n              setter('whitelistedCreatorsByCreator', _parsedAccount8.info.address, _parsedAccount8);\n            }\n\n          case 22:\n            _context.next = 26;\n            break;\n\n          case 24:\n            _context.prev = 24;\n            _context.t0 = _context[\"catch\"](3);\n\n          case 26:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[3, 24]]);\n  }));\n\n  return function processMetaplexAccounts(_x, _x2) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nexports.processMetaplexAccounts = processMetaplexAccounts;\n\nvar isMetaplexAccount = function isMetaplexAccount(account) {\n  return account && (0, utils_1.pubkeyToString)(account.owner) === utils_1.METAPLEX_ID;\n};\n\nvar isAuctionManagerV1Account = function isAuctionManagerV1Account(account) {\n  return account.data[0] === models_1.MetaplexKey.AuctionManagerV1;\n};\n\nvar isAuctionManagerV2Account = function isAuctionManagerV2Account(account) {\n  return account.data[0] === models_1.MetaplexKey.AuctionManagerV2;\n};\n\nvar isBidRedemptionTicketV1Account = function isBidRedemptionTicketV1Account(account) {\n  return account.data[0] === models_1.MetaplexKey.BidRedemptionTicketV1;\n};\n\nvar isBidRedemptionTicketV2Account = function isBidRedemptionTicketV2Account(account) {\n  return account.data[0] === models_1.MetaplexKey.BidRedemptionTicketV2;\n};\n\nvar isPayoutTicketV1Account = function isPayoutTicketV1Account(account) {\n  return account.data[0] === models_1.MetaplexKey.PayoutTicketV1;\n};\n\nvar isPrizeTrackingTicketV1Account = function isPrizeTrackingTicketV1Account(account) {\n  return account.data[0] === models_1.MetaplexKey.PrizeTrackingTicketV1;\n};\n\nvar isStoreV1Account = function isStoreV1Account(account) {\n  return account.data[0] === models_1.MetaplexKey.StoreV1;\n};\n\nvar isSafetyDepositConfigV1Account = function isSafetyDepositConfigV1Account(account) {\n  return account.data[0] === models_1.MetaplexKey.SafetyDepositConfigV1;\n};\n\nvar isWhitelistedCreatorV1Account = function isWhitelistedCreatorV1Account(account) {\n  return account.data[0] === models_1.MetaplexKey.WhitelistedCreatorV1;\n};\n\nvar isAuctionCacheV1Account = function isAuctionCacheV1Account(account) {\n  return account.data[0] === models_1.MetaplexKey.AuctionCacheV1;\n};\n\nvar isStoreIndexerV1Account = function isStoreIndexerV1Account(account) {\n  return account.data[0] === models_1.MetaplexKey.StoreIndexerV1;\n};","map":{"version":3,"sources":["../../../../src/contexts/meta/processMetaplexAccounts.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.processMetaplexAccounts = void 0;\r\nconst web3_js_1 = require(\"@solana/web3.js\");\r\nconst models_1 = require(\"../../models\");\r\nconst utils_1 = require(\"../../utils\");\r\nconst accounts_1 = require(\"../accounts\");\r\nconst userNames_json_1 = __importDefault(require(\"../../config/userNames.json\"));\r\nconst processMetaplexAccounts = async ({ account, pubkey }, setter) => {\r\n    if (!isMetaplexAccount(account))\r\n        return;\r\n    try {\r\n        const STORE_ID = (0, utils_1.programIds)().store;\r\n        if (isAuctionManagerV1Account(account) ||\r\n            isAuctionManagerV2Account(account)) {\r\n            const storeKey = new web3_js_1.PublicKey(account.data.slice(1, 33));\r\n            if (STORE_ID && storeKey.equals(STORE_ID)) {\r\n                const auctionManager = (0, models_1.decodeAuctionManager)(account.data);\r\n                const parsedAccount = {\r\n                    pubkey,\r\n                    account,\r\n                    info: auctionManager,\r\n                };\r\n                setter('auctionManagersByAuction', auctionManager.auction, parsedAccount);\r\n            }\r\n        }\r\n        if (isBidRedemptionTicketV1Account(account) ||\r\n            isBidRedemptionTicketV2Account(account)) {\r\n            const ticket = (0, models_1.decodeBidRedemptionTicket)(account.data);\r\n            const parsedAccount = {\r\n                pubkey,\r\n                account,\r\n                info: ticket,\r\n            };\r\n            setter('bidRedemptions', pubkey, parsedAccount);\r\n            if (ticket.key == models_1.MetaplexKey.BidRedemptionTicketV2) {\r\n                const asV2 = ticket;\r\n                if (asV2.winnerIndex) {\r\n                    setter('bidRedemptionV2sByAuctionManagerAndWinningIndex', asV2.auctionManager + '-' + asV2.winnerIndex.toNumber(), parsedAccount);\r\n                }\r\n            }\r\n        }\r\n        if (isPayoutTicketV1Account(account)) {\r\n            const ticket = (0, models_1.decodePayoutTicket)(account.data);\r\n            const parsedAccount = {\r\n                pubkey,\r\n                account,\r\n                info: ticket,\r\n            };\r\n            setter('payoutTickets', pubkey, parsedAccount);\r\n        }\r\n        if (isAuctionCacheV1Account(account)) {\r\n            const cache = (0, models_1.decodeAuctionCache)(account.data);\r\n            const parsedAccount = {\r\n                pubkey,\r\n                account,\r\n                info: cache,\r\n            };\r\n            setter('auctionCaches', pubkey, parsedAccount);\r\n        }\r\n        if (isStoreIndexerV1Account(account)) {\r\n            const indexer = (0, models_1.decodeStoreIndexer)(account.data);\r\n            const parsedAccount = {\r\n                pubkey,\r\n                account,\r\n                info: indexer,\r\n            };\r\n            if (parsedAccount.info.store == (STORE_ID === null || STORE_ID === void 0 ? void 0 : STORE_ID.toBase58())) {\r\n                setter('storeIndexer', pubkey, parsedAccount);\r\n            }\r\n        }\r\n        if (isPrizeTrackingTicketV1Account(account)) {\r\n            const ticket = (0, models_1.decodePrizeTrackingTicket)(account.data);\r\n            const parsedAccount = {\r\n                pubkey,\r\n                account,\r\n                info: ticket,\r\n            };\r\n            setter('prizeTrackingTickets', pubkey, parsedAccount);\r\n        }\r\n        if (isStoreV1Account(account)) {\r\n            const store = (0, models_1.decodeStore)(account.data);\r\n            const parsedAccount = {\r\n                pubkey,\r\n                account,\r\n                info: store,\r\n            };\r\n            if (STORE_ID && pubkey === STORE_ID.toBase58()) {\r\n                setter('store', pubkey, parsedAccount);\r\n            }\r\n        }\r\n        if (isSafetyDepositConfigV1Account(account)) {\r\n            const config = (0, models_1.decodeSafetyDepositConfig)(account.data);\r\n            const parsedAccount = {\r\n                pubkey,\r\n                account,\r\n                info: config,\r\n            };\r\n            setter('safetyDepositConfigsByAuctionManagerAndIndex', config.auctionManager + '-' + config.order.toNumber(), parsedAccount);\r\n        }\r\n        if (isWhitelistedCreatorV1Account(account)) {\r\n            const parsedAccount = accounts_1.cache.add(pubkey, account, models_1.WhitelistedCreatorParser, false);\r\n            // TODO: figure out a way to avoid generating creator addresses during parsing\r\n            // should we store store id inside creator?\r\n            if (STORE_ID) {\r\n                const isWhitelistedCreator = await (0, models_1.isCreatorPartOfTheStore)(parsedAccount.info.address, pubkey);\r\n                const nameInfo = userNames_json_1.default[parsedAccount.info.address];\r\n                if (nameInfo) {\r\n                    parsedAccount.info = { ...parsedAccount.info, ...nameInfo };\r\n                }\r\n                if (isWhitelistedCreator) {\r\n                    setter('whitelistedCreatorsByCreator', parsedAccount.info.address, parsedAccount);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    catch {\r\n        // ignore errors\r\n        // add type as first byte for easier deserialization\r\n    }\r\n};\r\nexports.processMetaplexAccounts = processMetaplexAccounts;\r\nconst isMetaplexAccount = (account) => account && (0, utils_1.pubkeyToString)(account.owner) === utils_1.METAPLEX_ID;\r\nconst isAuctionManagerV1Account = (account) => account.data[0] === models_1.MetaplexKey.AuctionManagerV1;\r\nconst isAuctionManagerV2Account = (account) => account.data[0] === models_1.MetaplexKey.AuctionManagerV2;\r\nconst isBidRedemptionTicketV1Account = (account) => account.data[0] === models_1.MetaplexKey.BidRedemptionTicketV1;\r\nconst isBidRedemptionTicketV2Account = (account) => account.data[0] === models_1.MetaplexKey.BidRedemptionTicketV2;\r\nconst isPayoutTicketV1Account = (account) => account.data[0] === models_1.MetaplexKey.PayoutTicketV1;\r\nconst isPrizeTrackingTicketV1Account = (account) => account.data[0] === models_1.MetaplexKey.PrizeTrackingTicketV1;\r\nconst isStoreV1Account = (account) => account.data[0] === models_1.MetaplexKey.StoreV1;\r\nconst isSafetyDepositConfigV1Account = (account) => account.data[0] === models_1.MetaplexKey.SafetyDepositConfigV1;\r\nconst isWhitelistedCreatorV1Account = (account) => account.data[0] === models_1.MetaplexKey.WhitelistedCreatorV1;\r\nconst isAuctionCacheV1Account = (account) => account.data[0] === models_1.MetaplexKey.AuctionCacheV1;\r\nconst isStoreIndexerV1Account = (account) => account.data[0] === models_1.MetaplexKey.StoreIndexerV1;\r\n//# sourceMappingURL=processMetaplexAccounts.js.map"]},"metadata":{},"sourceType":"script"}