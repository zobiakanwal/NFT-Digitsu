{"ast":null,"code":"import { __read } from \"tslib\";\nexport var parseBoolean = function parseBoolean(value) {\n  switch (value) {\n    case \"true\":\n      return true;\n\n    case \"false\":\n      return false;\n\n    default:\n      throw new Error(\"Unable to parse boolean value \\\"\" + value + \"\\\"\");\n  }\n};\nexport var expectBoolean = function expectBoolean(value) {\n  if (value === null || value === undefined) {\n    return undefined;\n  }\n\n  if (typeof value === \"boolean\") {\n    return value;\n  }\n\n  throw new TypeError(\"Expected boolean, got \" + typeof value);\n};\nexport var expectNumber = function expectNumber(value) {\n  if (value === null || value === undefined) {\n    return undefined;\n  }\n\n  if (typeof value === \"number\") {\n    return value;\n  }\n\n  throw new TypeError(\"Expected number, got \" + typeof value);\n};\nvar MAX_FLOAT = Math.ceil(Math.pow(2, 127) * (2 - Math.pow(2, -23)));\nexport var expectFloat32 = function expectFloat32(value) {\n  var expected = expectNumber(value);\n\n  if (expected !== undefined && !Number.isNaN(expected) && expected !== Infinity && expected !== -Infinity) {\n    if (Math.abs(expected) > MAX_FLOAT) {\n      throw new TypeError(\"Expected 32-bit float, got \" + value);\n    }\n  }\n\n  return expected;\n};\nexport var expectLong = function expectLong(value) {\n  if (value === null || value === undefined) {\n    return undefined;\n  }\n\n  if (Number.isInteger(value) && !Number.isNaN(value)) {\n    return value;\n  }\n\n  throw new TypeError(\"Expected integer, got \" + typeof value);\n};\nexport var expectInt = expectLong;\nexport var expectInt32 = function expectInt32(value) {\n  return expectSizedInt(value, 32);\n};\nexport var expectShort = function expectShort(value) {\n  return expectSizedInt(value, 16);\n};\nexport var expectByte = function expectByte(value) {\n  return expectSizedInt(value, 8);\n};\n\nvar expectSizedInt = function expectSizedInt(value, size) {\n  var expected = expectLong(value);\n\n  if (expected !== undefined && castInt(expected, size) !== expected) {\n    throw new TypeError(\"Expected \" + size + \"-bit integer, got \" + value);\n  }\n\n  return expected;\n};\n\nvar castInt = function castInt(value, size) {\n  switch (size) {\n    case 32:\n      return Int32Array.of(value)[0];\n\n    case 16:\n      return Int16Array.of(value)[0];\n\n    case 8:\n      return Int8Array.of(value)[0];\n  }\n};\n\nexport var expectNonNull = function expectNonNull(value, location) {\n  if (value === null || value === undefined) {\n    if (location) {\n      throw new TypeError(\"Expected a non-null value for \" + location);\n    }\n\n    throw new TypeError(\"Expected a non-null value\");\n  }\n\n  return value;\n};\nexport var expectObject = function expectObject(value) {\n  if (value === null || value === undefined) {\n    return undefined;\n  }\n\n  if (typeof value === \"object\" && !Array.isArray(value)) {\n    return value;\n  }\n\n  throw new TypeError(\"Expected object, got \" + typeof value);\n};\nexport var expectString = function expectString(value) {\n  if (value === null || value === undefined) {\n    return undefined;\n  }\n\n  if (typeof value === \"string\") {\n    return value;\n  }\n\n  throw new TypeError(\"Expected string, got \" + typeof value);\n};\nexport var expectUnion = function expectUnion(value) {\n  if (value === null || value === undefined) {\n    return undefined;\n  }\n\n  var asObject = expectObject(value);\n  var setKeys = Object.entries(asObject).filter(function (_a) {\n    var _b = __read(_a, 2),\n        _ = _b[0],\n        v = _b[1];\n\n    return v !== null && v !== undefined;\n  }).map(function (_a) {\n    var _b = __read(_a, 2),\n        k = _b[0],\n        _ = _b[1];\n\n    return k;\n  });\n\n  if (setKeys.length === 0) {\n    throw new TypeError(\"Unions must have exactly one non-null member\");\n  }\n\n  if (setKeys.length > 1) {\n    throw new TypeError(\"Unions must have exactly one non-null member. Keys \" + setKeys + \" were not null.\");\n  }\n\n  return asObject;\n};\nexport var strictParseDouble = function strictParseDouble(value) {\n  if (typeof value == \"string\") {\n    return expectNumber(parseNumber(value));\n  }\n\n  return expectNumber(value);\n};\nexport var strictParseFloat = strictParseDouble;\nexport var strictParseFloat32 = function strictParseFloat32(value) {\n  if (typeof value == \"string\") {\n    return expectFloat32(parseNumber(value));\n  }\n\n  return expectFloat32(value);\n};\nvar NUMBER_REGEX = /(-?(?:0|[1-9]\\d*)(?:\\.\\d+)?(?:[eE][+-]?\\d+)?)|(-?Infinity)|(NaN)/g;\n\nvar parseNumber = function parseNumber(value) {\n  var matches = value.match(NUMBER_REGEX);\n\n  if (matches === null || matches[0].length !== value.length) {\n    throw new TypeError(\"Expected real number, got implicit NaN\");\n  }\n\n  return parseFloat(value);\n};\n\nexport var limitedParseDouble = function limitedParseDouble(value) {\n  if (typeof value == \"string\") {\n    return parseFloatString(value);\n  }\n\n  return expectNumber(value);\n};\nexport var handleFloat = limitedParseDouble;\nexport var limitedParseFloat = limitedParseDouble;\nexport var limitedParseFloat32 = function limitedParseFloat32(value) {\n  if (typeof value == \"string\") {\n    return parseFloatString(value);\n  }\n\n  return expectFloat32(value);\n};\n\nvar parseFloatString = function parseFloatString(value) {\n  switch (value) {\n    case \"NaN\":\n      return NaN;\n\n    case \"Infinity\":\n      return Infinity;\n\n    case \"-Infinity\":\n      return -Infinity;\n\n    default:\n      throw new Error(\"Unable to parse float value: \" + value);\n  }\n};\n\nexport var strictParseLong = function strictParseLong(value) {\n  if (typeof value === \"string\") {\n    return expectLong(parseNumber(value));\n  }\n\n  return expectLong(value);\n};\nexport var strictParseInt = strictParseLong;\nexport var strictParseInt32 = function strictParseInt32(value) {\n  if (typeof value === \"string\") {\n    return expectInt32(parseNumber(value));\n  }\n\n  return expectInt32(value);\n};\nexport var strictParseShort = function strictParseShort(value) {\n  if (typeof value === \"string\") {\n    return expectShort(parseNumber(value));\n  }\n\n  return expectShort(value);\n};\nexport var strictParseByte = function strictParseByte(value) {\n  if (typeof value === \"string\") {\n    return expectByte(parseNumber(value));\n  }\n\n  return expectByte(value);\n};","map":{"version":3,"sources":["C:/Users/AHSAN PC/Desktop/digitsu/gamp/js/node_modules/@aws-sdk/smithy-client/dist-es/parse-utils.js"],"names":["__read","parseBoolean","value","Error","expectBoolean","undefined","TypeError","expectNumber","MAX_FLOAT","Math","ceil","pow","expectFloat32","expected","Number","isNaN","Infinity","abs","expectLong","isInteger","expectInt","expectInt32","expectSizedInt","expectShort","expectByte","size","castInt","Int32Array","of","Int16Array","Int8Array","expectNonNull","location","expectObject","Array","isArray","expectString","expectUnion","asObject","setKeys","Object","entries","filter","_a","_b","_","v","map","k","length","strictParseDouble","parseNumber","strictParseFloat","strictParseFloat32","NUMBER_REGEX","matches","match","parseFloat","limitedParseDouble","parseFloatString","handleFloat","limitedParseFloat","limitedParseFloat32","NaN","strictParseLong","strictParseInt","strictParseInt32","strictParseShort","strictParseByte"],"mappings":"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","sourcesContent":["import { __read } from \"tslib\";\nexport var parseBoolean = function (value) {\n    switch (value) {\n        case \"true\":\n            return true;\n        case \"false\":\n            return false;\n        default:\n            throw new Error(\"Unable to parse boolean value \\\"\" + value + \"\\\"\");\n    }\n};\nexport var expectBoolean = function (value) {\n    if (value === null || value === undefined) {\n        return undefined;\n    }\n    if (typeof value === \"boolean\") {\n        return value;\n    }\n    throw new TypeError(\"Expected boolean, got \" + typeof value);\n};\nexport var expectNumber = function (value) {\n    if (value === null || value === undefined) {\n        return undefined;\n    }\n    if (typeof value === \"number\") {\n        return value;\n    }\n    throw new TypeError(\"Expected number, got \" + typeof value);\n};\nvar MAX_FLOAT = Math.ceil(Math.pow(2, 127) * (2 - Math.pow(2, -23)));\nexport var expectFloat32 = function (value) {\n    var expected = expectNumber(value);\n    if (expected !== undefined && !Number.isNaN(expected) && expected !== Infinity && expected !== -Infinity) {\n        if (Math.abs(expected) > MAX_FLOAT) {\n            throw new TypeError(\"Expected 32-bit float, got \" + value);\n        }\n    }\n    return expected;\n};\nexport var expectLong = function (value) {\n    if (value === null || value === undefined) {\n        return undefined;\n    }\n    if (Number.isInteger(value) && !Number.isNaN(value)) {\n        return value;\n    }\n    throw new TypeError(\"Expected integer, got \" + typeof value);\n};\nexport var expectInt = expectLong;\nexport var expectInt32 = function (value) { return expectSizedInt(value, 32); };\nexport var expectShort = function (value) { return expectSizedInt(value, 16); };\nexport var expectByte = function (value) { return expectSizedInt(value, 8); };\nvar expectSizedInt = function (value, size) {\n    var expected = expectLong(value);\n    if (expected !== undefined && castInt(expected, size) !== expected) {\n        throw new TypeError(\"Expected \" + size + \"-bit integer, got \" + value);\n    }\n    return expected;\n};\nvar castInt = function (value, size) {\n    switch (size) {\n        case 32:\n            return Int32Array.of(value)[0];\n        case 16:\n            return Int16Array.of(value)[0];\n        case 8:\n            return Int8Array.of(value)[0];\n    }\n};\nexport var expectNonNull = function (value, location) {\n    if (value === null || value === undefined) {\n        if (location) {\n            throw new TypeError(\"Expected a non-null value for \" + location);\n        }\n        throw new TypeError(\"Expected a non-null value\");\n    }\n    return value;\n};\nexport var expectObject = function (value) {\n    if (value === null || value === undefined) {\n        return undefined;\n    }\n    if (typeof value === \"object\" && !Array.isArray(value)) {\n        return value;\n    }\n    throw new TypeError(\"Expected object, got \" + typeof value);\n};\nexport var expectString = function (value) {\n    if (value === null || value === undefined) {\n        return undefined;\n    }\n    if (typeof value === \"string\") {\n        return value;\n    }\n    throw new TypeError(\"Expected string, got \" + typeof value);\n};\nexport var expectUnion = function (value) {\n    if (value === null || value === undefined) {\n        return undefined;\n    }\n    var asObject = expectObject(value);\n    var setKeys = Object.entries(asObject)\n        .filter(function (_a) {\n        var _b = __read(_a, 2), _ = _b[0], v = _b[1];\n        return v !== null && v !== undefined;\n    })\n        .map(function (_a) {\n        var _b = __read(_a, 2), k = _b[0], _ = _b[1];\n        return k;\n    });\n    if (setKeys.length === 0) {\n        throw new TypeError(\"Unions must have exactly one non-null member\");\n    }\n    if (setKeys.length > 1) {\n        throw new TypeError(\"Unions must have exactly one non-null member. Keys \" + setKeys + \" were not null.\");\n    }\n    return asObject;\n};\nexport var strictParseDouble = function (value) {\n    if (typeof value == \"string\") {\n        return expectNumber(parseNumber(value));\n    }\n    return expectNumber(value);\n};\nexport var strictParseFloat = strictParseDouble;\nexport var strictParseFloat32 = function (value) {\n    if (typeof value == \"string\") {\n        return expectFloat32(parseNumber(value));\n    }\n    return expectFloat32(value);\n};\nvar NUMBER_REGEX = /(-?(?:0|[1-9]\\d*)(?:\\.\\d+)?(?:[eE][+-]?\\d+)?)|(-?Infinity)|(NaN)/g;\nvar parseNumber = function (value) {\n    var matches = value.match(NUMBER_REGEX);\n    if (matches === null || matches[0].length !== value.length) {\n        throw new TypeError(\"Expected real number, got implicit NaN\");\n    }\n    return parseFloat(value);\n};\nexport var limitedParseDouble = function (value) {\n    if (typeof value == \"string\") {\n        return parseFloatString(value);\n    }\n    return expectNumber(value);\n};\nexport var handleFloat = limitedParseDouble;\nexport var limitedParseFloat = limitedParseDouble;\nexport var limitedParseFloat32 = function (value) {\n    if (typeof value == \"string\") {\n        return parseFloatString(value);\n    }\n    return expectFloat32(value);\n};\nvar parseFloatString = function (value) {\n    switch (value) {\n        case \"NaN\":\n            return NaN;\n        case \"Infinity\":\n            return Infinity;\n        case \"-Infinity\":\n            return -Infinity;\n        default:\n            throw new Error(\"Unable to parse float value: \" + value);\n    }\n};\nexport var strictParseLong = function (value) {\n    if (typeof value === \"string\") {\n        return expectLong(parseNumber(value));\n    }\n    return expectLong(value);\n};\nexport var strictParseInt = strictParseLong;\nexport var strictParseInt32 = function (value) {\n    if (typeof value === \"string\") {\n        return expectInt32(parseNumber(value));\n    }\n    return expectInt32(value);\n};\nexport var strictParseShort = function (value) {\n    if (typeof value === \"string\") {\n        return expectShort(parseNumber(value));\n    }\n    return expectShort(value);\n};\nexport var strictParseByte = function (value) {\n    if (typeof value === \"string\") {\n        return expectByte(parseNumber(value));\n    }\n    return expectByte(value);\n};\n"]},"metadata":{},"sourceType":"module"}