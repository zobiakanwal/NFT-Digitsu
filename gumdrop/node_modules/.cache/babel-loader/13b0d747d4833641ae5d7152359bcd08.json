{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"C:\\\\Users\\\\AHSAN PC\\\\Desktop\\\\digitsu\\\\gamp\\\\js\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\");\n\nvar _toConsumableArray = require(\"C:\\\\Users\\\\AHSAN PC\\\\Desktop\\\\digitsu\\\\gamp\\\\js\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\toConsumableArray.js\").default;\n\nvar _objectSpread = require(\"C:\\\\Users\\\\AHSAN PC\\\\Desktop\\\\digitsu\\\\gamp\\\\js\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\objectSpread2.js\").default;\n\nvar _asyncToGenerator = require(\"C:\\\\Users\\\\AHSAN PC\\\\Desktop\\\\digitsu\\\\gamp\\\\js\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\asyncToGenerator.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.queryExtendedMetadata = void 0;\n\nvar accounts_1 = require(\"../accounts\");\n\nvar accounts_2 = require(\"../accounts\");\n\nvar accounts_3 = require(\"../accounts\");\n\nvar queryExtendedMetadata = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(connection, mintToMeta) {\n    var mintToMetadata, mints, metadata;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            mintToMetadata = _objectSpread({}, mintToMeta);\n            _context.next = 3;\n            return (0, accounts_2.getMultipleAccounts)(connection, _toConsumableArray(Object.keys(mintToMetadata)).filter(function (k) {\n              return !accounts_1.cache.get(k);\n            }), 'single');\n\n          case 3:\n            mints = _context.sent;\n            mints.keys.forEach(function (key, index) {\n              var mintAccount = mints.array[index];\n\n              if (mintAccount) {\n                var mint = accounts_1.cache.add(key, mintAccount, accounts_3.MintParser, false);\n\n                if (!mint.info.supply.eqn(1) || mint.info.decimals !== 0) {\n                  // naive not NFT check\n                  delete mintToMetadata[key];\n                } else {// const metadata = mintToMetadata[key];\n                }\n              }\n            }); // await Promise.all([...extendedMetadataFetch.values()]);\n\n            metadata = _toConsumableArray(Object.values(mintToMetadata));\n            return _context.abrupt(\"return\", {\n              metadata: metadata,\n              mintToMetadata: mintToMetadata\n            });\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function queryExtendedMetadata(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexports.queryExtendedMetadata = queryExtendedMetadata;","map":{"version":3,"sources":["../../../../src/contexts/meta/queryExtendedMetadata.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAIA,IAAA,UAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;AACA,IAAA,UAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;AACA,IAAA,UAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;AAEO,IAAM,qBAAqB;AAAA,sEAAG,iBACnC,UADmC,EAEnC,UAFmC;AAAA;AAAA;AAAA;AAAA;AAAA;AAI7B,YAAA,cAJ6B,qBAIP,UAJO;AAAA;AAAA,mBAMf,CAAA,GAAA,UAAA,CAAA,mBAAA,EAClB,UADkB,EAElB,mBAAI,MAAM,CAAC,IAAP,CAAY,cAAZ,CAAJ,EAAiC,MAAjC,CAAwC,UAAA,CAAC;AAAA,qBAAI,CAAC,UAAA,CAAA,KAAA,CAAM,GAAN,CAAU,CAAV,CAAL;AAAA,aAAzC,CAFkB,EAGlB,QAHkB,CANe;;AAAA;AAM7B,YAAA,KAN6B;AAYnC,YAAA,KAAK,CAAC,IAAN,CAAW,OAAX,CAAmB,UAAC,GAAD,EAAM,KAAN,EAAe;AAChC,kBAAM,WAAW,GAAG,KAAK,CAAC,KAAN,CAAY,KAAZ,CAApB;;AACA,kBAAI,WAAJ,EAAiB;AACf,oBAAM,IAAI,GAAG,UAAA,CAAA,KAAA,CAAM,GAAN,CACX,GADW,EAEX,WAFW,EAGX,UAAA,CAAA,UAHW,EAIX,KAJW,CAAb;;AAMA,oBAAI,CAAC,IAAI,CAAC,IAAL,CAAU,MAAV,CAAiB,GAAjB,CAAqB,CAArB,CAAD,IAA4B,IAAI,CAAC,IAAL,CAAU,QAAV,KAAuB,CAAvD,EAA0D;AACxD;AACA,yBAAO,cAAc,CAAC,GAAD,CAArB;AACD,iBAHD,MAGO,CACL;AACD;AACF;AACF,aAhBD,EAZmC,CA8BnC;;AACM,YAAA,QA/B6B,sBA+Bd,MAAM,CAAC,MAAP,CAAc,cAAd,CA/Bc;AAAA,6CAiC5B;AACL,cAAA,QAAQ,EAAR,QADK;AAEL,cAAA,cAAc,EAAd;AAFK,aAjC4B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAArB,qBAAqB;AAAA;AAAA;AAAA,GAA3B;;AAAM,OAAA,CAAA,qBAAA,GAAqB,qBAArB","sourceRoot":"","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.queryExtendedMetadata = void 0;\r\nconst accounts_1 = require(\"../accounts\");\r\nconst accounts_2 = require(\"../accounts\");\r\nconst accounts_3 = require(\"../accounts\");\r\nconst queryExtendedMetadata = async (connection, mintToMeta) => {\r\n    const mintToMetadata = { ...mintToMeta };\r\n    const mints = await (0, accounts_2.getMultipleAccounts)(connection, [...Object.keys(mintToMetadata)].filter(k => !accounts_1.cache.get(k)), 'single');\r\n    mints.keys.forEach((key, index) => {\r\n        const mintAccount = mints.array[index];\r\n        if (mintAccount) {\r\n            const mint = accounts_1.cache.add(key, mintAccount, accounts_3.MintParser, false);\r\n            if (!mint.info.supply.eqn(1) || mint.info.decimals !== 0) {\r\n                // naive not NFT check\r\n                delete mintToMetadata[key];\r\n            }\r\n            else {\r\n                // const metadata = mintToMetadata[key];\r\n            }\r\n        }\r\n    });\r\n    // await Promise.all([...extendedMetadataFetch.values()]);\r\n    const metadata = [...Object.values(mintToMetadata)];\r\n    return {\r\n        metadata,\r\n        mintToMetadata,\r\n    };\r\n};\r\nexports.queryExtendedMetadata = queryExtendedMetadata;\r\n//# sourceMappingURL=queryExtendedMetadata.js.map"]},"metadata":{},"sourceType":"script"}