{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"C:\\\\Users\\\\AHSAN PC\\\\Desktop\\\\digitsu\\\\gamp\\\\js\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\");\n\nvar _asyncToGenerator = require(\"C:\\\\Users\\\\AHSAN PC\\\\Desktop\\\\digitsu\\\\gamp\\\\js\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\asyncToGenerator.js\").default;\n\nvar _createClass = require(\"C:\\\\Users\\\\AHSAN PC\\\\Desktop\\\\digitsu\\\\gamp\\\\js\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\createClass.js\").default;\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\AHSAN PC\\\\Desktop\\\\digitsu\\\\gamp\\\\js\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\classCallCheck.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getProvingProcessByPubkey = exports.getProvingProcessByPackSetAndWallet = exports.decodePackProvingProcess = exports.PACK_PROVING_PROCESS_SCHEMA = exports.ProvingProcess = void 0;\n\nvar web3_js_1 = require(\"@solana/web3.js\");\n\nvar borsh_1 = require(\"borsh\");\n\nvar __1 = require(\"..\");\n\nvar __2 = require(\"../../..\");\n\nvar web3_1 = require(\"../../../contexts/meta/web3\");\n\nvar ProvingProcess = /*#__PURE__*/_createClass(function ProvingProcess(args) {\n  _classCallCheck(this, ProvingProcess);\n\n  this.key = __1.PackKey.ProvingProcess;\n  this.key = __1.PackKey.PackSet;\n  this.walletKey = args.walletKey;\n  this.isExhausted = Boolean(args.isExhausted);\n  this.voucherMint = args.voucherMint;\n  this.packSet = args.packSet;\n  this.cardsToRedeem = args.cardsToRedeem;\n  this.cardsRedeemed = args.cardsRedeemed;\n});\n\nexports.ProvingProcess = ProvingProcess;\nexports.PACK_PROVING_PROCESS_SCHEMA = new Map([[ProvingProcess, {\n  kind: 'struct',\n  fields: [['key', 'u8'], ['walletKey', 'pubkeyAsString'], ['isExhausted', 'u8'], ['voucherMint', 'pubkeyAsString'], ['packSet', 'pubkeyAsString'], ['cardsRedeemed', 'u32'], ['cardsToRedeem', 'map32'] //BTreeMap<u32, u32>\n  ]\n}]]);\n\nvar decodePackProvingProcess = function decodePackProvingProcess(buffer) {\n  return (0, borsh_1.deserializeUnchecked)(exports.PACK_PROVING_PROCESS_SCHEMA, ProvingProcess, buffer);\n};\n\nexports.decodePackProvingProcess = decodePackProvingProcess;\n\nvar getProvingProcessByPackSetAndWallet = function getProvingProcessByPackSetAndWallet(_ref) {\n  var connection = _ref.connection,\n      packSetKey = _ref.packSetKey,\n      walletKey = _ref.walletKey;\n  return (0, web3_1.getProgramAccounts)(connection, __2.PACK_CREATE_ID.toString(), {\n    commitment: 'processed',\n    filters: [{\n      dataSize: __1.MAX_PACK_PROVING_PROCESS_SIZE\n    }, {\n      memcmp: {\n        offset: 1,\n        bytes: (0, __2.toPublicKey)(walletKey).toBase58()\n      }\n    }, {\n      memcmp: {\n        offset: 1 + 32 + 1 + 32,\n        bytes: (0, __2.toPublicKey)(packSetKey).toBase58()\n      }\n    }]\n  });\n};\n\nexports.getProvingProcessByPackSetAndWallet = getProvingProcessByPackSetAndWallet;\n\nvar getProvingProcessByPubkey = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(connection, pubkey) {\n    var info;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return connection.getAccountInfo(new web3_js_1.PublicKey(pubkey), 'processed');\n\n          case 2:\n            info = _context.sent;\n\n            if (info) {\n              _context.next = 5;\n              break;\n            }\n\n            throw new Error(\"Unable to find account: \".concat(pubkey));\n\n          case 5:\n            return _context.abrupt(\"return\", {\n              pubkey: pubkey,\n              account: info,\n              info: (0, exports.decodePackProvingProcess)(Buffer.from(info === null || info === void 0 ? void 0 : info.data))\n            });\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function getProvingProcessByPubkey(_x, _x2) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nexports.getProvingProcessByPubkey = getProvingProcessByPubkey;","map":{"version":3,"sources":["../../../../../src/models/packs/accounts/ProvingProcess.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.getProvingProcessByPubkey = exports.getProvingProcessByPackSetAndWallet = exports.decodePackProvingProcess = exports.PACK_PROVING_PROCESS_SCHEMA = exports.ProvingProcess = void 0;\r\nconst web3_js_1 = require(\"@solana/web3.js\");\r\nconst borsh_1 = require(\"borsh\");\r\nconst __1 = require(\"..\");\r\nconst __2 = require(\"../../..\");\r\nconst web3_1 = require(\"../../../contexts/meta/web3\");\r\nclass ProvingProcess {\r\n    constructor(args) {\r\n        this.key = __1.PackKey.ProvingProcess;\r\n        this.key = __1.PackKey.PackSet;\r\n        this.walletKey = args.walletKey;\r\n        this.isExhausted = Boolean(args.isExhausted);\r\n        this.voucherMint = args.voucherMint;\r\n        this.packSet = args.packSet;\r\n        this.cardsToRedeem = args.cardsToRedeem;\r\n        this.cardsRedeemed = args.cardsRedeemed;\r\n    }\r\n}\r\nexports.ProvingProcess = ProvingProcess;\r\nexports.PACK_PROVING_PROCESS_SCHEMA = new Map([\r\n    [\r\n        ProvingProcess,\r\n        {\r\n            kind: 'struct',\r\n            fields: [\r\n                ['key', 'u8'],\r\n                ['walletKey', 'pubkeyAsString'],\r\n                ['isExhausted', 'u8'],\r\n                ['voucherMint', 'pubkeyAsString'],\r\n                ['packSet', 'pubkeyAsString'],\r\n                ['cardsRedeemed', 'u32'],\r\n                ['cardsToRedeem', 'map32'], //BTreeMap<u32, u32>\r\n            ],\r\n        },\r\n    ],\r\n]);\r\nconst decodePackProvingProcess = (buffer) => {\r\n    return (0, borsh_1.deserializeUnchecked)(exports.PACK_PROVING_PROCESS_SCHEMA, ProvingProcess, buffer);\r\n};\r\nexports.decodePackProvingProcess = decodePackProvingProcess;\r\nconst getProvingProcessByPackSetAndWallet = ({ connection, packSetKey, walletKey, }) => (0, web3_1.getProgramAccounts)(connection, __2.PACK_CREATE_ID.toString(), {\r\n    commitment: 'processed',\r\n    filters: [\r\n        {\r\n            dataSize: __1.MAX_PACK_PROVING_PROCESS_SIZE,\r\n        },\r\n        {\r\n            memcmp: {\r\n                offset: 1,\r\n                bytes: (0, __2.toPublicKey)(walletKey).toBase58(),\r\n            },\r\n        },\r\n        {\r\n            memcmp: {\r\n                offset: 1 + 32 + 1 + 32,\r\n                bytes: (0, __2.toPublicKey)(packSetKey).toBase58(),\r\n            },\r\n        },\r\n    ],\r\n});\r\nexports.getProvingProcessByPackSetAndWallet = getProvingProcessByPackSetAndWallet;\r\nconst getProvingProcessByPubkey = async (connection, pubkey) => {\r\n    const info = await connection.getAccountInfo(new web3_js_1.PublicKey(pubkey), 'processed');\r\n    if (!info) {\r\n        throw new Error(`Unable to find account: ${pubkey}`);\r\n    }\r\n    return {\r\n        pubkey,\r\n        account: info,\r\n        info: (0, exports.decodePackProvingProcess)(Buffer.from(info === null || info === void 0 ? void 0 : info.data)),\r\n    };\r\n};\r\nexports.getProvingProcessByPubkey = getProvingProcessByPubkey;\r\n//# sourceMappingURL=ProvingProcess.js.map"]},"metadata":{},"sourceType":"script"}