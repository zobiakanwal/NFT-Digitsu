{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"C:\\\\Users\\\\AHSAN PC\\\\Desktop\\\\digitsu\\\\gamp\\\\js\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\");\n\nvar _asyncToGenerator = require(\"C:\\\\Users\\\\AHSAN PC\\\\Desktop\\\\digitsu\\\\gamp\\\\js\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\asyncToGenerator.js\").default;\n\nvar _createClass = require(\"C:\\\\Users\\\\AHSAN PC\\\\Desktop\\\\digitsu\\\\gamp\\\\js\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\createClass.js\").default;\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\AHSAN PC\\\\Desktop\\\\digitsu\\\\gamp\\\\js\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\classCallCheck.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getSafetyDepositBoxAddress = exports.updateExternalPriceAccount = exports.withdrawTokenFromSafetyDepositBox = exports.combineVault = exports.activateVault = exports.addTokenToInactiveVault = exports.getSafetyDepositBox = exports.initVault = exports.setVaultAuthority = exports.decodeSafetyDeposit = exports.decodeExternalPriceAccount = exports.decodeVault = exports.VAULT_SCHEMA = exports.ExternalPriceAccount = exports.SafetyDepositBox = exports.Vault = exports.MAX_EXTERNAL_ACCOUNT_SIZE = exports.MAX_VAULT_SIZE = exports.VaultState = exports.VaultKey = exports.VAULT_PREFIX = void 0;\n\nvar web3_js_1 = require(\"@solana/web3.js\");\n\nvar programIds_1 = require(\"../utils/programIds\");\n\nvar borsh_1 = require(\"borsh\");\n\nvar utils_1 = require(\"../utils\");\n\nexports.VAULT_PREFIX = 'vault';\nvar VaultKey;\n\n(function (VaultKey) {\n  VaultKey[VaultKey[\"Uninitialized\"] = 0] = \"Uninitialized\";\n  VaultKey[VaultKey[\"VaultV1\"] = 3] = \"VaultV1\";\n  VaultKey[VaultKey[\"SafetyDepositBoxV1\"] = 1] = \"SafetyDepositBoxV1\";\n  VaultKey[VaultKey[\"ExternalPriceAccountV1\"] = 2] = \"ExternalPriceAccountV1\";\n})(VaultKey = exports.VaultKey || (exports.VaultKey = {}));\n\nvar VaultState;\n\n(function (VaultState) {\n  VaultState[VaultState[\"Inactive\"] = 0] = \"Inactive\";\n  VaultState[VaultState[\"Active\"] = 1] = \"Active\";\n  VaultState[VaultState[\"Combined\"] = 2] = \"Combined\";\n  VaultState[VaultState[\"Deactivated\"] = 3] = \"Deactivated\";\n})(VaultState = exports.VaultState || (exports.VaultState = {}));\n\nexports.MAX_VAULT_SIZE = 1 + 32 + 32 + 32 + 32 + 1 + 32 + 1 + 32 + 1 + 1 + 8;\nexports.MAX_EXTERNAL_ACCOUNT_SIZE = 1 + 8 + 32 + 1;\n\nvar Vault = /*#__PURE__*/_createClass(function Vault(args) {\n  _classCallCheck(this, Vault);\n\n  this.key = VaultKey.VaultV1;\n  this.tokenProgram = args.tokenProgram;\n  this.fractionMint = args.fractionMint;\n  this.authority = args.authority;\n  this.fractionTreasury = args.fractionTreasury;\n  this.redeemTreasury = args.redeemTreasury;\n  this.allowFurtherShareCreation = args.allowFurtherShareCreation;\n  this.pricingLookupAddress = args.pricingLookupAddress;\n  this.tokenTypeCount = args.tokenTypeCount;\n  this.state = args.state;\n  this.lockedPricePerShare = args.lockedPricePerShare;\n});\n\nexports.Vault = Vault;\n\nvar SafetyDepositBox = /*#__PURE__*/_createClass(function SafetyDepositBox(args) {\n  _classCallCheck(this, SafetyDepositBox);\n\n  this.key = VaultKey.SafetyDepositBoxV1;\n  this.vault = args.vault;\n  this.tokenMint = args.tokenMint;\n  this.store = args.store;\n  this.order = args.order;\n});\n\nexports.SafetyDepositBox = SafetyDepositBox;\n\nvar ExternalPriceAccount = /*#__PURE__*/_createClass(function ExternalPriceAccount(args) {\n  _classCallCheck(this, ExternalPriceAccount);\n\n  this.key = VaultKey.ExternalPriceAccountV1;\n  this.pricePerShare = args.pricePerShare;\n  this.priceMint = args.priceMint;\n  this.allowedToCombine = args.allowedToCombine;\n});\n\nexports.ExternalPriceAccount = ExternalPriceAccount;\n\nvar InitVaultArgs = /*#__PURE__*/_createClass(function InitVaultArgs(args) {\n  _classCallCheck(this, InitVaultArgs);\n\n  this.instruction = 0;\n  this.allowFurtherShareCreation = false;\n  this.allowFurtherShareCreation = args.allowFurtherShareCreation;\n});\n\nvar AmountArgs = /*#__PURE__*/_createClass(function AmountArgs(args) {\n  _classCallCheck(this, AmountArgs);\n\n  this.instruction = args.instruction;\n  this.amount = args.amount;\n});\n\nvar NumberOfShareArgs = /*#__PURE__*/_createClass(function NumberOfShareArgs(args) {\n  _classCallCheck(this, NumberOfShareArgs);\n\n  this.instruction = args.instruction;\n  this.numberOfShares = args.numberOfShares;\n});\n\nvar UpdateExternalPriceAccountArgs = /*#__PURE__*/_createClass(function UpdateExternalPriceAccountArgs(args) {\n  _classCallCheck(this, UpdateExternalPriceAccountArgs);\n\n  this.instruction = 9;\n  this.externalPriceAccount = args.externalPriceAccount;\n});\n\nexports.VAULT_SCHEMA = new Map([[InitVaultArgs, {\n  kind: 'struct',\n  fields: [['instruction', 'u8'], ['allowFurtherShareCreation', 'u8']]\n}], [AmountArgs, {\n  kind: 'struct',\n  fields: [['instruction', 'u8'], ['amount', 'u64']]\n}], [NumberOfShareArgs, {\n  kind: 'struct',\n  fields: [['instruction', 'u8'], ['numberOfShares', 'u64']]\n}], [UpdateExternalPriceAccountArgs, {\n  kind: 'struct',\n  fields: [['instruction', 'u8'], ['externalPriceAccount', ExternalPriceAccount]]\n}], [Vault, {\n  kind: 'struct',\n  fields: [['key', 'u8'], ['tokenProgram', 'pubkeyAsString'], ['fractionMint', 'pubkeyAsString'], ['authority', 'pubkeyAsString'], ['fractionTreasury', 'pubkeyAsString'], ['redeemTreasury', 'pubkeyAsString'], ['allowFurtherShareCreation', 'u8'], ['pricingLookupAddress', 'pubkeyAsString'], ['tokenTypeCount', 'u8'], ['state', 'u8'], ['lockedPricePerShare', 'u64']]\n}], [SafetyDepositBox, {\n  kind: 'struct',\n  fields: [['key', 'u8'], ['vault', 'pubkeyAsString'], ['tokenMint', 'pubkeyAsString'], ['store', 'pubkeyAsString'], ['order', 'u8']]\n}], [ExternalPriceAccount, {\n  kind: 'struct',\n  fields: [['key', 'u8'], ['pricePerShare', 'u64'], ['priceMint', 'pubkeyAsString'], ['allowedToCombine', 'u8']]\n}]]);\n\nvar decodeVault = function decodeVault(buffer) {\n  return (0, borsh_1.deserializeUnchecked)(exports.VAULT_SCHEMA, Vault, buffer);\n};\n\nexports.decodeVault = decodeVault;\n\nvar decodeExternalPriceAccount = function decodeExternalPriceAccount(buffer) {\n  return (0, borsh_1.deserializeUnchecked)(exports.VAULT_SCHEMA, ExternalPriceAccount, buffer);\n};\n\nexports.decodeExternalPriceAccount = decodeExternalPriceAccount;\n\nvar decodeSafetyDeposit = function decodeSafetyDeposit(buffer) {\n  return (0, borsh_1.deserializeUnchecked)(exports.VAULT_SCHEMA, SafetyDepositBox, buffer);\n};\n\nexports.decodeSafetyDeposit = decodeSafetyDeposit;\n\nfunction setVaultAuthority(_x, _x2, _x3, _x4) {\n  return _setVaultAuthority.apply(this, arguments);\n}\n\nfunction _setVaultAuthority() {\n  _setVaultAuthority = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(vault, currentAuthority, newAuthority, instructions) {\n    var vaultProgramId, data, keys;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            vaultProgramId = (0, programIds_1.programIds)().vault;\n            data = Buffer.from([10]);\n            keys = [{\n              pubkey: (0, utils_1.toPublicKey)(vault),\n              isSigner: false,\n              isWritable: true\n            }, {\n              pubkey: (0, utils_1.toPublicKey)(currentAuthority),\n              isSigner: true,\n              isWritable: false\n            }, {\n              pubkey: (0, utils_1.toPublicKey)(newAuthority),\n              isSigner: false,\n              isWritable: false\n            }];\n            instructions.push(new web3_js_1.TransactionInstruction({\n              keys: keys,\n              programId: (0, utils_1.toPublicKey)(vaultProgramId),\n              data: data\n            }));\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _setVaultAuthority.apply(this, arguments);\n}\n\nexports.setVaultAuthority = setVaultAuthority;\n\nfunction initVault(_x5, _x6, _x7, _x8, _x9, _x10, _x11, _x12) {\n  return _initVault.apply(this, arguments);\n}\n\nfunction _initVault() {\n  _initVault = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(allowFurtherShareCreation, fractionalMint, redeemTreasury, fractionalTreasury, vault, vaultAuthority, pricingLookupAddress, instructions) {\n    var vaultProgramId, data, keys;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            vaultProgramId = (0, programIds_1.programIds)().vault;\n            data = Buffer.from((0, borsh_1.serialize)(exports.VAULT_SCHEMA, new InitVaultArgs({\n              allowFurtherShareCreation: allowFurtherShareCreation\n            })));\n            keys = [{\n              pubkey: (0, utils_1.toPublicKey)(fractionalMint),\n              isSigner: false,\n              isWritable: true\n            }, {\n              pubkey: (0, utils_1.toPublicKey)(redeemTreasury),\n              isSigner: false,\n              isWritable: true\n            }, {\n              pubkey: (0, utils_1.toPublicKey)(fractionalTreasury),\n              isSigner: false,\n              isWritable: true\n            }, {\n              pubkey: (0, utils_1.toPublicKey)(vault),\n              isSigner: false,\n              isWritable: true\n            }, {\n              pubkey: (0, utils_1.toPublicKey)(vaultAuthority),\n              isSigner: false,\n              isWritable: false\n            }, {\n              pubkey: (0, utils_1.toPublicKey)(pricingLookupAddress),\n              isSigner: false,\n              isWritable: false\n            }, {\n              pubkey: (0, programIds_1.programIds)().token,\n              isSigner: false,\n              isWritable: false\n            }, {\n              pubkey: web3_js_1.SYSVAR_RENT_PUBKEY,\n              isSigner: false,\n              isWritable: false\n            }];\n            instructions.push(new web3_js_1.TransactionInstruction({\n              keys: keys,\n              programId: (0, utils_1.toPublicKey)(vaultProgramId),\n              data: data\n            }));\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _initVault.apply(this, arguments);\n}\n\nexports.initVault = initVault;\n\nfunction getSafetyDepositBox(_x13, _x14) {\n  return _getSafetyDepositBox.apply(this, arguments);\n}\n\nfunction _getSafetyDepositBox() {\n  _getSafetyDepositBox = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(vault, tokenMint) {\n    var vaultProgramId;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            vaultProgramId = (0, programIds_1.programIds)().vault;\n            _context3.next = 3;\n            return (0, utils_1.findProgramAddress)([Buffer.from(exports.VAULT_PREFIX), (0, utils_1.toPublicKey)(vault).toBuffer(), (0, utils_1.toPublicKey)(tokenMint).toBuffer()], (0, utils_1.toPublicKey)(vaultProgramId));\n\n          case 3:\n            return _context3.abrupt(\"return\", _context3.sent[0]);\n\n          case 4:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _getSafetyDepositBox.apply(this, arguments);\n}\n\nexports.getSafetyDepositBox = getSafetyDepositBox;\n\nfunction addTokenToInactiveVault(_x15, _x16, _x17, _x18, _x19, _x20, _x21, _x22, _x23) {\n  return _addTokenToInactiveVault.apply(this, arguments);\n}\n\nfunction _addTokenToInactiveVault() {\n  _addTokenToInactiveVault = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(amount, tokenMint, tokenAccount, tokenStoreAccount, vault, vaultAuthority, payer, transferAuthority, instructions) {\n    var vaultProgramId, safetyDepositBox, value, data, keys;\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            vaultProgramId = (0, programIds_1.programIds)().vault;\n            _context4.next = 3;\n            return getSafetyDepositBox(vault, tokenMint);\n\n          case 3:\n            safetyDepositBox = _context4.sent;\n            value = new AmountArgs({\n              instruction: 1,\n              amount: amount\n            });\n            data = Buffer.from((0, borsh_1.serialize)(exports.VAULT_SCHEMA, value));\n            keys = [{\n              pubkey: (0, utils_1.toPublicKey)(safetyDepositBox),\n              isSigner: false,\n              isWritable: true\n            }, {\n              pubkey: (0, utils_1.toPublicKey)(tokenAccount),\n              isSigner: false,\n              isWritable: true\n            }, {\n              pubkey: (0, utils_1.toPublicKey)(tokenStoreAccount),\n              isSigner: false,\n              isWritable: true\n            }, {\n              pubkey: (0, utils_1.toPublicKey)(vault),\n              isSigner: false,\n              isWritable: true\n            }, {\n              pubkey: (0, utils_1.toPublicKey)(vaultAuthority),\n              isSigner: true,\n              isWritable: false\n            }, {\n              pubkey: (0, utils_1.toPublicKey)(payer),\n              isSigner: true,\n              isWritable: false\n            }, {\n              pubkey: (0, utils_1.toPublicKey)(transferAuthority),\n              isSigner: true,\n              isWritable: false\n            }, {\n              pubkey: (0, programIds_1.programIds)().token,\n              isSigner: false,\n              isWritable: false\n            }, {\n              pubkey: web3_js_1.SYSVAR_RENT_PUBKEY,\n              isSigner: false,\n              isWritable: false\n            }, {\n              pubkey: web3_js_1.SystemProgram.programId,\n              isSigner: false,\n              isWritable: false\n            }];\n            instructions.push(new web3_js_1.TransactionInstruction({\n              keys: keys,\n              programId: (0, utils_1.toPublicKey)(vaultProgramId),\n              data: data\n            }));\n\n          case 8:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n  return _addTokenToInactiveVault.apply(this, arguments);\n}\n\nexports.addTokenToInactiveVault = addTokenToInactiveVault;\n\nfunction activateVault(_x24, _x25, _x26, _x27, _x28, _x29) {\n  return _activateVault.apply(this, arguments);\n}\n\nfunction _activateVault() {\n  _activateVault = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(numberOfShares, vault, fractionMint, fractionTreasury, vaultAuthority, instructions) {\n    var vaultProgramId, fractionMintAuthority, value, data, keys;\n    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            vaultProgramId = (0, programIds_1.programIds)().vault;\n            _context5.next = 3;\n            return (0, utils_1.findProgramAddress)([Buffer.from(exports.VAULT_PREFIX), (0, utils_1.toPublicKey)(vaultProgramId).toBuffer(), (0, utils_1.toPublicKey)(vault).toBuffer()], (0, utils_1.toPublicKey)(vaultProgramId));\n\n          case 3:\n            fractionMintAuthority = _context5.sent[0];\n            value = new NumberOfShareArgs({\n              instruction: 2,\n              numberOfShares: numberOfShares\n            });\n            data = Buffer.from((0, borsh_1.serialize)(exports.VAULT_SCHEMA, value));\n            keys = [{\n              pubkey: (0, utils_1.toPublicKey)(vault),\n              isSigner: false,\n              isWritable: true\n            }, {\n              pubkey: (0, utils_1.toPublicKey)(fractionMint),\n              isSigner: false,\n              isWritable: true\n            }, {\n              pubkey: (0, utils_1.toPublicKey)(fractionTreasury),\n              isSigner: false,\n              isWritable: true\n            }, {\n              pubkey: (0, utils_1.toPublicKey)(fractionMintAuthority),\n              isSigner: false,\n              isWritable: false\n            }, {\n              pubkey: (0, utils_1.toPublicKey)(vaultAuthority),\n              isSigner: true,\n              isWritable: false\n            }, {\n              pubkey: (0, programIds_1.programIds)().token,\n              isSigner: false,\n              isWritable: false\n            }];\n            instructions.push(new web3_js_1.TransactionInstruction({\n              keys: keys,\n              programId: (0, utils_1.toPublicKey)(vaultProgramId),\n              data: data\n            }));\n\n          case 8:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  }));\n  return _activateVault.apply(this, arguments);\n}\n\nexports.activateVault = activateVault;\n\nfunction combineVault(_x30, _x31, _x32, _x33, _x34, _x35, _x36, _x37, _x38, _x39, _x40) {\n  return _combineVault.apply(this, arguments);\n}\n\nfunction _combineVault() {\n  _combineVault = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(vault, outstandingShareTokenAccount, payingTokenAccount, fractionMint, fractionTreasury, redeemTreasury, newVaultAuthority, vaultAuthority, transferAuthority, externalPriceAccount, instructions) {\n    var vaultProgramId, burnAuthority, data, keys;\n    return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            vaultProgramId = (0, programIds_1.programIds)().vault;\n            _context6.next = 3;\n            return (0, utils_1.findProgramAddress)([Buffer.from(exports.VAULT_PREFIX), (0, utils_1.toPublicKey)(vaultProgramId).toBuffer(), (0, utils_1.toPublicKey)(vault).toBuffer()], (0, utils_1.toPublicKey)(vaultProgramId));\n\n          case 3:\n            burnAuthority = _context6.sent[0];\n            data = Buffer.from([3]);\n            keys = [{\n              pubkey: (0, utils_1.toPublicKey)(vault),\n              isSigner: false,\n              isWritable: true\n            }, {\n              pubkey: (0, utils_1.toPublicKey)(outstandingShareTokenAccount),\n              isSigner: false,\n              isWritable: true\n            }, {\n              pubkey: (0, utils_1.toPublicKey)(payingTokenAccount),\n              isSigner: false,\n              isWritable: true\n            }, {\n              pubkey: (0, utils_1.toPublicKey)(fractionMint),\n              isSigner: false,\n              isWritable: true\n            }, {\n              pubkey: (0, utils_1.toPublicKey)(fractionTreasury),\n              isSigner: false,\n              isWritable: true\n            }, {\n              pubkey: (0, utils_1.toPublicKey)(redeemTreasury),\n              isSigner: false,\n              isWritable: true\n            }, {\n              pubkey: (0, utils_1.toPublicKey)(newVaultAuthority || vaultAuthority),\n              isSigner: false,\n              isWritable: false\n            }, {\n              pubkey: (0, utils_1.toPublicKey)(vaultAuthority),\n              isSigner: true,\n              isWritable: false\n            }, {\n              pubkey: (0, utils_1.toPublicKey)(transferAuthority),\n              isSigner: true,\n              isWritable: false\n            }, {\n              pubkey: (0, utils_1.toPublicKey)(burnAuthority),\n              isSigner: false,\n              isWritable: false\n            }, {\n              pubkey: (0, utils_1.toPublicKey)(externalPriceAccount),\n              isSigner: false,\n              isWritable: false\n            }, {\n              pubkey: (0, programIds_1.programIds)().token,\n              isSigner: false,\n              isWritable: false\n            }];\n            instructions.push(new web3_js_1.TransactionInstruction({\n              keys: keys,\n              programId: (0, utils_1.toPublicKey)(vaultProgramId),\n              data: data\n            }));\n\n          case 7:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, _callee6);\n  }));\n  return _combineVault.apply(this, arguments);\n}\n\nexports.combineVault = combineVault;\n\nfunction withdrawTokenFromSafetyDepositBox(_x41, _x42, _x43, _x44, _x45, _x46, _x47, _x48) {\n  return _withdrawTokenFromSafetyDepositBox.apply(this, arguments);\n}\n\nfunction _withdrawTokenFromSafetyDepositBox() {\n  _withdrawTokenFromSafetyDepositBox = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(amount, destination, safetyDepositBox, storeKey, vault, fractionMint, vaultAuthority, instructions) {\n    var vaultProgramId, transferAuthority, value, data, keys;\n    return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            vaultProgramId = (0, programIds_1.programIds)().vault;\n            _context7.next = 3;\n            return (0, utils_1.findProgramAddress)([Buffer.from(exports.VAULT_PREFIX), (0, utils_1.toPublicKey)(vaultProgramId).toBuffer(), (0, utils_1.toPublicKey)(vault).toBuffer()], (0, utils_1.toPublicKey)(vaultProgramId));\n\n          case 3:\n            transferAuthority = _context7.sent[0];\n            value = new AmountArgs({\n              instruction: 5,\n              amount: amount\n            });\n            data = Buffer.from((0, borsh_1.serialize)(exports.VAULT_SCHEMA, value));\n            keys = [{\n              pubkey: (0, utils_1.toPublicKey)(destination),\n              isSigner: false,\n              isWritable: true\n            }, {\n              pubkey: (0, utils_1.toPublicKey)(safetyDepositBox),\n              isSigner: false,\n              isWritable: true\n            }, {\n              pubkey: (0, utils_1.toPublicKey)(storeKey),\n              isSigner: false,\n              isWritable: true\n            }, {\n              pubkey: (0, utils_1.toPublicKey)(vault),\n              isSigner: false,\n              isWritable: true\n            }, {\n              pubkey: (0, utils_1.toPublicKey)(fractionMint),\n              isSigner: false,\n              isWritable: true\n            }, {\n              pubkey: (0, utils_1.toPublicKey)(vaultAuthority),\n              isSigner: true,\n              isWritable: false\n            }, {\n              pubkey: (0, utils_1.toPublicKey)(transferAuthority),\n              isSigner: false,\n              isWritable: false\n            }, {\n              pubkey: (0, programIds_1.programIds)().token,\n              isSigner: false,\n              isWritable: false\n            }, {\n              pubkey: web3_js_1.SYSVAR_RENT_PUBKEY,\n              isSigner: false,\n              isWritable: false\n            }];\n            instructions.push(new web3_js_1.TransactionInstruction({\n              keys: keys,\n              programId: (0, utils_1.toPublicKey)(vaultProgramId),\n              data: data\n            }));\n\n          case 8:\n          case \"end\":\n            return _context7.stop();\n        }\n      }\n    }, _callee7);\n  }));\n  return _withdrawTokenFromSafetyDepositBox.apply(this, arguments);\n}\n\nexports.withdrawTokenFromSafetyDepositBox = withdrawTokenFromSafetyDepositBox;\n\nfunction updateExternalPriceAccount(_x49, _x50, _x51) {\n  return _updateExternalPriceAccount.apply(this, arguments);\n}\n\nfunction _updateExternalPriceAccount() {\n  _updateExternalPriceAccount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(externalPriceAccountKey, externalPriceAccount, instructions) {\n    var vaultProgramId, value, data, keys;\n    return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n      while (1) {\n        switch (_context8.prev = _context8.next) {\n          case 0:\n            vaultProgramId = (0, programIds_1.programIds)().vault;\n            value = new UpdateExternalPriceAccountArgs({\n              externalPriceAccount: externalPriceAccount\n            });\n            data = Buffer.from((0, borsh_1.serialize)(exports.VAULT_SCHEMA, value));\n            console.log('Data', data);\n            keys = [{\n              pubkey: (0, utils_1.toPublicKey)(externalPriceAccountKey),\n              isSigner: false,\n              isWritable: true\n            }];\n            instructions.push(new web3_js_1.TransactionInstruction({\n              keys: keys,\n              programId: (0, utils_1.toPublicKey)(vaultProgramId),\n              data: data\n            }));\n\n          case 6:\n          case \"end\":\n            return _context8.stop();\n        }\n      }\n    }, _callee8);\n  }));\n  return _updateExternalPriceAccount.apply(this, arguments);\n}\n\nexports.updateExternalPriceAccount = updateExternalPriceAccount;\n\nfunction getSafetyDepositBoxAddress(_x52, _x53) {\n  return _getSafetyDepositBoxAddress.apply(this, arguments);\n}\n\nfunction _getSafetyDepositBoxAddress() {\n  _getSafetyDepositBoxAddress = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(vault, tokenMint) {\n    var PROGRAM_IDS;\n    return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n      while (1) {\n        switch (_context9.prev = _context9.next) {\n          case 0:\n            PROGRAM_IDS = (0, programIds_1.programIds)();\n            _context9.next = 3;\n            return (0, utils_1.findProgramAddress)([Buffer.from(exports.VAULT_PREFIX), (0, utils_1.toPublicKey)(vault).toBuffer(), (0, utils_1.toPublicKey)(tokenMint).toBuffer()], (0, utils_1.toPublicKey)(PROGRAM_IDS.vault));\n\n          case 3:\n            return _context9.abrupt(\"return\", _context9.sent[0]);\n\n          case 4:\n          case \"end\":\n            return _context9.stop();\n        }\n      }\n    }, _callee9);\n  }));\n  return _getSafetyDepositBoxAddress.apply(this, arguments);\n}\n\nexports.getSafetyDepositBoxAddress = getSafetyDepositBoxAddress;","map":{"version":3,"sources":["../../../src/actions/vault.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.getSafetyDepositBoxAddress = exports.updateExternalPriceAccount = exports.withdrawTokenFromSafetyDepositBox = exports.combineVault = exports.activateVault = exports.addTokenToInactiveVault = exports.getSafetyDepositBox = exports.initVault = exports.setVaultAuthority = exports.decodeSafetyDeposit = exports.decodeExternalPriceAccount = exports.decodeVault = exports.VAULT_SCHEMA = exports.ExternalPriceAccount = exports.SafetyDepositBox = exports.Vault = exports.MAX_EXTERNAL_ACCOUNT_SIZE = exports.MAX_VAULT_SIZE = exports.VaultState = exports.VaultKey = exports.VAULT_PREFIX = void 0;\r\nconst web3_js_1 = require(\"@solana/web3.js\");\r\nconst programIds_1 = require(\"../utils/programIds\");\r\nconst borsh_1 = require(\"borsh\");\r\nconst utils_1 = require(\"../utils\");\r\nexports.VAULT_PREFIX = 'vault';\r\nvar VaultKey;\r\n(function (VaultKey) {\r\n    VaultKey[VaultKey[\"Uninitialized\"] = 0] = \"Uninitialized\";\r\n    VaultKey[VaultKey[\"VaultV1\"] = 3] = \"VaultV1\";\r\n    VaultKey[VaultKey[\"SafetyDepositBoxV1\"] = 1] = \"SafetyDepositBoxV1\";\r\n    VaultKey[VaultKey[\"ExternalPriceAccountV1\"] = 2] = \"ExternalPriceAccountV1\";\r\n})(VaultKey = exports.VaultKey || (exports.VaultKey = {}));\r\nvar VaultState;\r\n(function (VaultState) {\r\n    VaultState[VaultState[\"Inactive\"] = 0] = \"Inactive\";\r\n    VaultState[VaultState[\"Active\"] = 1] = \"Active\";\r\n    VaultState[VaultState[\"Combined\"] = 2] = \"Combined\";\r\n    VaultState[VaultState[\"Deactivated\"] = 3] = \"Deactivated\";\r\n})(VaultState = exports.VaultState || (exports.VaultState = {}));\r\nexports.MAX_VAULT_SIZE = 1 + 32 + 32 + 32 + 32 + 1 + 32 + 1 + 32 + 1 + 1 + 8;\r\nexports.MAX_EXTERNAL_ACCOUNT_SIZE = 1 + 8 + 32 + 1;\r\nclass Vault {\r\n    constructor(args) {\r\n        this.key = VaultKey.VaultV1;\r\n        this.tokenProgram = args.tokenProgram;\r\n        this.fractionMint = args.fractionMint;\r\n        this.authority = args.authority;\r\n        this.fractionTreasury = args.fractionTreasury;\r\n        this.redeemTreasury = args.redeemTreasury;\r\n        this.allowFurtherShareCreation = args.allowFurtherShareCreation;\r\n        this.pricingLookupAddress = args.pricingLookupAddress;\r\n        this.tokenTypeCount = args.tokenTypeCount;\r\n        this.state = args.state;\r\n        this.lockedPricePerShare = args.lockedPricePerShare;\r\n    }\r\n}\r\nexports.Vault = Vault;\r\nclass SafetyDepositBox {\r\n    constructor(args) {\r\n        this.key = VaultKey.SafetyDepositBoxV1;\r\n        this.vault = args.vault;\r\n        this.tokenMint = args.tokenMint;\r\n        this.store = args.store;\r\n        this.order = args.order;\r\n    }\r\n}\r\nexports.SafetyDepositBox = SafetyDepositBox;\r\nclass ExternalPriceAccount {\r\n    constructor(args) {\r\n        this.key = VaultKey.ExternalPriceAccountV1;\r\n        this.pricePerShare = args.pricePerShare;\r\n        this.priceMint = args.priceMint;\r\n        this.allowedToCombine = args.allowedToCombine;\r\n    }\r\n}\r\nexports.ExternalPriceAccount = ExternalPriceAccount;\r\nclass InitVaultArgs {\r\n    constructor(args) {\r\n        this.instruction = 0;\r\n        this.allowFurtherShareCreation = false;\r\n        this.allowFurtherShareCreation = args.allowFurtherShareCreation;\r\n    }\r\n}\r\nclass AmountArgs {\r\n    constructor(args) {\r\n        this.instruction = args.instruction;\r\n        this.amount = args.amount;\r\n    }\r\n}\r\nclass NumberOfShareArgs {\r\n    constructor(args) {\r\n        this.instruction = args.instruction;\r\n        this.numberOfShares = args.numberOfShares;\r\n    }\r\n}\r\nclass UpdateExternalPriceAccountArgs {\r\n    constructor(args) {\r\n        this.instruction = 9;\r\n        this.externalPriceAccount = args.externalPriceAccount;\r\n    }\r\n}\r\nexports.VAULT_SCHEMA = new Map([\r\n    [\r\n        InitVaultArgs,\r\n        {\r\n            kind: 'struct',\r\n            fields: [\r\n                ['instruction', 'u8'],\r\n                ['allowFurtherShareCreation', 'u8'],\r\n            ],\r\n        },\r\n    ],\r\n    [\r\n        AmountArgs,\r\n        {\r\n            kind: 'struct',\r\n            fields: [\r\n                ['instruction', 'u8'],\r\n                ['amount', 'u64'],\r\n            ],\r\n        },\r\n    ],\r\n    [\r\n        NumberOfShareArgs,\r\n        {\r\n            kind: 'struct',\r\n            fields: [\r\n                ['instruction', 'u8'],\r\n                ['numberOfShares', 'u64'],\r\n            ],\r\n        },\r\n    ],\r\n    [\r\n        UpdateExternalPriceAccountArgs,\r\n        {\r\n            kind: 'struct',\r\n            fields: [\r\n                ['instruction', 'u8'],\r\n                ['externalPriceAccount', ExternalPriceAccount],\r\n            ],\r\n        },\r\n    ],\r\n    [\r\n        Vault,\r\n        {\r\n            kind: 'struct',\r\n            fields: [\r\n                ['key', 'u8'],\r\n                ['tokenProgram', 'pubkeyAsString'],\r\n                ['fractionMint', 'pubkeyAsString'],\r\n                ['authority', 'pubkeyAsString'],\r\n                ['fractionTreasury', 'pubkeyAsString'],\r\n                ['redeemTreasury', 'pubkeyAsString'],\r\n                ['allowFurtherShareCreation', 'u8'],\r\n                ['pricingLookupAddress', 'pubkeyAsString'],\r\n                ['tokenTypeCount', 'u8'],\r\n                ['state', 'u8'],\r\n                ['lockedPricePerShare', 'u64'],\r\n            ],\r\n        },\r\n    ],\r\n    [\r\n        SafetyDepositBox,\r\n        {\r\n            kind: 'struct',\r\n            fields: [\r\n                ['key', 'u8'],\r\n                ['vault', 'pubkeyAsString'],\r\n                ['tokenMint', 'pubkeyAsString'],\r\n                ['store', 'pubkeyAsString'],\r\n                ['order', 'u8'],\r\n            ],\r\n        },\r\n    ],\r\n    [\r\n        ExternalPriceAccount,\r\n        {\r\n            kind: 'struct',\r\n            fields: [\r\n                ['key', 'u8'],\r\n                ['pricePerShare', 'u64'],\r\n                ['priceMint', 'pubkeyAsString'],\r\n                ['allowedToCombine', 'u8'],\r\n            ],\r\n        },\r\n    ],\r\n]);\r\nconst decodeVault = (buffer) => {\r\n    return (0, borsh_1.deserializeUnchecked)(exports.VAULT_SCHEMA, Vault, buffer);\r\n};\r\nexports.decodeVault = decodeVault;\r\nconst decodeExternalPriceAccount = (buffer) => {\r\n    return (0, borsh_1.deserializeUnchecked)(exports.VAULT_SCHEMA, ExternalPriceAccount, buffer);\r\n};\r\nexports.decodeExternalPriceAccount = decodeExternalPriceAccount;\r\nconst decodeSafetyDeposit = (buffer) => {\r\n    return (0, borsh_1.deserializeUnchecked)(exports.VAULT_SCHEMA, SafetyDepositBox, buffer);\r\n};\r\nexports.decodeSafetyDeposit = decodeSafetyDeposit;\r\nasync function setVaultAuthority(vault, currentAuthority, newAuthority, instructions) {\r\n    const vaultProgramId = (0, programIds_1.programIds)().vault;\r\n    const data = Buffer.from([10]);\r\n    const keys = [\r\n        {\r\n            pubkey: (0, utils_1.toPublicKey)(vault),\r\n            isSigner: false,\r\n            isWritable: true,\r\n        },\r\n        {\r\n            pubkey: (0, utils_1.toPublicKey)(currentAuthority),\r\n            isSigner: true,\r\n            isWritable: false,\r\n        },\r\n        {\r\n            pubkey: (0, utils_1.toPublicKey)(newAuthority),\r\n            isSigner: false,\r\n            isWritable: false,\r\n        },\r\n    ];\r\n    instructions.push(new web3_js_1.TransactionInstruction({\r\n        keys,\r\n        programId: (0, utils_1.toPublicKey)(vaultProgramId),\r\n        data: data,\r\n    }));\r\n}\r\nexports.setVaultAuthority = setVaultAuthority;\r\nasync function initVault(allowFurtherShareCreation, fractionalMint, redeemTreasury, fractionalTreasury, vault, vaultAuthority, pricingLookupAddress, instructions) {\r\n    const vaultProgramId = (0, programIds_1.programIds)().vault;\r\n    const data = Buffer.from((0, borsh_1.serialize)(exports.VAULT_SCHEMA, new InitVaultArgs({ allowFurtherShareCreation })));\r\n    const keys = [\r\n        {\r\n            pubkey: (0, utils_1.toPublicKey)(fractionalMint),\r\n            isSigner: false,\r\n            isWritable: true,\r\n        },\r\n        {\r\n            pubkey: (0, utils_1.toPublicKey)(redeemTreasury),\r\n            isSigner: false,\r\n            isWritable: true,\r\n        },\r\n        {\r\n            pubkey: (0, utils_1.toPublicKey)(fractionalTreasury),\r\n            isSigner: false,\r\n            isWritable: true,\r\n        },\r\n        {\r\n            pubkey: (0, utils_1.toPublicKey)(vault),\r\n            isSigner: false,\r\n            isWritable: true,\r\n        },\r\n        {\r\n            pubkey: (0, utils_1.toPublicKey)(vaultAuthority),\r\n            isSigner: false,\r\n            isWritable: false,\r\n        },\r\n        {\r\n            pubkey: (0, utils_1.toPublicKey)(pricingLookupAddress),\r\n            isSigner: false,\r\n            isWritable: false,\r\n        },\r\n        {\r\n            pubkey: (0, programIds_1.programIds)().token,\r\n            isSigner: false,\r\n            isWritable: false,\r\n        },\r\n        {\r\n            pubkey: web3_js_1.SYSVAR_RENT_PUBKEY,\r\n            isSigner: false,\r\n            isWritable: false,\r\n        },\r\n    ];\r\n    instructions.push(new web3_js_1.TransactionInstruction({\r\n        keys,\r\n        programId: (0, utils_1.toPublicKey)(vaultProgramId),\r\n        data: data,\r\n    }));\r\n}\r\nexports.initVault = initVault;\r\nasync function getSafetyDepositBox(vault, tokenMint) {\r\n    const vaultProgramId = (0, programIds_1.programIds)().vault;\r\n    return (await (0, utils_1.findProgramAddress)([\r\n        Buffer.from(exports.VAULT_PREFIX),\r\n        (0, utils_1.toPublicKey)(vault).toBuffer(),\r\n        (0, utils_1.toPublicKey)(tokenMint).toBuffer(),\r\n    ], (0, utils_1.toPublicKey)(vaultProgramId)))[0];\r\n}\r\nexports.getSafetyDepositBox = getSafetyDepositBox;\r\nasync function addTokenToInactiveVault(amount, tokenMint, tokenAccount, tokenStoreAccount, vault, vaultAuthority, payer, transferAuthority, instructions) {\r\n    const vaultProgramId = (0, programIds_1.programIds)().vault;\r\n    const safetyDepositBox = await getSafetyDepositBox(vault, tokenMint);\r\n    const value = new AmountArgs({\r\n        instruction: 1,\r\n        amount,\r\n    });\r\n    const data = Buffer.from((0, borsh_1.serialize)(exports.VAULT_SCHEMA, value));\r\n    const keys = [\r\n        {\r\n            pubkey: (0, utils_1.toPublicKey)(safetyDepositBox),\r\n            isSigner: false,\r\n            isWritable: true,\r\n        },\r\n        {\r\n            pubkey: (0, utils_1.toPublicKey)(tokenAccount),\r\n            isSigner: false,\r\n            isWritable: true,\r\n        },\r\n        {\r\n            pubkey: (0, utils_1.toPublicKey)(tokenStoreAccount),\r\n            isSigner: false,\r\n            isWritable: true,\r\n        },\r\n        {\r\n            pubkey: (0, utils_1.toPublicKey)(vault),\r\n            isSigner: false,\r\n            isWritable: true,\r\n        },\r\n        {\r\n            pubkey: (0, utils_1.toPublicKey)(vaultAuthority),\r\n            isSigner: true,\r\n            isWritable: false,\r\n        },\r\n        {\r\n            pubkey: (0, utils_1.toPublicKey)(payer),\r\n            isSigner: true,\r\n            isWritable: false,\r\n        },\r\n        {\r\n            pubkey: (0, utils_1.toPublicKey)(transferAuthority),\r\n            isSigner: true,\r\n            isWritable: false,\r\n        },\r\n        {\r\n            pubkey: (0, programIds_1.programIds)().token,\r\n            isSigner: false,\r\n            isWritable: false,\r\n        },\r\n        {\r\n            pubkey: web3_js_1.SYSVAR_RENT_PUBKEY,\r\n            isSigner: false,\r\n            isWritable: false,\r\n        },\r\n        {\r\n            pubkey: web3_js_1.SystemProgram.programId,\r\n            isSigner: false,\r\n            isWritable: false,\r\n        },\r\n    ];\r\n    instructions.push(new web3_js_1.TransactionInstruction({\r\n        keys,\r\n        programId: (0, utils_1.toPublicKey)(vaultProgramId),\r\n        data,\r\n    }));\r\n}\r\nexports.addTokenToInactiveVault = addTokenToInactiveVault;\r\nasync function activateVault(numberOfShares, vault, fractionMint, fractionTreasury, vaultAuthority, instructions) {\r\n    const vaultProgramId = (0, programIds_1.programIds)().vault;\r\n    const fractionMintAuthority = (await (0, utils_1.findProgramAddress)([\r\n        Buffer.from(exports.VAULT_PREFIX),\r\n        (0, utils_1.toPublicKey)(vaultProgramId).toBuffer(),\r\n        (0, utils_1.toPublicKey)(vault).toBuffer(),\r\n    ], (0, utils_1.toPublicKey)(vaultProgramId)))[0];\r\n    const value = new NumberOfShareArgs({ instruction: 2, numberOfShares });\r\n    const data = Buffer.from((0, borsh_1.serialize)(exports.VAULT_SCHEMA, value));\r\n    const keys = [\r\n        {\r\n            pubkey: (0, utils_1.toPublicKey)(vault),\r\n            isSigner: false,\r\n            isWritable: true,\r\n        },\r\n        {\r\n            pubkey: (0, utils_1.toPublicKey)(fractionMint),\r\n            isSigner: false,\r\n            isWritable: true,\r\n        },\r\n        {\r\n            pubkey: (0, utils_1.toPublicKey)(fractionTreasury),\r\n            isSigner: false,\r\n            isWritable: true,\r\n        },\r\n        {\r\n            pubkey: (0, utils_1.toPublicKey)(fractionMintAuthority),\r\n            isSigner: false,\r\n            isWritable: false,\r\n        },\r\n        {\r\n            pubkey: (0, utils_1.toPublicKey)(vaultAuthority),\r\n            isSigner: true,\r\n            isWritable: false,\r\n        },\r\n        {\r\n            pubkey: (0, programIds_1.programIds)().token,\r\n            isSigner: false,\r\n            isWritable: false,\r\n        },\r\n    ];\r\n    instructions.push(new web3_js_1.TransactionInstruction({\r\n        keys,\r\n        programId: (0, utils_1.toPublicKey)(vaultProgramId),\r\n        data,\r\n    }));\r\n}\r\nexports.activateVault = activateVault;\r\nasync function combineVault(vault, outstandingShareTokenAccount, payingTokenAccount, fractionMint, fractionTreasury, redeemTreasury, newVaultAuthority, vaultAuthority, transferAuthority, externalPriceAccount, instructions) {\r\n    const vaultProgramId = (0, programIds_1.programIds)().vault;\r\n    const burnAuthority = (await (0, utils_1.findProgramAddress)([\r\n        Buffer.from(exports.VAULT_PREFIX),\r\n        (0, utils_1.toPublicKey)(vaultProgramId).toBuffer(),\r\n        (0, utils_1.toPublicKey)(vault).toBuffer(),\r\n    ], (0, utils_1.toPublicKey)(vaultProgramId)))[0];\r\n    const data = Buffer.from([3]);\r\n    const keys = [\r\n        {\r\n            pubkey: (0, utils_1.toPublicKey)(vault),\r\n            isSigner: false,\r\n            isWritable: true,\r\n        },\r\n        {\r\n            pubkey: (0, utils_1.toPublicKey)(outstandingShareTokenAccount),\r\n            isSigner: false,\r\n            isWritable: true,\r\n        },\r\n        {\r\n            pubkey: (0, utils_1.toPublicKey)(payingTokenAccount),\r\n            isSigner: false,\r\n            isWritable: true,\r\n        },\r\n        {\r\n            pubkey: (0, utils_1.toPublicKey)(fractionMint),\r\n            isSigner: false,\r\n            isWritable: true,\r\n        },\r\n        {\r\n            pubkey: (0, utils_1.toPublicKey)(fractionTreasury),\r\n            isSigner: false,\r\n            isWritable: true,\r\n        },\r\n        {\r\n            pubkey: (0, utils_1.toPublicKey)(redeemTreasury),\r\n            isSigner: false,\r\n            isWritable: true,\r\n        },\r\n        {\r\n            pubkey: (0, utils_1.toPublicKey)(newVaultAuthority || vaultAuthority),\r\n            isSigner: false,\r\n            isWritable: false,\r\n        },\r\n        {\r\n            pubkey: (0, utils_1.toPublicKey)(vaultAuthority),\r\n            isSigner: true,\r\n            isWritable: false,\r\n        },\r\n        {\r\n            pubkey: (0, utils_1.toPublicKey)(transferAuthority),\r\n            isSigner: true,\r\n            isWritable: false,\r\n        },\r\n        {\r\n            pubkey: (0, utils_1.toPublicKey)(burnAuthority),\r\n            isSigner: false,\r\n            isWritable: false,\r\n        },\r\n        {\r\n            pubkey: (0, utils_1.toPublicKey)(externalPriceAccount),\r\n            isSigner: false,\r\n            isWritable: false,\r\n        },\r\n        {\r\n            pubkey: (0, programIds_1.programIds)().token,\r\n            isSigner: false,\r\n            isWritable: false,\r\n        },\r\n    ];\r\n    instructions.push(new web3_js_1.TransactionInstruction({\r\n        keys,\r\n        programId: (0, utils_1.toPublicKey)(vaultProgramId),\r\n        data,\r\n    }));\r\n}\r\nexports.combineVault = combineVault;\r\nasync function withdrawTokenFromSafetyDepositBox(amount, destination, safetyDepositBox, storeKey, vault, fractionMint, vaultAuthority, instructions) {\r\n    const vaultProgramId = (0, programIds_1.programIds)().vault;\r\n    const transferAuthority = (await (0, utils_1.findProgramAddress)([\r\n        Buffer.from(exports.VAULT_PREFIX),\r\n        (0, utils_1.toPublicKey)(vaultProgramId).toBuffer(),\r\n        (0, utils_1.toPublicKey)(vault).toBuffer(),\r\n    ], (0, utils_1.toPublicKey)(vaultProgramId)))[0];\r\n    const value = new AmountArgs({ instruction: 5, amount });\r\n    const data = Buffer.from((0, borsh_1.serialize)(exports.VAULT_SCHEMA, value));\r\n    const keys = [\r\n        {\r\n            pubkey: (0, utils_1.toPublicKey)(destination),\r\n            isSigner: false,\r\n            isWritable: true,\r\n        },\r\n        {\r\n            pubkey: (0, utils_1.toPublicKey)(safetyDepositBox),\r\n            isSigner: false,\r\n            isWritable: true,\r\n        },\r\n        {\r\n            pubkey: (0, utils_1.toPublicKey)(storeKey),\r\n            isSigner: false,\r\n            isWritable: true,\r\n        },\r\n        {\r\n            pubkey: (0, utils_1.toPublicKey)(vault),\r\n            isSigner: false,\r\n            isWritable: true,\r\n        },\r\n        {\r\n            pubkey: (0, utils_1.toPublicKey)(fractionMint),\r\n            isSigner: false,\r\n            isWritable: true,\r\n        },\r\n        {\r\n            pubkey: (0, utils_1.toPublicKey)(vaultAuthority),\r\n            isSigner: true,\r\n            isWritable: false,\r\n        },\r\n        {\r\n            pubkey: (0, utils_1.toPublicKey)(transferAuthority),\r\n            isSigner: false,\r\n            isWritable: false,\r\n        },\r\n        {\r\n            pubkey: (0, programIds_1.programIds)().token,\r\n            isSigner: false,\r\n            isWritable: false,\r\n        },\r\n        {\r\n            pubkey: web3_js_1.SYSVAR_RENT_PUBKEY,\r\n            isSigner: false,\r\n            isWritable: false,\r\n        },\r\n    ];\r\n    instructions.push(new web3_js_1.TransactionInstruction({\r\n        keys,\r\n        programId: (0, utils_1.toPublicKey)(vaultProgramId),\r\n        data,\r\n    }));\r\n}\r\nexports.withdrawTokenFromSafetyDepositBox = withdrawTokenFromSafetyDepositBox;\r\nasync function updateExternalPriceAccount(externalPriceAccountKey, externalPriceAccount, instructions) {\r\n    const vaultProgramId = (0, programIds_1.programIds)().vault;\r\n    const value = new UpdateExternalPriceAccountArgs({ externalPriceAccount });\r\n    const data = Buffer.from((0, borsh_1.serialize)(exports.VAULT_SCHEMA, value));\r\n    console.log('Data', data);\r\n    const keys = [\r\n        {\r\n            pubkey: (0, utils_1.toPublicKey)(externalPriceAccountKey),\r\n            isSigner: false,\r\n            isWritable: true,\r\n        },\r\n    ];\r\n    instructions.push(new web3_js_1.TransactionInstruction({\r\n        keys,\r\n        programId: (0, utils_1.toPublicKey)(vaultProgramId),\r\n        data,\r\n    }));\r\n}\r\nexports.updateExternalPriceAccount = updateExternalPriceAccount;\r\nasync function getSafetyDepositBoxAddress(vault, tokenMint) {\r\n    const PROGRAM_IDS = (0, programIds_1.programIds)();\r\n    return (await (0, utils_1.findProgramAddress)([\r\n        Buffer.from(exports.VAULT_PREFIX),\r\n        (0, utils_1.toPublicKey)(vault).toBuffer(),\r\n        (0, utils_1.toPublicKey)(tokenMint).toBuffer(),\r\n    ], (0, utils_1.toPublicKey)(PROGRAM_IDS.vault)))[0];\r\n}\r\nexports.getSafetyDepositBoxAddress = getSafetyDepositBoxAddress;\r\n//# sourceMappingURL=vault.js.map"]},"metadata":{},"sourceType":"script"}